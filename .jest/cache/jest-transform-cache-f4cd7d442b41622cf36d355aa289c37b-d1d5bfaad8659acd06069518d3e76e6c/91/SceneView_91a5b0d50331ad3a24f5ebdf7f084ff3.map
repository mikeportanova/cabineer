{"version":3,"mappings":"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","names":["SceneView","screen","route","navigation","routeState","getState","setState","options","clearOptions","navigatorKeyRef","React","useRef","getKey","useCallback","current","key","addOptionsGetter","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","_NavigationStateContext","Provider","value","_EnsureSingleNavigator","_StaticContainer","name","render","children"],"sources":["SceneView.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport useOptionsGetters from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions\n  >;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]}