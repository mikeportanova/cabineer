91f9bbaba4e70b915ddbc1709f9277b4
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _nonSecure = require("nanoid/non-secure");

var BaseRouter = {
  getStateForAction: function getStateForAction(state, action) {
    switch (action.type) {
      case 'SET_PARAMS':
        {
          var index = action.source ? state.routes.findIndex(function (r) {
            return r.key === action.source;
          }) : state.index;

          if (index === -1) {
            return null;
          }

          return Object.assign({}, state, {
            routes: state.routes.map(function (r, i) {
              return i === index ? Object.assign({}, r, {
                params: Object.assign({}, r.params, action.payload.params)
              }) : r;
            })
          });
        }

      case 'RESET':
        {
          var nextState = action.payload;

          if (nextState.routes.length === 0 || nextState.routes.some(function (route) {
            return !state.routeNames.includes(route.name);
          })) {
            return null;
          }

          if (nextState.stale === false) {
            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(function (name) {
              return !state.routeNames.includes(name);
            })) {
              return null;
            }

            return Object.assign({}, nextState, {
              routes: nextState.routes.map(function (route) {
                return route.key ? route : Object.assign({}, route, {
                  key: route.name + "-" + (0, _nonSecure.nanoid)()
                });
              })
            });
          }

          return nextState;
        }

      default:
        return null;
    }
  },
  shouldActionChangeFocus: function shouldActionChangeFocus(action) {
    return action.type === 'NAVIGATE';
  }
};
var _default = BaseRouter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQVlBLElBQU1BLFVBQVUsR0FBRztFQUNqQkMsaUJBRGlCLDZCQUVmQyxLQUZlLEVBR2ZDLE1BSGUsRUFJcUI7SUFDcEMsUUFBUUEsTUFBTSxDQUFDQyxJQUFmO01BQ0UsS0FBSyxZQUFMO1FBQW1CO1VBQ2pCLElBQU1DLEtBQUssR0FBR0YsTUFBTSxDQUFDRyxNQUFQSCxHQUNWRCxLQUFLLENBQUNLLE1BQU5MLENBQWFNLFNBQWJOLENBQXdCTyxXQUFEO1lBQUEsT0FBT0EsQ0FBQyxDQUFDQyxHQUFGRCxLQUFVTixNQUFNLENBQUNHLE1BQXhCO1VBQUEsQ0FBdkJKLENBRFVDLEdBRVZELEtBQUssQ0FBQ0csS0FGVjs7VUFJQSxJQUFJQSxLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO1lBQ2hCLE9BQU8sSUFBUDtVQUNEOztVQUVELHlCQUNLSCxLQURMO1lBRUVLLE1BQU0sRUFBRUwsS0FBSyxDQUFDSyxNQUFOTCxDQUFhUyxHQUFiVCxDQUFpQixVQUFDTyxDQUFELEVBQUlHLENBQUo7Y0FBQSxPQUN2QkEsQ0FBQyxLQUFLUCxLQUFOTyxxQkFDU0gsQ0FEVEc7Z0JBQ1lDLE1BQU0sb0JBQU9KLENBQUMsQ0FBQ0ksTUFBVCxFQUFvQlYsTUFBTSxDQUFDVyxPQUFQWCxDQUFlVSxNQUFuQztjQURsQkQsS0FFSUgsQ0FIbUI7WUFBQSxDQUFqQlA7VUFGVjtRQVFEOztNQUVELEtBQUssT0FBTDtRQUFjO1VBQ1osSUFBTWEsU0FBUyxHQUFHWixNQUFNLENBQUNXLE9BQXpCOztVQUVBLElBQ0VDLFNBQVMsQ0FBQ1IsTUFBVlEsQ0FBaUJDLE1BQWpCRCxLQUE0QixDQUE1QkEsSUFDQUEsU0FBUyxDQUFDUixNQUFWUSxDQUFpQkUsSUFBakJGLENBQ0dHLGVBQUQ7WUFBQSxPQUE2QixDQUFDaEIsS0FBSyxDQUFDaUIsVUFBTmpCLENBQWlCa0IsUUFBakJsQixDQUEwQmdCLEtBQUssQ0FBQ0csSUFBaENuQixDQUE5QjtVQUFBLENBREZhLENBRkYsRUFLRTtZQUNBLE9BQU8sSUFBUDtVQUNEOztVQUVELElBQUlBLFNBQVMsQ0FBQ08sS0FBVlAsS0FBb0IsS0FBeEIsRUFBK0I7WUFDN0IsSUFDRWIsS0FBSyxDQUFDaUIsVUFBTmpCLENBQWlCYyxNQUFqQmQsS0FBNEJhLFNBQVMsQ0FBQ0ksVUFBVkosQ0FBcUJDLE1BQWpEZCxJQUNBYSxTQUFTLENBQUNJLFVBQVZKLENBQXFCRSxJQUFyQkYsQ0FDR00sY0FBRDtjQUFBLE9BQVUsQ0FBQ25CLEtBQUssQ0FBQ2lCLFVBQU5qQixDQUFpQmtCLFFBQWpCbEIsQ0FBMEJtQixJQUExQm5CLENBQVg7WUFBQSxDQURGYSxDQUZGLEVBS0U7Y0FDQSxPQUFPLElBQVA7WUFDRDs7WUFFRCx5QkFDS0EsU0FETDtjQUVFUixNQUFNLEVBQUVRLFNBQVMsQ0FBQ1IsTUFBVlEsQ0FBaUJKLEdBQWpCSSxDQUFzQkcsZUFBRDtnQkFBQSxPQUMzQkEsS0FBSyxDQUFDUixHQUFOUSxHQUFZQSxLQUFaQSxxQkFBeUJBLEtBQXpCQTtrQkFBZ0NSLEdBQUcsRUFBS1EsS0FBSyxDQUFDRyxJQUFYLFNBQW1CO2dCQUF0REgsRUFEMkI7Y0FBQSxDQUFyQkg7WUFGVjtVQU1EOztVQUVELE9BQU9BLFNBQVA7UUFDRDs7TUFFRDtRQUNFLE9BQU8sSUFBUDtJQXRESjtFQUxlO0VBK0RqQlEsdUJBL0RpQixtQ0ErRE9wQixNQS9EUCxFQStEdUM7SUFDdEQsT0FBT0EsTUFBTSxDQUFDQyxJQUFQRCxLQUFnQixVQUF2QjtFQUNEO0FBakVnQixDQUFuQjtlQW9FZUgiLCJuYW1lcyI6WyJCYXNlUm91dGVyIiwiZ2V0U3RhdGVGb3JBY3Rpb24iLCJzdGF0ZSIsImFjdGlvbiIsInR5cGUiLCJpbmRleCIsInNvdXJjZSIsInJvdXRlcyIsImZpbmRJbmRleCIsInIiLCJrZXkiLCJtYXAiLCJpIiwicGFyYW1zIiwicGF5bG9hZCIsIm5leHRTdGF0ZSIsImxlbmd0aCIsInNvbWUiLCJyb3V0ZSIsInJvdXRlTmFtZXMiLCJpbmNsdWRlcyIsIm5hbWUiLCJzdGFsZSIsInNob3VsZEFjdGlvbkNoYW5nZUZvY3VzIl0sInNvdXJjZXMiOlsiQmFzZVJvdXRlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmFub2lkIH0gZnJvbSAnbmFub2lkL25vbi1zZWN1cmUnO1xuXG5pbXBvcnQgdHlwZSB7XG4gIENvbW1vbk5hdmlnYXRpb25BY3Rpb24sXG4gIE5hdmlnYXRpb25TdGF0ZSxcbiAgUGFydGlhbFN0YXRlLFxufSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBCYXNlIHJvdXRlciBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB3aGVuIHdyaXRpbmcgY3VzdG9tIHJvdXRlcnMuXG4gKiBUaGlzIHByb3ZpZGVzIGZldyBoZWxwZXIgbWV0aG9kcyB0byBoYW5kbGUgY29tbW9uIGFjdGlvbnMgc3VjaCBhcyBgUkVTRVRgLlxuICovXG5jb25zdCBCYXNlUm91dGVyID0ge1xuICBnZXRTdGF0ZUZvckFjdGlvbjxTdGF0ZSBleHRlbmRzIE5hdmlnYXRpb25TdGF0ZT4oXG4gICAgc3RhdGU6IFN0YXRlLFxuICAgIGFjdGlvbjogQ29tbW9uTmF2aWdhdGlvbkFjdGlvblxuICApOiBTdGF0ZSB8IFBhcnRpYWxTdGF0ZTxTdGF0ZT4gfCBudWxsIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlICdTRVRfUEFSQU1TJzoge1xuICAgICAgICBjb25zdCBpbmRleCA9IGFjdGlvbi5zb3VyY2VcbiAgICAgICAgICA/IHN0YXRlLnJvdXRlcy5maW5kSW5kZXgoKHIpID0+IHIua2V5ID09PSBhY3Rpb24uc291cmNlKVxuICAgICAgICAgIDogc3RhdGUuaW5kZXg7XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICByb3V0ZXM6IHN0YXRlLnJvdXRlcy5tYXAoKHIsIGkpID0+XG4gICAgICAgICAgICBpID09PSBpbmRleFxuICAgICAgICAgICAgICA/IHsgLi4uciwgcGFyYW1zOiB7IC4uLnIucGFyYW1zLCAuLi5hY3Rpb24ucGF5bG9hZC5wYXJhbXMgfSB9XG4gICAgICAgICAgICAgIDogclxuICAgICAgICAgICksXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ1JFU0VUJzoge1xuICAgICAgICBjb25zdCBuZXh0U3RhdGUgPSBhY3Rpb24ucGF5bG9hZCBhcyBTdGF0ZSB8IFBhcnRpYWxTdGF0ZTxTdGF0ZT47XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIG5leHRTdGF0ZS5yb3V0ZXMubGVuZ3RoID09PSAwIHx8XG4gICAgICAgICAgbmV4dFN0YXRlLnJvdXRlcy5zb21lKFxuICAgICAgICAgICAgKHJvdXRlOiB7IG5hbWU6IHN0cmluZyB9KSA9PiAhc3RhdGUucm91dGVOYW1lcy5pbmNsdWRlcyhyb3V0ZS5uYW1lKVxuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dFN0YXRlLnN0YWxlID09PSBmYWxzZSkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHN0YXRlLnJvdXRlTmFtZXMubGVuZ3RoICE9PSBuZXh0U3RhdGUucm91dGVOYW1lcy5sZW5ndGggfHxcbiAgICAgICAgICAgIG5leHRTdGF0ZS5yb3V0ZU5hbWVzLnNvbWUoXG4gICAgICAgICAgICAgIChuYW1lKSA9PiAhc3RhdGUucm91dGVOYW1lcy5pbmNsdWRlcyhuYW1lKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLm5leHRTdGF0ZSxcbiAgICAgICAgICAgIHJvdXRlczogbmV4dFN0YXRlLnJvdXRlcy5tYXAoKHJvdXRlKSA9PlxuICAgICAgICAgICAgICByb3V0ZS5rZXkgPyByb3V0ZSA6IHsgLi4ucm91dGUsIGtleTogYCR7cm91dGUubmFtZX0tJHtuYW5vaWQoKX1gIH1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcblxuICBzaG91bGRBY3Rpb25DaGFuZ2VGb2N1cyhhY3Rpb246IENvbW1vbk5hdmlnYXRpb25BY3Rpb24pIHtcbiAgICByZXR1cm4gYWN0aW9uLnR5cGUgPT09ICdOQVZJR0FURSc7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCYXNlUm91dGVyO1xuIl19