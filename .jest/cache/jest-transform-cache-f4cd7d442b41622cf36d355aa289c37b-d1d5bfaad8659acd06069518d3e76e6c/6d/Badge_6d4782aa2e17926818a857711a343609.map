{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBe,SAASA,KAAT,OAML;EAAA,IALRC,QAKQ,QALRA,QAKQ;EAAA,IAJRC,KAIQ,QAJRA,KAIQ;EAAA,wBAHRC,OAGQ;EAAA,IAHRA,OAGQ,6BAHE,IAGF;EAAA,qBAFRC,IAEQ;EAAA,IAFRA,IAEQ,0BAFD,EAEC;EAAA,IADLC,IACK;;EACR,sBAAkBC,KAAK,CAACC,QAAND,CAAe;IAAA,OAAM,IAAIE,sBAASC,KAAb,CAAmBN,OAAO,GAAG,CAAH,GAAO,CAAjC,CAAN;EAAA,CAAfG,CAAlB;EAAA;EAAA,IAAOI,OAAP;;EACA,uBAAgCJ,KAAK,CAACC,QAAND,CAAeH,OAAfG,CAAhC;EAAA;EAAA,IAAOK,QAAP;EAAA,IAAiBC,WAAjB;;EAEA,IAAMC,KAAK,GAAG,uBAAd;EAEAP,KAAK,CAACQ,SAANR,CAAgB,YAAM;IACpB,IAAI,CAACK,QAAL,EAAe;MACb;IACD;;IAEDH,sBAASO,MAATP,CAAgBE,OAAhBF,EAAyB;MACvBQ,OAAO,EAAEb,OAAO,GAAG,CAAH,GAAO,CADA;MAEvBc,QAAQ,EAAE,GAFa;MAGvBC,eAAe,EAAE;IAHM,CAAzBV,EAIGW,KAJHX,CAIS,iBAAkB;MAAA,IAAfY,QAAe,SAAfA,QAAe;;MACzB,IAAIA,QAAQ,IAAI,CAACjB,OAAjB,EAA0B;QACxBS,WAAW,CAAC,KAAD,CAAXA;MACD;IAPH;;IAUA,OAAO;MAAA,OAAMF,OAAO,CAACW,aAARX,EAAN;IAAA,CAAP;EAfF,GAgBG,CAACA,OAAD,EAAUC,QAAV,EAAoBR,OAApB,CAhBHG;;EAkBA,IAAI,CAACK,QAAL,EAAe;IACb,IAAIR,OAAJ,EAAa;MACXS,WAAW,CAAC,IAAD,CAAXA;IADF,OAEO;MACL,OAAO,IAAP;IACD;EA7BK;;EAiCR,YACEU,wBAAWC,OAAXD,CAAmBpB,KAAnBoB,KAA6B,EAD/B;EAAA,kCAAQE,eAAR;EAAA,IAAQA,eAAR,sCAA0BX,KAAK,CAACY,MAANZ,CAAaa,YAAvC;EAAA,IAAwDC,SAAxD;;EAEA,IAAMC,SAAS,GAAG,oBAAMJ,eAAN,EAAuBK,OAAvB,KAAmC,OAAnC,GAA6C,OAA/D;EAEA,IAAMC,YAAY,GAAG1B,IAAI,GAAG,CAA5B;EACA,IAAM2B,QAAQ,GAAGC,IAAI,CAACC,KAALD,CAAY5B,IAAI,GAAG,CAAPA,GAAY,CAAxB4B,CAAjB;EAEA,OACE1B,oBAAC4B,sBAASC,IAAV;IACEC,aAAa,EAAE,CADjB;IAEElC,KAAK,EAAE,CACL;MACEmC,SAAS,EAAE,CACT;QACEC,KAAK,EAAE5B,OAAO,CAAC6B,WAAR7B,CAAoB;UACzB8B,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADa;UAEzBC,WAAW,EAAE,CAAC,GAAD,EAAM,CAAN;QAFY,CAApB/B;MADT,CADS,CADb;MASEgC,KAAK,EAAEd,SATT;MAUEe,UAAU,EAAEvC,IAAI,GAAG,CAVrB;MAWEwC,MAAM,EAAExC,IAXV;MAYEyC,QAAQ,EAAEzC,IAZZ;MAaEM,OAbF,EAaEA,OAbF;MAcEc,eAdF,EAcEA,eAdF;MAeEO,QAfF,EAeEA,QAfF;MAgBED;IAhBF,CADK,EAmBLgB,MAAM,CAACC,SAnBF,EAoBLpB,SApBK;EAFT,GAwBMtB,IAxBN,GA0BGJ,QA1BH,CADF;AA8BD;;AAED,IAAM6C,MAAM,GAAGxB,wBAAW0B,MAAX1B,CAAkB;EAC/ByB,SAAS,EAAE;IACTE,SAAS,EAAE,UADF;IAETC,SAAS,EAAE,QAFF;IAGTC,iBAAiB,EAAE,CAHV;IAITC,QAAQ,EAAE;EAJD;AADoB,CAAlB9B,CAAf","names":["Badge","children","style","visible","size","rest","React","useState","Animated","Value","opacity","rendered","setRendered","theme","useEffect","timing","toValue","duration","useNativeDriver","start","finished","stopAnimation","StyleSheet","flatten","backgroundColor","colors","notification","restStyle","textColor","isLight","borderRadius","fontSize","Math","floor","_reactNative","Text","numberOfLines","transform","scale","interpolate","inputRange","outputRange","color","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","paddingHorizontal","overflow"],"sources":["Badge.tsx"],"sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport color from 'color';\nimport * as React from 'react';\nimport { Animated, StyleProp, StyleSheet, TextStyle } from 'react-native';\n\ntype Props = {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  /**\n   * Style object for the tab bar container.\n   */\n  style?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n};\n\nexport default function Badge({\n  children,\n  style,\n  visible = true,\n  size = 18,\n  ...rest\n}: Props) {\n  const [opacity] = React.useState(() => new Animated.Value(visible ? 1 : 0));\n  const [rendered, setRendered] = React.useState(visible);\n\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n\n    return () => opacity.stopAnimation();\n  }, [opacity, rendered, visible]);\n\n  if (!rendered) {\n    if (visible) {\n      setRendered(true);\n    } else {\n      return null;\n    }\n  }\n\n  // @ts-expect-error: backgroundColor definitely exists\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n\n  const borderRadius = size / 2;\n  const fontSize = Math.floor((size * 3) / 4);\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          transform: [\n            {\n              scale: opacity.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.5, 1],\n              }),\n            },\n          ],\n          color: textColor,\n          lineHeight: size - 1,\n          height: size,\n          minWidth: size,\n          opacity,\n          backgroundColor,\n          fontSize,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]}