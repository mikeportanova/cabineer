{"version":3,"mappings":"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","names":["BottomTabBarItem","focused","route","label","icon","badge","badgeStyle","to","button","children","style","onPress","accessibilityRole","rest","Platform","OS","_react","_native","styles","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","_reactNative","accessibilityLabel","testID","onLongPress","horizontal","customActiveTintColor","activeTintColor","customInactiveTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","allowFontScaling","labelStyle","iconStyle","colors","undefined","primary","text","mix","card","hex","renderLabel","color","numberOfLines","labelBeside","labelBeneath","position","renderIcon","activeOpacity","inactiveOpacity","_TabBarIcon","scene","backgroundColor","select","ios","default","accessibilityState","selected","accessibilityStates","tab","tabLandscape","tabPortrait","Fragment","StyleSheet","create","flex","alignItems","justifyContent","flexDirection","textAlign","fontSize","marginLeft","marginTop","display"],"sources":["BottomTabItem.tsx"],"sourcesContent":["import { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport React from 'react';\nimport {\n  GestureResponderEvent,\n  Platform,\n  Pressable,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport type { BottomTabBarButtonProps, LabelPosition } from '../types';\nimport TabBarIcon from './TabBarIcon';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * Custom style for the badge.\n   */\n  badgeStyle?: StyleProp<TextStyle>;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <Pressable\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          onPress={onPress}\n          style={style}\n        >\n          {children}\n        </Pressable>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        badgeStyle={badgeStyle}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    // FIXME: accessibilityRole: 'tab' doesn't seem to work as expected on iOS\n    accessibilityRole: Platform.select({ ios: 'button', default: 'tab' }),\n    accessibilityState: { selected: focused },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]}