140669d1e1786f2aa7d3521b2a3213d5
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["state", "descriptors", "dimensions", "insets", "style"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BottomTabBar;
exports.getTabBarHeight = void 0;

var _elements = require("@react-navigation/elements");

var _native = require("@react-navigation/native");

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

var _BottomTabBarHeightCallbackContext = _interopRequireDefault(require("../utils/BottomTabBarHeightCallbackContext"));

var _useIsKeyboardShown = _interopRequireDefault(require("../utils/useIsKeyboardShown"));

var _BottomTabItem = _interopRequireDefault(require("./BottomTabItem"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var DEFAULT_TABBAR_HEIGHT = 49;
var COMPACT_TABBAR_HEIGHT = 32;
var DEFAULT_MAX_TAB_ITEM_WIDTH = 125;
var useNativeDriver = _reactNative.Platform.OS !== 'web';

var shouldUseHorizontalLabels = function shouldUseHorizontalLabels(_ref) {
  var state = _ref.state,
      descriptors = _ref.descriptors,
      layout = _ref.layout,
      dimensions = _ref.dimensions;
  var tabBarLabelPosition = descriptors[state.routes[state.index].key].options.tabBarLabelPosition;

  if (tabBarLabelPosition) {
    switch (tabBarLabelPosition) {
      case 'beside-icon':
        return true;

      case 'below-icon':
        return false;
    }
  }

  if (layout.width >= 768) {
    var maxTabWidth = state.routes.reduce(function (acc, route) {
      var tabBarItemStyle = descriptors[route.key].options.tabBarItemStyle;

      var flattenedStyle = _reactNative.StyleSheet.flatten(tabBarItemStyle);

      if (flattenedStyle) {
        if (typeof flattenedStyle.width === 'number') {
          return acc + flattenedStyle.width;
        } else if (typeof flattenedStyle.maxWidth === 'number') {
          return acc + flattenedStyle.maxWidth;
        }
      }

      return acc + DEFAULT_MAX_TAB_ITEM_WIDTH;
    }, 0);
    return maxTabWidth <= layout.width;
  } else {
    return dimensions.width > dimensions.height;
  }
};

var getPaddingBottom = function getPaddingBottom(insets) {
  return Math.max(insets.bottom - _reactNative.Platform.select({
    ios: 4,
    default: 0
  }), 0);
};

var getTabBarHeight = function getTabBarHeight(_ref2) {
  var _StyleSheet$flatten;

  var state = _ref2.state,
      descriptors = _ref2.descriptors,
      dimensions = _ref2.dimensions,
      insets = _ref2.insets,
      style = _ref2.style,
      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
  var customHeight = (_StyleSheet$flatten = _reactNative.StyleSheet.flatten(style)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.height;

  if (typeof customHeight === 'number') {
    return customHeight;
  }

  var isLandscape = dimensions.width > dimensions.height;
  var horizontalLabels = shouldUseHorizontalLabels(Object.assign({
    state: state,
    descriptors: descriptors,
    dimensions: dimensions
  }, rest));
  var paddingBottom = getPaddingBottom(insets);

  if (_reactNative.Platform.OS === 'ios' && !_reactNative.Platform.isPad && isLandscape && horizontalLabels) {
    return COMPACT_TABBAR_HEIGHT + paddingBottom;
  }

  return DEFAULT_TABBAR_HEIGHT + paddingBottom;
};

exports.getTabBarHeight = getTabBarHeight;

function BottomTabBar(_ref3) {
  var state = _ref3.state,
      navigation = _ref3.navigation,
      descriptors = _ref3.descriptors,
      insets = _ref3.insets,
      style = _ref3.style;

  var _ref6 = (0, _native.useTheme)(),
      colors = _ref6.colors;

  var buildLink = (0, _native.useLinkBuilder)();
  var focusedRoute = state.routes[state.index];
  var focusedDescriptor = descriptors[focusedRoute.key];
  var focusedOptions = focusedDescriptor.options;
  var tabBarShowLabel = focusedOptions.tabBarShowLabel,
      _focusedOptions$tabBa = focusedOptions.tabBarHideOnKeyboard,
      tabBarHideOnKeyboard = _focusedOptions$tabBa === void 0 ? false : _focusedOptions$tabBa,
      tabBarVisibilityAnimationConfig = focusedOptions.tabBarVisibilityAnimationConfig,
      tabBarStyle = focusedOptions.tabBarStyle,
      tabBarBackground = focusedOptions.tabBarBackground,
      tabBarActiveTintColor = focusedOptions.tabBarActiveTintColor,
      tabBarInactiveTintColor = focusedOptions.tabBarInactiveTintColor,
      tabBarActiveBackgroundColor = focusedOptions.tabBarActiveBackgroundColor,
      tabBarInactiveBackgroundColor = focusedOptions.tabBarInactiveBackgroundColor;
  var dimensions = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();
  var isKeyboardShown = (0, _useIsKeyboardShown.default)();

  var onHeightChange = _react.default.useContext(_BottomTabBarHeightCallbackContext.default);

  var shouldShowTabBar = !(tabBarHideOnKeyboard && isKeyboardShown);

  var visibilityAnimationConfigRef = _react.default.useRef(tabBarVisibilityAnimationConfig);

  _react.default.useEffect(function () {
    visibilityAnimationConfigRef.current = tabBarVisibilityAnimationConfig;
  });

  var _react$default$useSta = _react.default.useState(!shouldShowTabBar),
      _react$default$useSta2 = (0, _slicedToArray2.default)(_react$default$useSta, 2),
      isTabBarHidden = _react$default$useSta2[0],
      setIsTabBarHidden = _react$default$useSta2[1];

  var _react$default$useSta3 = _react.default.useState(function () {
    return new _reactNative.Animated.Value(shouldShowTabBar ? 1 : 0);
  }),
      _react$default$useSta4 = (0, _slicedToArray2.default)(_react$default$useSta3, 1),
      visible = _react$default$useSta4[0];

  _react.default.useEffect(function () {
    var visibilityAnimationConfig = visibilityAnimationConfigRef.current;

    if (shouldShowTabBar) {
      var _visibilityAnimationC, _visibilityAnimationC2;

      var animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC = visibilityAnimationConfig.show) === null || _visibilityAnimationC === void 0 ? void 0 : _visibilityAnimationC.animation) === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;
      animation(visible, Object.assign({
        toValue: 1,
        useNativeDriver: useNativeDriver,
        duration: 250
      }, visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC2 = visibilityAnimationConfig.show) === null || _visibilityAnimationC2 === void 0 ? void 0 : _visibilityAnimationC2.config)).start(function (_ref4) {
        var finished = _ref4.finished;

        if (finished) {
          setIsTabBarHidden(false);
        }
      });
    } else {
      var _visibilityAnimationC3, _visibilityAnimationC4;

      setIsTabBarHidden(true);

      var _animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC3 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC3 === void 0 ? void 0 : _visibilityAnimationC3.animation) === 'spring' ? _reactNative.Animated.spring : _reactNative.Animated.timing;

      _animation(visible, Object.assign({
        toValue: 0,
        useNativeDriver: useNativeDriver,
        duration: 200
      }, visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC4 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC4 === void 0 ? void 0 : _visibilityAnimationC4.config)).start();
    }

    return function () {
      return visible.stopAnimation();
    };
  }, [visible, shouldShowTabBar]);

  var _react$default$useSta5 = _react.default.useState({
    height: 0,
    width: dimensions.width
  }),
      _react$default$useSta6 = (0, _slicedToArray2.default)(_react$default$useSta5, 2),
      layout = _react$default$useSta6[0],
      setLayout = _react$default$useSta6[1];

  var handleLayout = function handleLayout(e) {
    var _e$nativeEvent$layout = e.nativeEvent.layout,
        height = _e$nativeEvent$layout.height,
        width = _e$nativeEvent$layout.width;
    onHeightChange === null || onHeightChange === void 0 ? void 0 : onHeightChange(height);
    setLayout(function (layout) {
      if (height === layout.height && width === layout.width) {
        return layout;
      } else {
        return {
          height: height,
          width: width
        };
      }
    });
  };

  var routes = state.routes;
  var paddingBottom = getPaddingBottom(insets);
  var tabBarHeight = getTabBarHeight({
    state: state,
    descriptors: descriptors,
    insets: insets,
    dimensions: dimensions,
    layout: layout,
    style: [tabBarStyle, style]
  });
  var hasHorizontalLabels = shouldUseHorizontalLabels({
    state: state,
    descriptors: descriptors,
    dimensions: dimensions,
    layout: layout
  });
  var tabBarBackgroundElement = tabBarBackground === null || tabBarBackground === void 0 ? void 0 : tabBarBackground();
  return _react.default.createElement(_reactNative.Animated.View, {
    style: [styles.tabBar, {
      backgroundColor: tabBarBackgroundElement != null ? 'transparent' : colors.card,
      borderTopColor: colors.border
    }, {
      transform: [{
        translateY: visible.interpolate({
          inputRange: [0, 1],
          outputRange: [layout.height + paddingBottom + _reactNative.StyleSheet.hairlineWidth, 0]
        })
      }],
      position: isTabBarHidden ? 'absolute' : null
    }, {
      height: tabBarHeight,
      paddingBottom: paddingBottom,
      paddingHorizontal: Math.max(insets.left, insets.right)
    }, tabBarStyle],
    pointerEvents: isTabBarHidden ? 'none' : 'auto',
    onLayout: handleLayout
  }, _react.default.createElement(_reactNative.View, {
    pointerEvents: "none",
    style: _reactNative.StyleSheet.absoluteFill
  }, tabBarBackgroundElement), _react.default.createElement(_reactNative.View, {
    accessibilityRole: "tablist",
    style: styles.content
  }, routes.map(function (route, index) {
    var _options$tabBarIcon;

    var focused = index === state.index;
    var options = descriptors[route.key].options;

    var onPress = function onPress() {
      var event = navigation.emit({
        type: 'tabPress',
        target: route.key,
        canPreventDefault: true
      });

      if (!focused && !event.defaultPrevented) {
        navigation.dispatch(Object.assign({}, _native.CommonActions.navigate({
          name: route.name,
          merge: true
        }), {
          target: state.key
        }));
      }
    };

    var onLongPress = function onLongPress() {
      navigation.emit({
        type: 'tabLongPress',
        target: route.key
      });
    };

    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;
    var accessibilityLabel = options.tabBarAccessibilityLabel !== undefined ? options.tabBarAccessibilityLabel : typeof label === 'string' && _reactNative.Platform.OS === 'ios' ? label + ", tab, " + (index + 1) + " of " + routes.length : undefined;
    return _react.default.createElement(_native.NavigationContext.Provider, {
      key: route.key,
      value: descriptors[route.key].navigation
    }, _react.default.createElement(_native.NavigationRouteContext.Provider, {
      value: route
    }, _react.default.createElement(_BottomTabItem.default, {
      route: route,
      focused: focused,
      horizontal: hasHorizontalLabels,
      onPress: onPress,
      onLongPress: onLongPress,
      accessibilityLabel: accessibilityLabel,
      to: buildLink(route.name, route.params),
      testID: options.tabBarTestID,
      allowFontScaling: options.tabBarAllowFontScaling,
      activeTintColor: tabBarActiveTintColor,
      inactiveTintColor: tabBarInactiveTintColor,
      activeBackgroundColor: tabBarActiveBackgroundColor,
      inactiveBackgroundColor: tabBarInactiveBackgroundColor,
      button: options.tabBarButton,
      icon: (_options$tabBarIcon = options.tabBarIcon) !== null && _options$tabBarIcon !== void 0 ? _options$tabBarIcon : function (_ref5) {
        var color = _ref5.color,
            size = _ref5.size;
        return _react.default.createElement(_elements.MissingIcon, {
          color: color,
          size: size
        });
      },
      badge: options.tabBarBadge,
      badgeStyle: options.tabBarBadgeStyle,
      label: label,
      showLabel: tabBarShowLabel,
      labelStyle: options.tabBarLabelStyle,
      iconStyle: options.tabBarIconStyle,
      style: options.tabBarItemStyle
    })));
  })));
}

var styles = _reactNative.StyleSheet.create({
  tabBar: {
    left: 0,
    right: 0,
    bottom: 0,
    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
    elevation: 8
  },
  content: {
    flex: 1,
    flexDirection: 'row'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,