{"version":3,"names":["eventEmitter","EventEmitter","NativeAppearance","nativeEventEmitter","NativeEventEmitter","Platform","OS","addListener","newAppearance","colorScheme","invariant","emit","module","exports","getColorScheme","__DEV__","isAsyncDebugging","nativeColorScheme","addChangeListener","listener"],"sources":["Appearance.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport EventEmitter, {\n  type EventSubscription,\n} from '../vendor/emitter/EventEmitter';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport NativeAppearance, {\n  type AppearancePreferences,\n  type ColorSchemeName,\n} from './NativeAppearance';\nimport invariant from 'invariant';\nimport {isAsyncDebugging} from './DebugEnvironment';\nimport Platform from '../Utilities/Platform';\n\ntype AppearanceListener = (preferences: AppearancePreferences) => void;\nconst eventEmitter = new EventEmitter<{\n  change: [AppearancePreferences],\n}>();\n\ntype NativeAppearanceEventDefinitions = {\n  appearanceChanged: [AppearancePreferences],\n};\n\nif (NativeAppearance) {\n  const nativeEventEmitter =\n    new NativeEventEmitter<NativeAppearanceEventDefinitions>(\n      // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n      // If you want to use the native module on other platforms, please remove this condition and test its behavior\n      Platform.OS !== 'ios' ? null : NativeAppearance,\n    );\n  nativeEventEmitter.addListener(\n    'appearanceChanged',\n    (newAppearance: AppearancePreferences) => {\n      const {colorScheme} = newAppearance;\n      invariant(\n        colorScheme === 'dark' ||\n          colorScheme === 'light' ||\n          colorScheme == null,\n        \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\",\n      );\n      eventEmitter.emit('change', {colorScheme});\n    },\n  );\n}\n\nmodule.exports = {\n  /**\n   * Note: Although color scheme is available immediately, it may change at any\n   * time. Any rendering logic or styles that depend on this should try to call\n   * this function on every render, rather than caching the value (for example,\n   * using inline styles rather than setting a value in a `StyleSheet`).\n   *\n   * Example: `const colorScheme = Appearance.getColorScheme();`\n   *\n   * @returns {?ColorSchemeName} Value for the color scheme preference.\n   */\n  getColorScheme(): ?ColorSchemeName {\n    if (__DEV__) {\n      if (isAsyncDebugging) {\n        // Hard code light theme when using the async debugger as\n        // sync calls aren't supported\n        return 'light';\n      }\n    }\n\n    // TODO: (hramos) T52919652 Use ?ColorSchemeName once codegen supports union\n    const nativeColorScheme: ?string =\n      NativeAppearance == null\n        ? null\n        : NativeAppearance.getColorScheme() || null;\n    invariant(\n      nativeColorScheme === 'dark' ||\n        nativeColorScheme === 'light' ||\n        nativeColorScheme == null,\n      \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\",\n    );\n    return nativeColorScheme;\n  },\n\n  /**\n   * Add an event handler that is fired when appearance preferences change.\n   */\n  addChangeListener(listener: AppearanceListener): EventSubscription {\n    return eventEmitter.addListener('change', listener);\n  },\n};\n"],"mappings":";;AAUA;;AAGA;;AACA;;AAIA;;AACA;;AACA;;AAGA,IAAMA,YAAY,GAAG,IAAIC,qBAAJ,EAArB;;AAQA,IAAIC,yBAAJ,EAAsB;EACpB,IAAMC,kBAAkB,GACtB,IAAIC,2BAAJ,CAGEC,iBAAA,CAASC,EAAT,KAAgB,KAAhB,GAAwB,IAAxB,GAA+BJ,yBAHjC,CADF;EAMAC,kBAAkB,CAACI,WAAnB,CACE,mBADF,EAEE,UAACC,aAAD,EAA0C;IACxC,IAAOC,WAAP,GAAsBD,aAAtB,CAAOC,WAAP;IACA,IAAAC,kBAAA,EACED,WAAW,KAAK,MAAhB,IACEA,WAAW,KAAK,OADlB,IAEEA,WAAW,IAAI,IAHnB,EAIE,4DAJF;IAMAT,YAAY,CAACW,IAAb,CAAkB,QAAlB,EAA4B;MAACF,WAAW,EAAXA;IAAD,CAA5B;EACD,CAXH;AAaD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;EAWfC,cAXe,4BAWoB;IACjC,IAAIC,OAAJ,EAAa;MACX,IAAIC,kCAAJ,EAAsB;QAGpB,OAAO,OAAP;MACD;IACF;;IAGD,IAAMC,iBAA0B,GAC9Bf,yBAAA,IAAoB,IAApB,GACI,IADJ,GAEIA,yBAAA,CAAiBY,cAAjB,MAAqC,IAH3C;IAIA,IAAAJ,kBAAA,EACEO,iBAAiB,KAAK,MAAtB,IACEA,iBAAiB,KAAK,OADxB,IAEEA,iBAAiB,IAAI,IAHzB,EAIE,4DAJF;IAMA,OAAOA,iBAAP;EACD,CAhCc;EAqCfC,iBArCe,6BAqCGC,QArCH,EAqCoD;IACjE,OAAOnB,YAAY,CAACO,WAAb,CAAyB,QAAzB,EAAmCY,QAAnC,CAAP;EACD;AAvCc,CAAjB"}