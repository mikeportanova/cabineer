3e43902474d253abe4ba2406d48003ef
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabActions = void 0;
exports.default = TabRouter;

var _nonSecure = require("nanoid/non-secure");

var _BaseRouter = _interopRequireDefault(require("./BaseRouter"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var TYPE_ROUTE = 'route';
var TabActions = {
  jumpTo: function jumpTo(name, params) {
    return {
      type: 'JUMP_TO',
      payload: {
        name: name,
        params: params
      }
    };
  }
};
exports.TabActions = TabActions;

var getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {
  var history = [{
    type: TYPE_ROUTE,
    key: routes[index].key
  }];
  var initialRouteIndex;

  switch (backBehavior) {
    case 'order':
      for (var i = index; i > 0; i--) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[i - 1].key
        });
      }

      break;

    case 'firstRoute':
      if (index !== 0) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[0].key
        });
      }

      break;

    case 'initialRoute':
      initialRouteIndex = routes.findIndex(function (route) {
        return route.name === initialRouteName;
      });
      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;

      if (index !== initialRouteIndex) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[initialRouteIndex].key
        });
      }

      break;

    case 'history':
      break;
  }

  return history;
};

var changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {
  var history;

  if (backBehavior === 'history') {
    var currentKey = state.routes[index].key;
    history = state.history.filter(function (it) {
      return it.type === 'route' ? it.key !== currentKey : false;
    }).concat({
      type: TYPE_ROUTE,
      key: currentKey
    });
  } else {
    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);
  }

  return Object.assign({}, state, {
    index: index,
    history: history
  });
};

function TabRouter(_ref) {
  var initialRouteName = _ref.initialRouteName,
      _ref$backBehavior = _ref.backBehavior,
      backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;
  var router = Object.assign({}, _BaseRouter.default, {
    type: 'tab',
    getInitialState: function getInitialState(_ref2) {
      var routeNames = _ref2.routeNames,
          routeParamList = _ref2.routeParamList;
      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;
      var routes = routeNames.map(function (name) {
        return {
          name: name,
          key: name + "-" + (0, _nonSecure.nanoid)(),
          params: routeParamList[name]
        };
      });
      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);
      return {
        stale: false,
        type: 'tab',
        key: "tab-" + (0, _nonSecure.nanoid)(),
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes
      };
    },
    getRehydratedState: function getRehydratedState(partialState, _ref3) {
      var _state$routes, _state$index, _state$history$filter, _state$history;

      var routeNames = _ref3.routeNames,
          routeParamList = _ref3.routeParamList;
      var state = partialState;

      if (state.stale === false) {
        return state;
      }

      var routes = routeNames.map(function (name) {
        var route = state.routes.find(function (r) {
          return r.name === name;
        });
        return Object.assign({}, route, {
          name: name,
          key: route && route.name === name && route.key ? route.key : name + "-" + (0, _nonSecure.nanoid)(),
          params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined
        });
      });
      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state === null || state === void 0 ? void 0 : state.index) !== null && _state$index !== void 0 ? _state$index : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);
      var history = (_state$history$filter = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {
        return routes.find(function (r) {
          return r.key === it.key;
        });
      })) !== null && _state$history$filter !== void 0 ? _state$history$filter : [];
      return changeIndex({
        stale: false,
        type: 'tab',
        key: "tab-" + (0, _nonSecure.nanoid)(),
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes
      }, index, backBehavior, initialRouteName);
    },
    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {
      var routeNames = _ref4.routeNames,
          routeParamList = _ref4.routeParamList,
          routeKeyChanges = _ref4.routeKeyChanges;
      var routes = routeNames.map(function (name) {
        return state.routes.find(function (r) {
          return r.name === name && !routeKeyChanges.includes(r.name);
        }) || {
          name: name,
          key: name + "-" + (0, _nonSecure.nanoid)(),
          params: routeParamList[name]
        };
      });
      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));
      var history = state.history.filter(function (it) {
        return it.type !== 'route' || routes.find(function (r) {
          return r.key === it.key;
        });
      });

      if (!history.length) {
        history = getRouteHistory(routes, index, backBehavior, initialRouteName);
      }

      return Object.assign({}, state, {
        history: history,
        routeNames: routeNames,
        routes: routes,
        index: index
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {
        return r.key === key;
      });

      if (index === -1 || index === state.index) {
        return state;
      }

      return changeIndex(state, index, backBehavior, initialRouteName);
    },
    getStateForAction: function getStateForAction(state, action, _ref5) {
      var routeParamList = _ref5.routeParamList;

      switch (action.type) {
        case 'JUMP_TO':
        case 'NAVIGATE':
          {
            var index = -1;

            if (action.type === 'NAVIGATE' && action.payload.key) {
              index = state.routes.findIndex(function (route) {
                return route.key === action.payload.key;
              });
            } else {
              index = state.routes.findIndex(function (route) {
                return route.name === action.payload.name;
              });
            }

            if (index === -1) {
              return null;
            }

            return changeIndex(Object.assign({}, state, {
              routes: state.routes.map(function (route, i) {
                if (i !== index) {
                  return route;
                }

                var params;

                if (action.type === 'NAVIGATE' && action.payload.merge) {
                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params, action.payload.params) : route.params;
                } else {
                  params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;
                }

                var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;
                return params !== route.params || path !== route.path ? Object.assign({}, route, {
                  path: path,
                  params: params
                }) : route;
              })
            }), index, backBehavior, initialRouteName);
          }

        case 'GO_BACK':
          {
            if (state.history.length === 1) {
              return null;
            }

            var previousKey = state.history[state.history.length - 2].key;

            var _index = state.routes.findIndex(function (route) {
              return route.key === previousKey;
            });

            if (_index === -1) {
              return null;
            }

            return Object.assign({}, state, {
              history: state.history.slice(0, -1),
              index: _index
            });
          }

        default:
          return _BaseRouter.default.getStateForAction(state, action);
      }
    },
    shouldActionChangeFocus: function shouldActionChangeFocus(action) {
      return action.type === 'NAVIGATE';
    },
    actionCreators: TabActions
  });
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTRPaUM7TUFDOUIsT0FBT0EsTUFBTSxDQUFDaEQsSUFBUGdELEtBQWdCLFVBQXZCO0lBN09BLENBQUg7SUFnUENPLGNBQWMsRUFBRTNEO0VBaFBqQixFQUhEO0VBc1BBLE9BQU95QixNQUFQO0FBQ0QiLCJuYW1lcyI6WyJUWVBFX1JPVVRFIiwiVGFiQWN0aW9ucyIsImp1bXBUbyIsIm5hbWUiLCJwYXJhbXMiLCJ0eXBlIiwicGF5bG9hZCIsImdldFJvdXRlSGlzdG9yeSIsInJvdXRlcyIsImluZGV4IiwiYmFja0JlaGF2aW9yIiwiaW5pdGlhbFJvdXRlTmFtZSIsImhpc3RvcnkiLCJrZXkiLCJpbml0aWFsUm91dGVJbmRleCIsImkiLCJ1bnNoaWZ0IiwiZmluZEluZGV4Iiwicm91dGUiLCJjaGFuZ2VJbmRleCIsInN0YXRlIiwiY3VycmVudEtleSIsImZpbHRlciIsIml0IiwiY29uY2F0IiwiVGFiUm91dGVyIiwicm91dGVyIiwiQmFzZVJvdXRlciIsImdldEluaXRpYWxTdGF0ZSIsIl9yZWYyIiwicm91dGVOYW1lcyIsInJvdXRlUGFyYW1MaXN0IiwidW5kZWZpbmVkIiwiaW5jbHVkZXMiLCJpbmRleE9mIiwibWFwIiwic3RhbGUiLCJnZXRSZWh5ZHJhdGVkU3RhdGUiLCJwYXJ0aWFsU3RhdGUiLCJfcmVmMyIsImZpbmQiLCJyIiwiTWF0aCIsIm1pbiIsIm1heCIsIl9zdGF0ZSRyb3V0ZXMiLCJsZW5ndGgiLCJfc3RhdGUkaGlzdG9yeSIsImdldFN0YXRlRm9yUm91dGVOYW1lc0NoYW5nZSIsIl9yZWY0Iiwicm91dGVLZXlDaGFuZ2VzIiwiZ2V0U3RhdGVGb3JSb3V0ZUZvY3VzIiwiZ2V0U3RhdGVGb3JBY3Rpb24iLCJhY3Rpb24iLCJfcmVmNSIsIm1lcmdlIiwicGF0aCIsInByZXZpb3VzS2V5Iiwic2xpY2UiLCJzaG91bGRBY3Rpb25DaGFuZ2VGb2N1cyIsImFjdGlvbkNyZWF0b3JzIl0sInNvdXJjZXMiOlsiVGFiUm91dGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuYW5vaWQgfSBmcm9tICduYW5vaWQvbm9uLXNlY3VyZSc7XG5cbmltcG9ydCBCYXNlUm91dGVyIGZyb20gJy4vQmFzZVJvdXRlcic7XG5pbXBvcnQgdHlwZSB7XG4gIENvbW1vbk5hdmlnYXRpb25BY3Rpb24sXG4gIERlZmF1bHRSb3V0ZXJPcHRpb25zLFxuICBOYXZpZ2F0aW9uU3RhdGUsXG4gIFBhcmFtTGlzdEJhc2UsXG4gIFBhcnRpYWxTdGF0ZSxcbiAgUm91dGUsXG4gIFJvdXRlcixcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFRhYkFjdGlvblR5cGUgPSB7XG4gIHR5cGU6ICdKVU1QX1RPJztcbiAgcGF5bG9hZDogeyBuYW1lOiBzdHJpbmc7IHBhcmFtcz86IG9iamVjdCB9O1xuICBzb3VyY2U/OiBzdHJpbmc7XG4gIHRhcmdldD86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIEJhY2tCZWhhdmlvciA9XG4gIHwgJ2luaXRpYWxSb3V0ZSdcbiAgfCAnZmlyc3RSb3V0ZSdcbiAgfCAnaGlzdG9yeSdcbiAgfCAnb3JkZXInXG4gIHwgJ25vbmUnO1xuXG5leHBvcnQgdHlwZSBUYWJSb3V0ZXJPcHRpb25zID0gRGVmYXVsdFJvdXRlck9wdGlvbnMgJiB7XG4gIGJhY2tCZWhhdmlvcj86IEJhY2tCZWhhdmlvcjtcbn07XG5cbmV4cG9ydCB0eXBlIFRhYk5hdmlnYXRpb25TdGF0ZTxQYXJhbUxpc3QgZXh0ZW5kcyBQYXJhbUxpc3RCYXNlPiA9IE9taXQ8XG4gIE5hdmlnYXRpb25TdGF0ZTxQYXJhbUxpc3Q+LFxuICAnaGlzdG9yeSdcbj4gJiB7XG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSByb3V0ZXIsIGluIHRoaXMgY2FzZSwgaXQncyB0YWIuXG4gICAqL1xuICB0eXBlOiAndGFiJztcbiAgLyoqXG4gICAqIExpc3Qgb2YgcHJldmlvdXNseSB2aXNpdGVkIHJvdXRlIGtleXMuXG4gICAqL1xuICBoaXN0b3J5OiB7IHR5cGU6ICdyb3V0ZSc7IGtleTogc3RyaW5nIH1bXTtcbn07XG5cbmV4cG9ydCB0eXBlIFRhYkFjdGlvbkhlbHBlcnM8UGFyYW1MaXN0IGV4dGVuZHMgUGFyYW1MaXN0QmFzZT4gPSB7XG4gIC8qKlxuICAgKiBKdW1wIHRvIGFuIGV4aXN0aW5nIHRhYi5cbiAgICpcbiAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgcm91dGUgZm9yIHRoZSB0YWIuXG4gICAqIEBwYXJhbSBbcGFyYW1zXSBQYXJhbXMgb2JqZWN0IGZvciB0aGUgcm91dGUuXG4gICAqL1xuICBqdW1wVG88Um91dGVOYW1lIGV4dGVuZHMgRXh0cmFjdDxrZXlvZiBQYXJhbUxpc3QsIHN0cmluZz4+KFxuICAgIC4uLmFyZ3M6IHVuZGVmaW5lZCBleHRlbmRzIFBhcmFtTGlzdFtSb3V0ZU5hbWVdXG4gICAgICA/IFtzY3JlZW46IFJvdXRlTmFtZV0gfCBbc2NyZWVuOiBSb3V0ZU5hbWUsIHBhcmFtczogUGFyYW1MaXN0W1JvdXRlTmFtZV1dXG4gICAgICA6IFtzY3JlZW46IFJvdXRlTmFtZSwgcGFyYW1zOiBQYXJhbUxpc3RbUm91dGVOYW1lXV1cbiAgKTogdm9pZDtcbn07XG5cbmNvbnN0IFRZUEVfUk9VVEUgPSAncm91dGUnIGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgVGFiQWN0aW9ucyA9IHtcbiAganVtcFRvKG5hbWU6IHN0cmluZywgcGFyYW1zPzogb2JqZWN0KTogVGFiQWN0aW9uVHlwZSB7XG4gICAgcmV0dXJuIHsgdHlwZTogJ0pVTVBfVE8nLCBwYXlsb2FkOiB7IG5hbWUsIHBhcmFtcyB9IH07XG4gIH0sXG59O1xuXG5jb25zdCBnZXRSb3V0ZUhpc3RvcnkgPSAoXG4gIHJvdXRlczogUm91dGU8c3RyaW5nPltdLFxuICBpbmRleDogbnVtYmVyLFxuICBiYWNrQmVoYXZpb3I6IEJhY2tCZWhhdmlvcixcbiAgaW5pdGlhbFJvdXRlTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkXG4pID0+IHtcbiAgY29uc3QgaGlzdG9yeSA9IFt7IHR5cGU6IFRZUEVfUk9VVEUsIGtleTogcm91dGVzW2luZGV4XS5rZXkgfV07XG4gIGxldCBpbml0aWFsUm91dGVJbmRleDtcblxuICBzd2l0Y2ggKGJhY2tCZWhhdmlvcikge1xuICAgIGNhc2UgJ29yZGVyJzpcbiAgICAgIGZvciAobGV0IGkgPSBpbmRleDsgaSA+IDA7IGktLSkge1xuICAgICAgICBoaXN0b3J5LnVuc2hpZnQoeyB0eXBlOiBUWVBFX1JPVVRFLCBrZXk6IHJvdXRlc1tpIC0gMV0ua2V5IH0pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZmlyc3RSb3V0ZSc6XG4gICAgICBpZiAoaW5kZXggIT09IDApIHtcbiAgICAgICAgaGlzdG9yeS51bnNoaWZ0KHtcbiAgICAgICAgICB0eXBlOiBUWVBFX1JPVVRFLFxuICAgICAgICAgIGtleTogcm91dGVzWzBdLmtleSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbml0aWFsUm91dGUnOlxuICAgICAgaW5pdGlhbFJvdXRlSW5kZXggPSByb3V0ZXMuZmluZEluZGV4KFxuICAgICAgICAocm91dGUpID0+IHJvdXRlLm5hbWUgPT09IGluaXRpYWxSb3V0ZU5hbWVcbiAgICAgICk7XG4gICAgICBpbml0aWFsUm91dGVJbmRleCA9IGluaXRpYWxSb3V0ZUluZGV4ID09PSAtMSA/IDAgOiBpbml0aWFsUm91dGVJbmRleDtcblxuICAgICAgaWYgKGluZGV4ICE9PSBpbml0aWFsUm91dGVJbmRleCkge1xuICAgICAgICBoaXN0b3J5LnVuc2hpZnQoe1xuICAgICAgICAgIHR5cGU6IFRZUEVfUk9VVEUsXG4gICAgICAgICAga2V5OiByb3V0ZXNbaW5pdGlhbFJvdXRlSW5kZXhdLmtleSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdoaXN0b3J5JzpcbiAgICAgIC8vIFRoZSBoaXN0b3J5IHdpbGwgZmlsbCB1cCBvbiBuYXZpZ2F0aW9uXG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuY29uc3QgY2hhbmdlSW5kZXggPSAoXG4gIHN0YXRlOiBUYWJOYXZpZ2F0aW9uU3RhdGU8UGFyYW1MaXN0QmFzZT4sXG4gIGluZGV4OiBudW1iZXIsXG4gIGJhY2tCZWhhdmlvcjogQmFja0JlaGF2aW9yLFxuICBpbml0aWFsUm91dGVOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWRcbikgPT4ge1xuICBsZXQgaGlzdG9yeTtcblxuICBpZiAoYmFja0JlaGF2aW9yID09PSAnaGlzdG9yeScpIHtcbiAgICBjb25zdCBjdXJyZW50S2V5ID0gc3RhdGUucm91dGVzW2luZGV4XS5rZXk7XG5cbiAgICBoaXN0b3J5ID0gc3RhdGUuaGlzdG9yeVxuICAgICAgLmZpbHRlcigoaXQpID0+IChpdC50eXBlID09PSAncm91dGUnID8gaXQua2V5ICE9PSBjdXJyZW50S2V5IDogZmFsc2UpKVxuICAgICAgLmNvbmNhdCh7IHR5cGU6IFRZUEVfUk9VVEUsIGtleTogY3VycmVudEtleSB9KTtcbiAgfSBlbHNlIHtcbiAgICBoaXN0b3J5ID0gZ2V0Um91dGVIaXN0b3J5KFxuICAgICAgc3RhdGUucm91dGVzLFxuICAgICAgaW5kZXgsXG4gICAgICBiYWNrQmVoYXZpb3IsXG4gICAgICBpbml0aWFsUm91dGVOYW1lXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGUsXG4gICAgaW5kZXgsXG4gICAgaGlzdG9yeSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRhYlJvdXRlcih7XG4gIGluaXRpYWxSb3V0ZU5hbWUsXG4gIGJhY2tCZWhhdmlvciA9ICdmaXJzdFJvdXRlJyxcbn06IFRhYlJvdXRlck9wdGlvbnMpIHtcbiAgY29uc3Qgcm91dGVyOiBSb3V0ZXI8XG4gICAgVGFiTmF2aWdhdGlvblN0YXRlPFBhcmFtTGlzdEJhc2U+LFxuICAgIFRhYkFjdGlvblR5cGUgfCBDb21tb25OYXZpZ2F0aW9uQWN0aW9uXG4gID4gPSB7XG4gICAgLi4uQmFzZVJvdXRlcixcblxuICAgIHR5cGU6ICd0YWInLFxuXG4gICAgZ2V0SW5pdGlhbFN0YXRlKHsgcm91dGVOYW1lcywgcm91dGVQYXJhbUxpc3QgfSkge1xuICAgICAgY29uc3QgaW5kZXggPVxuICAgICAgICBpbml0aWFsUm91dGVOYW1lICE9PSB1bmRlZmluZWQgJiYgcm91dGVOYW1lcy5pbmNsdWRlcyhpbml0aWFsUm91dGVOYW1lKVxuICAgICAgICAgID8gcm91dGVOYW1lcy5pbmRleE9mKGluaXRpYWxSb3V0ZU5hbWUpXG4gICAgICAgICAgOiAwO1xuXG4gICAgICBjb25zdCByb3V0ZXMgPSByb3V0ZU5hbWVzLm1hcCgobmFtZSkgPT4gKHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAga2V5OiBgJHtuYW1lfS0ke25hbm9pZCgpfWAsXG4gICAgICAgIHBhcmFtczogcm91dGVQYXJhbUxpc3RbbmFtZV0sXG4gICAgICB9KSk7XG5cbiAgICAgIGNvbnN0IGhpc3RvcnkgPSBnZXRSb3V0ZUhpc3RvcnkoXG4gICAgICAgIHJvdXRlcyxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIGJhY2tCZWhhdmlvcixcbiAgICAgICAgaW5pdGlhbFJvdXRlTmFtZVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhbGU6IGZhbHNlLFxuICAgICAgICB0eXBlOiAndGFiJyxcbiAgICAgICAga2V5OiBgdGFiLSR7bmFub2lkKCl9YCxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHJvdXRlTmFtZXMsXG4gICAgICAgIGhpc3RvcnksXG4gICAgICAgIHJvdXRlcyxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGdldFJlaHlkcmF0ZWRTdGF0ZShwYXJ0aWFsU3RhdGUsIHsgcm91dGVOYW1lcywgcm91dGVQYXJhbUxpc3QgfSkge1xuICAgICAgbGV0IHN0YXRlID0gcGFydGlhbFN0YXRlO1xuXG4gICAgICBpZiAoc3RhdGUuc3RhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgcm91dGVzID0gcm91dGVOYW1lcy5tYXAoKG5hbWUpID0+IHtcbiAgICAgICAgY29uc3Qgcm91dGUgPSAoXG4gICAgICAgICAgc3RhdGUgYXMgUGFydGlhbFN0YXRlPFRhYk5hdmlnYXRpb25TdGF0ZTxQYXJhbUxpc3RCYXNlPj5cbiAgICAgICAgKS5yb3V0ZXMuZmluZCgocikgPT4gci5uYW1lID09PSBuYW1lKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLnJvdXRlLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAga2V5OlxuICAgICAgICAgICAgcm91dGUgJiYgcm91dGUubmFtZSA9PT0gbmFtZSAmJiByb3V0ZS5rZXlcbiAgICAgICAgICAgICAgPyByb3V0ZS5rZXlcbiAgICAgICAgICAgICAgOiBgJHtuYW1lfS0ke25hbm9pZCgpfWAsXG4gICAgICAgICAgcGFyYW1zOlxuICAgICAgICAgICAgcm91dGVQYXJhbUxpc3RbbmFtZV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIC4uLnJvdXRlUGFyYW1MaXN0W25hbWVdLFxuICAgICAgICAgICAgICAgICAgLi4uKHJvdXRlID8gcm91dGUucGFyYW1zIDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDogcm91dGVcbiAgICAgICAgICAgICAgPyByb3V0ZS5wYXJhbXNcbiAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIH0gYXMgUm91dGU8c3RyaW5nPjtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBpbmRleCA9IE1hdGgubWluKFxuICAgICAgICBNYXRoLm1heChyb3V0ZU5hbWVzLmluZGV4T2Yoc3RhdGUucm91dGVzW3N0YXRlPy5pbmRleCA/PyAwXT8ubmFtZSksIDApLFxuICAgICAgICByb3V0ZXMubGVuZ3RoIC0gMVxuICAgICAgKTtcblxuICAgICAgY29uc3QgaGlzdG9yeSA9XG4gICAgICAgIHN0YXRlLmhpc3Rvcnk/LmZpbHRlcigoaXQpID0+IHJvdXRlcy5maW5kKChyKSA9PiByLmtleSA9PT0gaXQua2V5KSkgPz9cbiAgICAgICAgW107XG5cbiAgICAgIHJldHVybiBjaGFuZ2VJbmRleChcbiAgICAgICAge1xuICAgICAgICAgIHN0YWxlOiBmYWxzZSxcbiAgICAgICAgICB0eXBlOiAndGFiJyxcbiAgICAgICAgICBrZXk6IGB0YWItJHtuYW5vaWQoKX1gLFxuICAgICAgICAgIGluZGV4LFxuICAgICAgICAgIHJvdXRlTmFtZXMsXG4gICAgICAgICAgaGlzdG9yeSxcbiAgICAgICAgICByb3V0ZXMsXG4gICAgICAgIH0sXG4gICAgICAgIGluZGV4LFxuICAgICAgICBiYWNrQmVoYXZpb3IsXG4gICAgICAgIGluaXRpYWxSb3V0ZU5hbWVcbiAgICAgICk7XG4gICAgfSxcblxuICAgIGdldFN0YXRlRm9yUm91dGVOYW1lc0NoYW5nZShcbiAgICAgIHN0YXRlLFxuICAgICAgeyByb3V0ZU5hbWVzLCByb3V0ZVBhcmFtTGlzdCwgcm91dGVLZXlDaGFuZ2VzIH1cbiAgICApIHtcbiAgICAgIGNvbnN0IHJvdXRlcyA9IHJvdXRlTmFtZXMubWFwKFxuICAgICAgICAobmFtZSkgPT5cbiAgICAgICAgICBzdGF0ZS5yb3V0ZXMuZmluZChcbiAgICAgICAgICAgIChyKSA9PiByLm5hbWUgPT09IG5hbWUgJiYgIXJvdXRlS2V5Q2hhbmdlcy5pbmNsdWRlcyhyLm5hbWUpXG4gICAgICAgICAgKSB8fCB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAga2V5OiBgJHtuYW1lfS0ke25hbm9pZCgpfWAsXG4gICAgICAgICAgICBwYXJhbXM6IHJvdXRlUGFyYW1MaXN0W25hbWVdLFxuICAgICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGluZGV4ID0gTWF0aC5tYXgoXG4gICAgICAgIDAsXG4gICAgICAgIHJvdXRlTmFtZXMuaW5kZXhPZihzdGF0ZS5yb3V0ZXNbc3RhdGUuaW5kZXhdLm5hbWUpXG4gICAgICApO1xuXG4gICAgICBsZXQgaGlzdG9yeSA9IHN0YXRlLmhpc3RvcnkuZmlsdGVyKFxuICAgICAgICAvLyBUeXBlIHdpbGwgYWx3YXlzIGJlICdyb3V0ZScgZm9yIHRhYnMsIGJ1dCBjb3VsZCBiZSBkaWZmZXJlbnQgaW4gYSByb3V0ZXIgZXh0ZW5kaW5nIHRoaXMgKGUuZy4gZHJhd2VyKVxuICAgICAgICAoaXQpID0+IGl0LnR5cGUgIT09ICdyb3V0ZScgfHwgcm91dGVzLmZpbmQoKHIpID0+IHIua2V5ID09PSBpdC5rZXkpXG4gICAgICApO1xuXG4gICAgICBpZiAoIWhpc3RvcnkubGVuZ3RoKSB7XG4gICAgICAgIGhpc3RvcnkgPSBnZXRSb3V0ZUhpc3RvcnkoXG4gICAgICAgICAgcm91dGVzLFxuICAgICAgICAgIGluZGV4LFxuICAgICAgICAgIGJhY2tCZWhhdmlvcixcbiAgICAgICAgICBpbml0aWFsUm91dGVOYW1lXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBoaXN0b3J5LFxuICAgICAgICByb3V0ZU5hbWVzLFxuICAgICAgICByb3V0ZXMsXG4gICAgICAgIGluZGV4LFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgZ2V0U3RhdGVGb3JSb3V0ZUZvY3VzKHN0YXRlLCBrZXkpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gc3RhdGUucm91dGVzLmZpbmRJbmRleCgocikgPT4gci5rZXkgPT09IGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA9PT0gLTEgfHwgaW5kZXggPT09IHN0YXRlLmluZGV4KSB7XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoYW5nZUluZGV4KHN0YXRlLCBpbmRleCwgYmFja0JlaGF2aW9yLCBpbml0aWFsUm91dGVOYW1lKTtcbiAgICB9LFxuXG4gICAgZ2V0U3RhdGVGb3JBY3Rpb24oc3RhdGUsIGFjdGlvbiwgeyByb3V0ZVBhcmFtTGlzdCB9KSB7XG4gICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ0pVTVBfVE8nOlxuICAgICAgICBjYXNlICdOQVZJR0FURSc6IHtcbiAgICAgICAgICBsZXQgaW5kZXggPSAtMTtcblxuICAgICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ05BVklHQVRFJyAmJiBhY3Rpb24ucGF5bG9hZC5rZXkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gc3RhdGUucm91dGVzLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgKHJvdXRlKSA9PiByb3V0ZS5rZXkgPT09IGFjdGlvbi5wYXlsb2FkLmtleVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSBzdGF0ZS5yb3V0ZXMuZmluZEluZGV4KFxuICAgICAgICAgICAgICAocm91dGUpID0+IHJvdXRlLm5hbWUgPT09IGFjdGlvbi5wYXlsb2FkLm5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGNoYW5nZUluZGV4KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgICAgcm91dGVzOiBzdGF0ZS5yb3V0ZXMubWFwKChyb3V0ZSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpICE9PSBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdXRlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBwYXJhbXM7XG5cbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdOQVZJR0FURScgJiYgYWN0aW9uLnBheWxvYWQubWVyZ2UpIHtcbiAgICAgICAgICAgICAgICAgIHBhcmFtcyA9XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLnBhcmFtcyAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlUGFyYW1MaXN0W3JvdXRlLm5hbWVdICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ucm91dGVQYXJhbUxpc3Rbcm91dGUubmFtZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYWN0aW9uLnBheWxvYWQucGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIDogcm91dGUucGFyYW1zO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwYXJhbXMgPVxuICAgICAgICAgICAgICAgICAgICByb3V0ZVBhcmFtTGlzdFtyb3V0ZS5uYW1lXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlUGFyYW1MaXN0W3JvdXRlLm5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOiBhY3Rpb24ucGF5bG9hZC5wYXJhbXM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9XG4gICAgICAgICAgICAgICAgICBhY3Rpb24udHlwZSA9PT0gJ05BVklHQVRFJyAmJiBhY3Rpb24ucGF5bG9hZC5wYXRoICE9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgPyBhY3Rpb24ucGF5bG9hZC5wYXRoXG4gICAgICAgICAgICAgICAgICAgIDogcm91dGUucGF0aDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbXMgIT09IHJvdXRlLnBhcmFtcyB8fCBwYXRoICE9PSByb3V0ZS5wYXRoXG4gICAgICAgICAgICAgICAgICA/IHsgLi4ucm91dGUsIHBhdGgsIHBhcmFtcyB9XG4gICAgICAgICAgICAgICAgICA6IHJvdXRlO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIGJhY2tCZWhhdmlvcixcbiAgICAgICAgICAgIGluaXRpYWxSb3V0ZU5hbWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAnR09fQkFDSyc6IHtcbiAgICAgICAgICBpZiAoc3RhdGUuaGlzdG9yeS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHByZXZpb3VzS2V5ID0gc3RhdGUuaGlzdG9yeVtzdGF0ZS5oaXN0b3J5Lmxlbmd0aCAtIDJdLmtleTtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IHN0YXRlLnJvdXRlcy5maW5kSW5kZXgoXG4gICAgICAgICAgICAocm91dGUpID0+IHJvdXRlLmtleSA9PT0gcHJldmlvdXNLZXlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgaGlzdG9yeTogc3RhdGUuaGlzdG9yeS5zbGljZSgwLCAtMSksXG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gQmFzZVJvdXRlci5nZXRTdGF0ZUZvckFjdGlvbihzdGF0ZSwgYWN0aW9uKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2hvdWxkQWN0aW9uQ2hhbmdlRm9jdXMoYWN0aW9uKSB7XG4gICAgICByZXR1cm4gYWN0aW9uLnR5cGUgPT09ICdOQVZJR0FURSc7XG4gICAgfSxcblxuICAgIGFjdGlvbkNyZWF0b3JzOiBUYWJBY3Rpb25zLFxuICB9O1xuXG4gIHJldHVybiByb3V0ZXI7XG59XG4iXX0=