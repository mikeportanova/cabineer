2b11a01f2a300b75356109db26d73fe1
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StackActions = void 0;
exports.default = StackRouter;

var _nonSecure = require("nanoid/non-secure");

var _BaseRouter = _interopRequireDefault(require("./BaseRouter"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var StackActions = {
  replace: function replace(name, params) {
    return {
      type: 'REPLACE',
      payload: {
        name: name,
        params: params
      }
    };
  },
  push: function push(name, params) {
    return {
      type: 'PUSH',
      payload: {
        name: name,
        params: params
      }
    };
  },
  pop: function pop() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return {
      type: 'POP',
      payload: {
        count: count
      }
    };
  },
  popToTop: function popToTop() {
    return {
      type: 'POP_TO_TOP'
    };
  }
};
exports.StackActions = StackActions;

function StackRouter(options) {
  var router = Object.assign({}, _BaseRouter.default, {
    type: 'stack',
    getInitialState: function getInitialState(_ref) {
      var routeNames = _ref.routeNames,
          routeParamList = _ref.routeParamList;
      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
      return {
        stale: false,
        type: 'stack',
        key: "stack-" + (0, _nonSecure.nanoid)(),
        index: 0,
        routeNames: routeNames,
        routes: [{
          key: initialRouteName + "-" + (0, _nonSecure.nanoid)(),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        }]
      };
    },
    getRehydratedState: function getRehydratedState(partialState, _ref2) {
      var routeNames = _ref2.routeNames,
          routeParamList = _ref2.routeParamList;
      var state = partialState;

      if (state.stale === false) {
        return state;
      }

      var routes = state.routes.filter(function (route) {
        return routeNames.includes(route.name);
      }).map(function (route) {
        return Object.assign({}, route, {
          key: route.key || route.name + "-" + (0, _nonSecure.nanoid)(),
          params: routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params) : route.params
        });
      });

      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];
        routes.push({
          key: initialRouteName + "-" + (0, _nonSecure.nanoid)(),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }

      return {
        stale: false,
        type: 'stack',
        key: "stack-" + (0, _nonSecure.nanoid)(),
        index: routes.length - 1,
        routeNames: routeNames,
        routes: routes
      };
    },
    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {
      var routeNames = _ref3.routeNames,
          routeParamList = _ref3.routeParamList,
          routeKeyChanges = _ref3.routeKeyChanges;
      var routes = state.routes.filter(function (route) {
        return routeNames.includes(route.name) && !routeKeyChanges.includes(route.name);
      });

      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
        routes.push({
          key: initialRouteName + "-" + (0, _nonSecure.nanoid)(),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }

      return Object.assign({}, state, {
        routeNames: routeNames,
        routes: routes,
        index: Math.min(state.index, routes.length - 1)
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {
        return r.key === key;
      });

      if (index === -1 || index === state.index) {
        return state;
      }

      return Object.assign({}, state, {
        index: index,
        routes: state.routes.slice(0, index + 1)
      });
    },
    getStateForAction: function getStateForAction(state, action, options) {
      var routeParamList = options.routeParamList;

      switch (action.type) {
        case 'REPLACE':
          {
            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {
              return r.key === action.source;
            }) : state.index;

            if (index === -1) {
              return null;
            }

            var _action$payload = action.payload,
                name = _action$payload.name,
                key = _action$payload.key,
                params = _action$payload.params;

            if (!state.routeNames.includes(name)) {
              return null;
            }

            return Object.assign({}, state, {
              routes: state.routes.map(function (route, i) {
                return i === index ? {
                  key: key !== undefined ? key : name + "-" + (0, _nonSecure.nanoid)(),
                  name: name,
                  params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], params) : params
                } : route;
              })
            });
          }

        case 'PUSH':
          if (state.routeNames.includes(action.payload.name)) {
            var getId = options.routeGetIdList[action.payload.name];
            var id = getId === null || getId === void 0 ? void 0 : getId({
              params: action.payload.params
            });
            var route = id ? state.routes.find(function (route) {
              return route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({
                params: route.params
              }));
            }) : undefined;
            var routes;

            if (route) {
              routes = state.routes.filter(function (r) {
                return r.key !== route.key;
              });
              routes.push(Object.assign({}, route, {
                params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
              }));
            } else {
              routes = [].concat((0, _toConsumableArray2.default)(state.routes), [{
                key: action.payload.name + "-" + (0, _nonSecure.nanoid)(),
                name: action.payload.name,
                params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
              }]);
            }

            return Object.assign({}, state, {
              index: routes.length - 1,
              routes: routes
            });
          }

          return null;

        case 'POP':
          {
            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {
              return r.key === action.source;
            }) : state.index;

            if (_index > 0) {
              var count = Math.max(_index - action.payload.count + 1, 1);

              var _routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));

              return Object.assign({}, state, {
                index: _routes.length - 1,
                routes: _routes
              });
            }

            return null;
          }

        case 'POP_TO_TOP':
          return router.getStateForAction(state, {
            type: 'POP',
            payload: {
              count: state.routes.length - 1
            }
          }, options);

        case 'NAVIGATE':
          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {
            return null;
          }

          if (action.payload.key || action.payload.name) {
            var _action$payload$path;

            var _index2 = -1;

            var _getId = action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;

            var _id = _getId === null || _getId === void 0 ? void 0 : _getId({
              params: action.payload.params
            });

            if (_id) {
              _index2 = state.routes.findIndex(function (route) {
                return route.name === action.payload.name && _id === (_getId === null || _getId === void 0 ? void 0 : _getId({
                  params: route.params
                }));
              });
            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {
              _index2 = state.index;
            } else {
              for (var i = state.routes.length - 1; i >= 0; i--) {
                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {
                  _index2 = i;
                  break;
                }
              }
            }

            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {
              return null;
            }

            if (_index2 === -1 && action.payload.name !== undefined) {
              var _action$payload$key;

              var _routes2 = [].concat((0, _toConsumableArray2.default)(state.routes), [{
                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : action.payload.name + "-" + (0, _nonSecure.nanoid)(),
                name: action.payload.name,
                path: action.payload.path,
                params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
              }]);

              return Object.assign({}, state, {
                routes: _routes2,
                index: _routes2.length - 1
              });
            }

            var _route = state.routes[_index2];

            var _params;

            if (action.payload.merge) {
              _params = action.payload.params !== undefined || routeParamList[_route.name] !== undefined ? Object.assign({}, routeParamList[_route.name], _route.params, action.payload.params) : _route.params;
            } else {
              _params = routeParamList[_route.name] !== undefined ? Object.assign({}, routeParamList[_route.name], action.payload.params) : action.payload.params;
            }

            return Object.assign({}, state, {
              index: _index2,
              routes: [].concat((0, _toConsumableArray2.default)(state.routes.slice(0, _index2)), [_params !== _route.params || action.payload.path && action.payload.path !== _route.path ? Object.assign({}, _route, {
                path: (_action$payload$path = action.payload.path) !== null && _action$payload$path !== void 0 ? _action$payload$path : _route.path,
                params: _params
              }) : state.routes[_index2]])
            });
          }

          return null;

        case 'GO_BACK':
          if (state.index > 0) {
            return router.getStateForAction(state, {
              type: 'POP',
              payload: {
                count: 1
              },
              target: action.target,
              source: action.source
            }, options);
          }

          return null;

        default:
          return _BaseRouter.default.getStateForAction(state, action);
      }
    },
    actionCreators: StackActions
  });
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VUQ7O1VBRUQsT0FBTyxJQUFQOztRQUVGO1VBQ0UsT0FBT0Msb0JBQVc2QixpQkFBWDdCLENBQTZCZSxLQUE3QmYsRUFBb0M4QixNQUFwQzlCLENBQVA7TUFwUUo7SUE1SEEsQ0FBSDtJQW9ZQzBDLGNBQWMsRUFBRXZEO0VBcFlqQixFQUhEO0VBMFlBLE9BQU9ZLE1BQVA7QUFDRCIsIm5hbWVzIjpbIlN0YWNrQWN0aW9ucyIsInJlcGxhY2UiLCJuYW1lIiwicGFyYW1zIiwidHlwZSIsInBheWxvYWQiLCJwdXNoIiwicG9wIiwiY291bnQiLCJwb3BUb1RvcCIsIlN0YWNrUm91dGVyIiwib3B0aW9ucyIsInJvdXRlciIsIkJhc2VSb3V0ZXIiLCJnZXRJbml0aWFsU3RhdGUiLCJfcmVmIiwicm91dGVOYW1lcyIsInJvdXRlUGFyYW1MaXN0IiwiaW5pdGlhbFJvdXRlTmFtZSIsInVuZGVmaW5lZCIsImluY2x1ZGVzIiwic3RhbGUiLCJrZXkiLCJpbmRleCIsInJvdXRlcyIsImdldFJlaHlkcmF0ZWRTdGF0ZSIsInBhcnRpYWxTdGF0ZSIsIl9yZWYyIiwic3RhdGUiLCJmaWx0ZXIiLCJyb3V0ZSIsIm1hcCIsImxlbmd0aCIsImdldFN0YXRlRm9yUm91dGVOYW1lc0NoYW5nZSIsIl9yZWYzIiwicm91dGVLZXlDaGFuZ2VzIiwiTWF0aCIsIm1pbiIsImdldFN0YXRlRm9yUm91dGVGb2N1cyIsImZpbmRJbmRleCIsInIiLCJzbGljZSIsImdldFN0YXRlRm9yQWN0aW9uIiwiYWN0aW9uIiwidGFyZ2V0Iiwic291cmNlIiwiaSIsImdldElkIiwicm91dGVHZXRJZExpc3QiLCJpZCIsImZpbmQiLCJtYXgiLCJjb25jYXQiLCJwYXRoIiwibWVyZ2UiLCJhY3Rpb25DcmVhdG9ycyJdLCJzb3VyY2VzIjpbIlN0YWNrUm91dGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuYW5vaWQgfSBmcm9tICduYW5vaWQvbm9uLXNlY3VyZSc7XG5cbmltcG9ydCBCYXNlUm91dGVyIGZyb20gJy4vQmFzZVJvdXRlcic7XG5pbXBvcnQgdHlwZSB7XG4gIENvbW1vbk5hdmlnYXRpb25BY3Rpb24sXG4gIERlZmF1bHRSb3V0ZXJPcHRpb25zLFxuICBOYXZpZ2F0aW9uU3RhdGUsXG4gIFBhcmFtTGlzdEJhc2UsXG4gIFJvdXRlLFxuICBSb3V0ZXIsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBTdGFja0FjdGlvblR5cGUgPVxuICB8IHtcbiAgICAgIHR5cGU6ICdSRVBMQUNFJztcbiAgICAgIHBheWxvYWQ6IHsgbmFtZTogc3RyaW5nOyBrZXk/OiBzdHJpbmcgfCB1bmRlZmluZWQ7IHBhcmFtcz86IG9iamVjdCB9O1xuICAgICAgc291cmNlPzogc3RyaW5nO1xuICAgICAgdGFyZ2V0Pzogc3RyaW5nO1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiAnUFVTSCc7XG4gICAgICBwYXlsb2FkOiB7IG5hbWU6IHN0cmluZzsgcGFyYW1zPzogb2JqZWN0IH07XG4gICAgICBzb3VyY2U/OiBzdHJpbmc7XG4gICAgICB0YXJnZXQ/OiBzdHJpbmc7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6ICdQT1AnO1xuICAgICAgcGF5bG9hZDogeyBjb3VudDogbnVtYmVyIH07XG4gICAgICBzb3VyY2U/OiBzdHJpbmc7XG4gICAgICB0YXJnZXQ/OiBzdHJpbmc7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6ICdQT1BfVE9fVE9QJztcbiAgICAgIHNvdXJjZT86IHN0cmluZztcbiAgICAgIHRhcmdldD86IHN0cmluZztcbiAgICB9O1xuXG5leHBvcnQgdHlwZSBTdGFja1JvdXRlck9wdGlvbnMgPSBEZWZhdWx0Um91dGVyT3B0aW9ucztcblxuZXhwb3J0IHR5cGUgU3RhY2tOYXZpZ2F0aW9uU3RhdGU8UGFyYW1MaXN0IGV4dGVuZHMgUGFyYW1MaXN0QmFzZT4gPVxuICBOYXZpZ2F0aW9uU3RhdGU8UGFyYW1MaXN0PiAmIHtcbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIHRoZSByb3V0ZXIsIGluIHRoaXMgY2FzZSwgaXQncyBzdGFjay5cbiAgICAgKi9cbiAgICB0eXBlOiAnc3RhY2snO1xuICB9O1xuXG5leHBvcnQgdHlwZSBTdGFja0FjdGlvbkhlbHBlcnM8UGFyYW1MaXN0IGV4dGVuZHMgUGFyYW1MaXN0QmFzZT4gPSB7XG4gIC8qKlxuICAgKiBSZXBsYWNlIHRoZSBjdXJyZW50IHJvdXRlIHdpdGggYSBuZXcgb25lLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBSb3V0ZSBuYW1lIG9mIHRoZSBuZXcgcm91dGUuXG4gICAqIEBwYXJhbSBbcGFyYW1zXSBQYXJhbXMgb2JqZWN0IGZvciB0aGUgbmV3IHJvdXRlLlxuICAgKi9cbiAgcmVwbGFjZTxSb3V0ZU5hbWUgZXh0ZW5kcyBrZXlvZiBQYXJhbUxpc3Q+KFxuICAgIC4uLmFyZ3M6IHVuZGVmaW5lZCBleHRlbmRzIFBhcmFtTGlzdFtSb3V0ZU5hbWVdXG4gICAgICA/IFtzY3JlZW46IFJvdXRlTmFtZV0gfCBbc2NyZWVuOiBSb3V0ZU5hbWUsIHBhcmFtczogUGFyYW1MaXN0W1JvdXRlTmFtZV1dXG4gICAgICA6IFtzY3JlZW46IFJvdXRlTmFtZSwgcGFyYW1zOiBQYXJhbUxpc3RbUm91dGVOYW1lXV1cbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogUHVzaCBhIG5ldyBzY3JlZW4gb250byB0aGUgc3RhY2suXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHJvdXRlIGZvciB0aGUgdGFiLlxuICAgKiBAcGFyYW0gW3BhcmFtc10gUGFyYW1zIG9iamVjdCBmb3IgdGhlIHJvdXRlLlxuICAgKi9cbiAgcHVzaDxSb3V0ZU5hbWUgZXh0ZW5kcyBrZXlvZiBQYXJhbUxpc3Q+KFxuICAgIC4uLmFyZ3M6IHVuZGVmaW5lZCBleHRlbmRzIFBhcmFtTGlzdFtSb3V0ZU5hbWVdXG4gICAgICA/IFtzY3JlZW46IFJvdXRlTmFtZV0gfCBbc2NyZWVuOiBSb3V0ZU5hbWUsIHBhcmFtczogUGFyYW1MaXN0W1JvdXRlTmFtZV1dXG4gICAgICA6IFtzY3JlZW46IFJvdXRlTmFtZSwgcGFyYW1zOiBQYXJhbUxpc3RbUm91dGVOYW1lXV1cbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogUG9wIGEgc2NyZWVuIGZyb20gdGhlIHN0YWNrLlxuICAgKi9cbiAgcG9wKGNvdW50PzogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogUG9wIHRvIHRoZSBmaXJzdCByb3V0ZSBpbiB0aGUgc3RhY2ssIGRpc21pc3NpbmcgYWxsIG90aGVyIHNjcmVlbnMuXG4gICAqL1xuICBwb3BUb1RvcCgpOiB2b2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IFN0YWNrQWN0aW9ucyA9IHtcbiAgcmVwbGFjZShuYW1lOiBzdHJpbmcsIHBhcmFtcz86IG9iamVjdCk6IFN0YWNrQWN0aW9uVHlwZSB7XG4gICAgcmV0dXJuIHsgdHlwZTogJ1JFUExBQ0UnLCBwYXlsb2FkOiB7IG5hbWUsIHBhcmFtcyB9IH07XG4gIH0sXG4gIHB1c2gobmFtZTogc3RyaW5nLCBwYXJhbXM/OiBvYmplY3QpOiBTdGFja0FjdGlvblR5cGUge1xuICAgIHJldHVybiB7IHR5cGU6ICdQVVNIJywgcGF5bG9hZDogeyBuYW1lLCBwYXJhbXMgfSB9O1xuICB9LFxuICBwb3AoY291bnQ6IG51bWJlciA9IDEpOiBTdGFja0FjdGlvblR5cGUge1xuICAgIHJldHVybiB7IHR5cGU6ICdQT1AnLCBwYXlsb2FkOiB7IGNvdW50IH0gfTtcbiAgfSxcbiAgcG9wVG9Ub3AoKTogU3RhY2tBY3Rpb25UeXBlIHtcbiAgICByZXR1cm4geyB0eXBlOiAnUE9QX1RPX1RPUCcgfTtcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0YWNrUm91dGVyKG9wdGlvbnM6IFN0YWNrUm91dGVyT3B0aW9ucykge1xuICBjb25zdCByb3V0ZXI6IFJvdXRlcjxcbiAgICBTdGFja05hdmlnYXRpb25TdGF0ZTxQYXJhbUxpc3RCYXNlPixcbiAgICBDb21tb25OYXZpZ2F0aW9uQWN0aW9uIHwgU3RhY2tBY3Rpb25UeXBlXG4gID4gPSB7XG4gICAgLi4uQmFzZVJvdXRlcixcblxuICAgIHR5cGU6ICdzdGFjaycsXG5cbiAgICBnZXRJbml0aWFsU3RhdGUoeyByb3V0ZU5hbWVzLCByb3V0ZVBhcmFtTGlzdCB9KSB7XG4gICAgICBjb25zdCBpbml0aWFsUm91dGVOYW1lID1cbiAgICAgICAgb3B0aW9ucy5pbml0aWFsUm91dGVOYW1lICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgcm91dGVOYW1lcy5pbmNsdWRlcyhvcHRpb25zLmluaXRpYWxSb3V0ZU5hbWUpXG4gICAgICAgICAgPyBvcHRpb25zLmluaXRpYWxSb3V0ZU5hbWVcbiAgICAgICAgICA6IHJvdXRlTmFtZXNbMF07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YWxlOiBmYWxzZSxcbiAgICAgICAgdHlwZTogJ3N0YWNrJyxcbiAgICAgICAga2V5OiBgc3RhY2stJHtuYW5vaWQoKX1gLFxuICAgICAgICBpbmRleDogMCxcbiAgICAgICAgcm91dGVOYW1lcyxcbiAgICAgICAgcm91dGVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAga2V5OiBgJHtpbml0aWFsUm91dGVOYW1lfS0ke25hbm9pZCgpfWAsXG4gICAgICAgICAgICBuYW1lOiBpbml0aWFsUm91dGVOYW1lLFxuICAgICAgICAgICAgcGFyYW1zOiByb3V0ZVBhcmFtTGlzdFtpbml0aWFsUm91dGVOYW1lXSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgZ2V0UmVoeWRyYXRlZFN0YXRlKHBhcnRpYWxTdGF0ZSwgeyByb3V0ZU5hbWVzLCByb3V0ZVBhcmFtTGlzdCB9KSB7XG4gICAgICBsZXQgc3RhdGUgPSBwYXJ0aWFsU3RhdGU7XG5cbiAgICAgIGlmIChzdGF0ZS5zdGFsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByb3V0ZXMgPSBzdGF0ZS5yb3V0ZXNcbiAgICAgICAgLmZpbHRlcigocm91dGUpID0+IHJvdXRlTmFtZXMuaW5jbHVkZXMocm91dGUubmFtZSkpXG4gICAgICAgIC5tYXAoXG4gICAgICAgICAgKHJvdXRlKSA9PlxuICAgICAgICAgICAgKHtcbiAgICAgICAgICAgICAgLi4ucm91dGUsXG4gICAgICAgICAgICAgIGtleTogcm91dGUua2V5IHx8IGAke3JvdXRlLm5hbWV9LSR7bmFub2lkKCl9YCxcbiAgICAgICAgICAgICAgcGFyYW1zOlxuICAgICAgICAgICAgICAgIHJvdXRlUGFyYW1MaXN0W3JvdXRlLm5hbWVdICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlUGFyYW1MaXN0W3JvdXRlLm5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgOiByb3V0ZS5wYXJhbXMsXG4gICAgICAgICAgICB9IGFzIFJvdXRlPHN0cmluZz4pXG4gICAgICAgICk7XG5cbiAgICAgIGlmIChyb3V0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxSb3V0ZU5hbWUgPVxuICAgICAgICAgIG9wdGlvbnMuaW5pdGlhbFJvdXRlTmFtZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG9wdGlvbnMuaW5pdGlhbFJvdXRlTmFtZVxuICAgICAgICAgICAgOiByb3V0ZU5hbWVzWzBdO1xuXG4gICAgICAgIHJvdXRlcy5wdXNoKHtcbiAgICAgICAgICBrZXk6IGAke2luaXRpYWxSb3V0ZU5hbWV9LSR7bmFub2lkKCl9YCxcbiAgICAgICAgICBuYW1lOiBpbml0aWFsUm91dGVOYW1lLFxuICAgICAgICAgIHBhcmFtczogcm91dGVQYXJhbUxpc3RbaW5pdGlhbFJvdXRlTmFtZV0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFsZTogZmFsc2UsXG4gICAgICAgIHR5cGU6ICdzdGFjaycsXG4gICAgICAgIGtleTogYHN0YWNrLSR7bmFub2lkKCl9YCxcbiAgICAgICAgaW5kZXg6IHJvdXRlcy5sZW5ndGggLSAxLFxuICAgICAgICByb3V0ZU5hbWVzLFxuICAgICAgICByb3V0ZXMsXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBnZXRTdGF0ZUZvclJvdXRlTmFtZXNDaGFuZ2UoXG4gICAgICBzdGF0ZSxcbiAgICAgIHsgcm91dGVOYW1lcywgcm91dGVQYXJhbUxpc3QsIHJvdXRlS2V5Q2hhbmdlcyB9XG4gICAgKSB7XG4gICAgICBjb25zdCByb3V0ZXMgPSBzdGF0ZS5yb3V0ZXMuZmlsdGVyKFxuICAgICAgICAocm91dGUpID0+XG4gICAgICAgICAgcm91dGVOYW1lcy5pbmNsdWRlcyhyb3V0ZS5uYW1lKSAmJlxuICAgICAgICAgICFyb3V0ZUtleUNoYW5nZXMuaW5jbHVkZXMocm91dGUubmFtZSlcbiAgICAgICk7XG5cbiAgICAgIGlmIChyb3V0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxSb3V0ZU5hbWUgPVxuICAgICAgICAgIG9wdGlvbnMuaW5pdGlhbFJvdXRlTmFtZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgcm91dGVOYW1lcy5pbmNsdWRlcyhvcHRpb25zLmluaXRpYWxSb3V0ZU5hbWUpXG4gICAgICAgICAgICA/IG9wdGlvbnMuaW5pdGlhbFJvdXRlTmFtZVxuICAgICAgICAgICAgOiByb3V0ZU5hbWVzWzBdO1xuXG4gICAgICAgIHJvdXRlcy5wdXNoKHtcbiAgICAgICAgICBrZXk6IGAke2luaXRpYWxSb3V0ZU5hbWV9LSR7bmFub2lkKCl9YCxcbiAgICAgICAgICBuYW1lOiBpbml0aWFsUm91dGVOYW1lLFxuICAgICAgICAgIHBhcmFtczogcm91dGVQYXJhbUxpc3RbaW5pdGlhbFJvdXRlTmFtZV0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgcm91dGVOYW1lcyxcbiAgICAgICAgcm91dGVzLFxuICAgICAgICBpbmRleDogTWF0aC5taW4oc3RhdGUuaW5kZXgsIHJvdXRlcy5sZW5ndGggLSAxKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGdldFN0YXRlRm9yUm91dGVGb2N1cyhzdGF0ZSwga2V5KSB7XG4gICAgICBjb25zdCBpbmRleCA9IHN0YXRlLnJvdXRlcy5maW5kSW5kZXgoKHIpID0+IHIua2V5ID09PSBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPT09IC0xIHx8IGluZGV4ID09PSBzdGF0ZS5pbmRleCkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgcm91dGVzOiBzdGF0ZS5yb3V0ZXMuc2xpY2UoMCwgaW5kZXggKyAxKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGdldFN0YXRlRm9yQWN0aW9uKHN0YXRlLCBhY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IHsgcm91dGVQYXJhbUxpc3QgfSA9IG9wdGlvbnM7XG5cbiAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnUkVQTEFDRSc6IHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9XG4gICAgICAgICAgICBhY3Rpb24udGFyZ2V0ID09PSBzdGF0ZS5rZXkgJiYgYWN0aW9uLnNvdXJjZVxuICAgICAgICAgICAgICA/IHN0YXRlLnJvdXRlcy5maW5kSW5kZXgoKHIpID0+IHIua2V5ID09PSBhY3Rpb24uc291cmNlKVxuICAgICAgICAgICAgICA6IHN0YXRlLmluZGV4O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgeyBuYW1lLCBrZXksIHBhcmFtcyB9ID0gYWN0aW9uLnBheWxvYWQ7XG5cbiAgICAgICAgICBpZiAoIXN0YXRlLnJvdXRlTmFtZXMuaW5jbHVkZXMobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgIHJvdXRlczogc3RhdGUucm91dGVzLm1hcCgocm91dGUsIGkpID0+XG4gICAgICAgICAgICAgIGkgPT09IGluZGV4XG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5ICE9PSB1bmRlZmluZWQgPyBrZXkgOiBgJHtuYW1lfS0ke25hbm9pZCgpfWAsXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczpcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZVBhcmFtTGlzdFtuYW1lXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5yb3V0ZVBhcmFtTGlzdFtuYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogcGFyYW1zLFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogcm91dGVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgJ1BVU0gnOlxuICAgICAgICAgIGlmIChzdGF0ZS5yb3V0ZU5hbWVzLmluY2x1ZGVzKGFjdGlvbi5wYXlsb2FkLm5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBnZXRJZCA9IG9wdGlvbnMucm91dGVHZXRJZExpc3RbYWN0aW9uLnBheWxvYWQubmFtZV07XG4gICAgICAgICAgICBjb25zdCBpZCA9IGdldElkPy4oeyBwYXJhbXM6IGFjdGlvbi5wYXlsb2FkLnBhcmFtcyB9KTtcblxuICAgICAgICAgICAgY29uc3Qgcm91dGUgPSBpZFxuICAgICAgICAgICAgICA/IHN0YXRlLnJvdXRlcy5maW5kKFxuICAgICAgICAgICAgICAgICAgKHJvdXRlKSA9PlxuICAgICAgICAgICAgICAgICAgICByb3V0ZS5uYW1lID09PSBhY3Rpb24ucGF5bG9hZC5uYW1lICYmXG4gICAgICAgICAgICAgICAgICAgIGlkID09PSBnZXRJZD8uKHsgcGFyYW1zOiByb3V0ZS5wYXJhbXMgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBsZXQgcm91dGVzOiBSb3V0ZTxzdHJpbmc+W107XG5cbiAgICAgICAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICAgICAgICByb3V0ZXMgPSBzdGF0ZS5yb3V0ZXMuZmlsdGVyKChyKSA9PiByLmtleSAhPT0gcm91dGUua2V5KTtcbiAgICAgICAgICAgICAgcm91dGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIC4uLnJvdXRlLFxuICAgICAgICAgICAgICAgIHBhcmFtczpcbiAgICAgICAgICAgICAgICAgIHJvdXRlUGFyYW1MaXN0W2FjdGlvbi5wYXlsb2FkLm5hbWVdICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5yb3V0ZVBhcmFtTGlzdFthY3Rpb24ucGF5bG9hZC5uYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmFjdGlvbi5wYXlsb2FkLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogYWN0aW9uLnBheWxvYWQucGFyYW1zLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJvdXRlcyA9IFtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZS5yb3V0ZXMsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAga2V5OiBgJHthY3Rpb24ucGF5bG9hZC5uYW1lfS0ke25hbm9pZCgpfWAsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBhY3Rpb24ucGF5bG9hZC5uYW1lLFxuICAgICAgICAgICAgICAgICAgcGFyYW1zOlxuICAgICAgICAgICAgICAgICAgICByb3V0ZVBhcmFtTGlzdFthY3Rpb24ucGF5bG9hZC5uYW1lXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlUGFyYW1MaXN0W2FjdGlvbi5wYXlsb2FkLm5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOiBhY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgIGluZGV4OiByb3V0ZXMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgICAgcm91dGVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICBjYXNlICdQT1AnOiB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPVxuICAgICAgICAgICAgYWN0aW9uLnRhcmdldCA9PT0gc3RhdGUua2V5ICYmIGFjdGlvbi5zb3VyY2VcbiAgICAgICAgICAgICAgPyBzdGF0ZS5yb3V0ZXMuZmluZEluZGV4KChyKSA9PiByLmtleSA9PT0gYWN0aW9uLnNvdXJjZSlcbiAgICAgICAgICAgICAgOiBzdGF0ZS5pbmRleDtcblxuICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gTWF0aC5tYXgoaW5kZXggLSBhY3Rpb24ucGF5bG9hZC5jb3VudCArIDEsIDEpO1xuICAgICAgICAgICAgY29uc3Qgcm91dGVzID0gc3RhdGUucm91dGVzXG4gICAgICAgICAgICAgIC5zbGljZSgwLCBjb3VudClcbiAgICAgICAgICAgICAgLmNvbmNhdChzdGF0ZS5yb3V0ZXMuc2xpY2UoaW5kZXggKyAxKSk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICBpbmRleDogcm91dGVzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAgIHJvdXRlcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjYXNlICdQT1BfVE9fVE9QJzpcbiAgICAgICAgICByZXR1cm4gcm91dGVyLmdldFN0YXRlRm9yQWN0aW9uKFxuICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6ICdQT1AnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7IGNvdW50OiBzdGF0ZS5yb3V0ZXMubGVuZ3RoIC0gMSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICApO1xuXG4gICAgICAgIGNhc2UgJ05BVklHQVRFJzpcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5uYW1lICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICFzdGF0ZS5yb3V0ZU5hbWVzLmluY2x1ZGVzKGFjdGlvbi5wYXlsb2FkLm5hbWUpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYWN0aW9uLnBheWxvYWQua2V5IHx8IGFjdGlvbi5wYXlsb2FkLm5hbWUpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSByb3V0ZSBhbHJlYWR5IGV4aXN0cywgbmF2aWdhdGUgdG8gdGhhdFxuICAgICAgICAgICAgbGV0IGluZGV4ID0gLTE7XG5cbiAgICAgICAgICAgIGNvbnN0IGdldElkID1cbiAgICAgICAgICAgICAgLy8gYGdldElkYCBhbmQgYGtleWAgY2FuJ3QgYmUgdXNlZCB0b2dldGhlclxuICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5rZXkgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5uYW1lICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMucm91dGVHZXRJZExpc3RbYWN0aW9uLnBheWxvYWQubmFtZV1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZ2V0SWQ/Lih7IHBhcmFtczogYWN0aW9uLnBheWxvYWQucGFyYW1zIH0pO1xuXG4gICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgaW5kZXggPSBzdGF0ZS5yb3V0ZXMuZmluZEluZGV4KFxuICAgICAgICAgICAgICAgIChyb3V0ZSkgPT5cbiAgICAgICAgICAgICAgICAgIHJvdXRlLm5hbWUgPT09IGFjdGlvbi5wYXlsb2FkLm5hbWUgJiZcbiAgICAgICAgICAgICAgICAgIGlkID09PSBnZXRJZD8uKHsgcGFyYW1zOiByb3V0ZS5wYXJhbXMgfSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgIChzdGF0ZS5yb3V0ZXNbc3RhdGUuaW5kZXhdLm5hbWUgPT09IGFjdGlvbi5wYXlsb2FkLm5hbWUgJiZcbiAgICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5rZXkgPT09IHVuZGVmaW5lZCkgfHxcbiAgICAgICAgICAgICAgc3RhdGUucm91dGVzW3N0YXRlLmluZGV4XS5rZXkgPT09IGFjdGlvbi5wYXlsb2FkLmtleVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhdGUucm91dGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgKHN0YXRlLnJvdXRlc1tpXS5uYW1lID09PSBhY3Rpb24ucGF5bG9hZC5uYW1lICYmXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLmtleSA9PT0gdW5kZWZpbmVkKSB8fFxuICAgICAgICAgICAgICAgICAgc3RhdGUucm91dGVzW2ldLmtleSA9PT0gYWN0aW9uLnBheWxvYWQua2V5XG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBpbmRleCA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQua2V5ICYmXG4gICAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLm5hbWUgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xICYmIGFjdGlvbi5wYXlsb2FkLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjb25zdCByb3V0ZXMgPSBbXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUucm91dGVzLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGtleTpcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQua2V5ID8/IGAke2FjdGlvbi5wYXlsb2FkLm5hbWV9LSR7bmFub2lkKCl9YCxcbiAgICAgICAgICAgICAgICAgIG5hbWU6IGFjdGlvbi5wYXlsb2FkLm5hbWUsXG4gICAgICAgICAgICAgICAgICBwYXRoOiBhY3Rpb24ucGF5bG9hZC5wYXRoLFxuICAgICAgICAgICAgICAgICAgcGFyYW1zOlxuICAgICAgICAgICAgICAgICAgICByb3V0ZVBhcmFtTGlzdFthY3Rpb24ucGF5bG9hZC5uYW1lXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlUGFyYW1MaXN0W2FjdGlvbi5wYXlsb2FkLm5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOiBhY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHJvdXRlcyxcbiAgICAgICAgICAgICAgICBpbmRleDogcm91dGVzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gc3RhdGUucm91dGVzW2luZGV4XTtcblxuICAgICAgICAgICAgbGV0IHBhcmFtcztcblxuICAgICAgICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkLm1lcmdlKSB7XG4gICAgICAgICAgICAgIHBhcmFtcyA9XG4gICAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQucGFyYW1zICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICByb3V0ZVBhcmFtTGlzdFtyb3V0ZS5uYW1lXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAuLi5yb3V0ZVBhcmFtTGlzdFtyb3V0ZS5uYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAuLi5yb3V0ZS5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgLi4uYWN0aW9uLnBheWxvYWQucGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICA6IHJvdXRlLnBhcmFtcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcmFtcyA9XG4gICAgICAgICAgICAgICAgcm91dGVQYXJhbUxpc3Rbcm91dGUubmFtZV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgLi4ucm91dGVQYXJhbUxpc3Rbcm91dGUubmFtZV0sXG4gICAgICAgICAgICAgICAgICAgICAgLi4uYWN0aW9uLnBheWxvYWQucGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICA6IGFjdGlvbi5wYXlsb2FkLnBhcmFtcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICByb3V0ZXM6IFtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZS5yb3V0ZXMuc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAgICAgICAgIHBhcmFtcyAhPT0gcm91dGUucGFyYW1zIHx8XG4gICAgICAgICAgICAgICAgKGFjdGlvbi5wYXlsb2FkLnBhdGggJiYgYWN0aW9uLnBheWxvYWQucGF0aCAhPT0gcm91dGUucGF0aClcbiAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlLFxuICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGFjdGlvbi5wYXlsb2FkLnBhdGggPz8gcm91dGUucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIDogc3RhdGUucm91dGVzW2luZGV4XSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY2FzZSAnR09fQkFDSyc6XG4gICAgICAgICAgaWYgKHN0YXRlLmluZGV4ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdXRlci5nZXRTdGF0ZUZvckFjdGlvbihcbiAgICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnUE9QJyxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiB7IGNvdW50OiAxIH0sXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBhY3Rpb24udGFyZ2V0LFxuICAgICAgICAgICAgICAgIHNvdXJjZTogYWN0aW9uLnNvdXJjZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBCYXNlUm91dGVyLmdldFN0YXRlRm9yQWN0aW9uKHN0YXRlLCBhY3Rpb24pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBhY3Rpb25DcmVhdG9yczogU3RhY2tBY3Rpb25zLFxuICB9O1xuXG4gIHJldHVybiByb3V0ZXI7XG59XG4iXX0=