7272c851c907cec31e6001932a9b57bd
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLinkBuilder;

var _core = require("@react-navigation/core");

var React = _interopRequireWildcard(require("react"));

var _LinkingContext = _interopRequireDefault(require("./LinkingContext"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var getRootStateForNavigate = function getRootStateForNavigate(navigation, state) {
  var parent = navigation.getParent();

  if (parent) {
    var parentState = parent.getState();
    return getRootStateForNavigate(parent, {
      index: 0,
      routes: [Object.assign({}, parentState.routes[parentState.index], {
        state: state
      })]
    });
  }

  return state;
};

function useLinkBuilder() {
  var navigation = React.useContext(_core.NavigationHelpersContext);
  var linking = React.useContext(_LinkingContext.default);
  var buildLink = React.useCallback(function (name, params) {
    var options = linking.options;

    if ((options === null || options === void 0 ? void 0 : options.enabled) === false) {
      return undefined;
    }

    var state = navigation ? getRootStateForNavigate(navigation, {
      index: 0,
      routes: [{
        name: name,
        params: params
      }]
    }) : {
      index: 0,
      routes: [{
        name: name,
        params: params
      }]
    };
    var path = options !== null && options !== void 0 && options.getPathFromState ? options.getPathFromState(state, options === null || options === void 0 ? void 0 : options.config) : (0, _core.getPathFromState)(state, options === null || options === void 0 ? void 0 : options.config);
    return path;
  }, [linking, navigation]);
  return buildLink;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQU9BOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBV0EsSUFBTUEsdUJBQXVCLEdBQUcsU0FBMUJBLHVCQUEwQixDQUM5QkMsVUFEOEIsRUFFOUJDLEtBRjhCLEVBR2I7RUFDakIsSUFBTUMsTUFBTSxHQUFHRixVQUFVLENBQUNHLFNBQVhILEVBQWY7O0VBRUEsSUFBSUUsTUFBSixFQUFZO0lBQ1YsSUFBTUUsV0FBVyxHQUFHRixNQUFNLENBQUNHLFFBQVBILEVBQXBCO0lBRUEsT0FBT0gsdUJBQXVCLENBQUNHLE1BQUQsRUFBUztNQUNyQ0ksS0FBSyxFQUFFLENBRDhCO01BRXJDQyxNQUFNLEVBQUUsbUJBRURILFdBQVcsQ0FBQ0csTUFBWkgsQ0FBbUJBLFdBQVcsQ0FBQ0UsS0FBL0JGLENBRkM7UUFHSkgsS0FBSyxFQUFFQTtNQUhIO0lBRjZCLENBQVQsQ0FBOUI7RUFTRDs7RUFFRCxPQUFPQSxLQUFQO0FBcEJGOztBQTJCZSxTQUFTTyxjQUFULEdBQTBCO0VBQ3ZDLElBQU1SLFVBQVUsR0FBR1MsS0FBSyxDQUFDQyxVQUFORCxDQUFpQkUsOEJBQWpCRixDQUFuQjtFQUNBLElBQU1HLE9BQU8sR0FBR0gsS0FBSyxDQUFDQyxVQUFORCxDQUFpQkksdUJBQWpCSixDQUFoQjtFQUVBLElBQU1LLFNBQVMsR0FBR0wsS0FBSyxDQUFDTSxXQUFOTixDQUNoQixVQUFDTyxJQUFELEVBQWVDLE1BQWYsRUFBbUM7SUFDakMsSUFBUUMsT0FBUixHQUFvQk4sT0FBcEIsQ0FBUU0sT0FBUjs7SUFFQSxJQUFJLFFBQU8sU0FBUEEsV0FBTyxXQUFQQSxtQkFBTyxDQUFFQyxPQUFULE1BQXFCLEtBQXpCLEVBQWdDO01BQzlCLE9BQU9DLFNBQVA7SUFDRDs7SUFFRCxJQUFNbkIsS0FBSyxHQUFHRCxVQUFVLEdBQ3BCRCx1QkFBdUIsQ0FBQ0MsVUFBRCxFQUFhO01BQ2xDTSxLQUFLLEVBQUUsQ0FEMkI7TUFFbENDLE1BQU0sRUFBRSxDQUFDO1FBQUVTLElBQUYsRUFBRUEsSUFBRjtRQUFRQztNQUFSLENBQUQ7SUFGMEIsQ0FBYixDQURILEdBT3BCO01BQ0VYLEtBQUssRUFBRSxDQURUO01BRUVDLE1BQU0sRUFBRSxDQUFDO1FBQUVTLElBQUYsRUFBRUEsSUFBRjtRQUFRQztNQUFSLENBQUQ7SUFGVixDQVBKO0lBWUEsSUFBTUksSUFBSSxHQUFHSCxPQUFPLFNBQVBBLFdBQU8sV0FBUEEsV0FBTyxDQUFFSSxnQkFBVEosR0FDVEEsT0FBTyxDQUFDSSxnQkFBUkosQ0FBeUJqQixLQUF6QmlCLEVBQWdDQSxPQUFoQyxTQUFnQ0EsV0FBaEMsV0FBZ0NBLEdBQWhDLE1BQWdDQSxVQUFPLENBQUVLLE1BQXpDTCxDQURTQSxHQUVULDRCQUFpQmpCLEtBQWpCLEVBQXdCaUIsT0FBeEIsU0FBd0JBLFdBQXhCLFdBQXdCQSxHQUF4QixNQUF3QkEsVUFBTyxDQUFFSyxNQUFqQyxDQUZKO0lBSUEsT0FBT0YsSUFBUDtFQXhCYyxHQTBCaEIsQ0FBQ1QsT0FBRCxFQUFVWixVQUFWLENBMUJnQlMsQ0FBbEI7RUE2QkEsT0FBT0ssU0FBUDtBQUNEIiwibmFtZXMiOlsiZ2V0Um9vdFN0YXRlRm9yTmF2aWdhdGUiLCJuYXZpZ2F0aW9uIiwic3RhdGUiLCJwYXJlbnQiLCJnZXRQYXJlbnQiLCJwYXJlbnRTdGF0ZSIsImdldFN0YXRlIiwiaW5kZXgiLCJyb3V0ZXMiLCJ1c2VMaW5rQnVpbGRlciIsIlJlYWN0IiwidXNlQ29udGV4dCIsIk5hdmlnYXRpb25IZWxwZXJzQ29udGV4dCIsImxpbmtpbmciLCJMaW5raW5nQ29udGV4dCIsImJ1aWxkTGluayIsInVzZUNhbGxiYWNrIiwibmFtZSIsInBhcmFtcyIsIm9wdGlvbnMiLCJlbmFibGVkIiwidW5kZWZpbmVkIiwicGF0aCIsImdldFBhdGhGcm9tU3RhdGUiLCJjb25maWciXSwic291cmNlcyI6WyJ1c2VMaW5rQnVpbGRlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZ2V0UGF0aEZyb21TdGF0ZSxcbiAgTmF2aWdhdGlvbkhlbHBlcnMsXG4gIE5hdmlnYXRpb25IZWxwZXJzQ29udGV4dCxcbiAgTmF2aWdhdGlvblByb3AsXG4gIFBhcmFtTGlzdEJhc2UsXG59IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL2NvcmUnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgTGlua2luZ0NvbnRleHQgZnJvbSAnLi9MaW5raW5nQ29udGV4dCc7XG5cbnR5cGUgTmF2aWdhdGlvbk9iamVjdCA9XG4gIHwgTmF2aWdhdGlvbkhlbHBlcnM8UGFyYW1MaXN0QmFzZT5cbiAgfCBOYXZpZ2F0aW9uUHJvcDxQYXJhbUxpc3RCYXNlPjtcblxudHlwZSBNaW5pbWFsU3RhdGUgPSB7XG4gIGluZGV4OiBudW1iZXI7XG4gIHJvdXRlczogeyBuYW1lOiBzdHJpbmc7IHBhcmFtcz86IG9iamVjdDsgc3RhdGU/OiBNaW5pbWFsU3RhdGUgfVtdO1xufTtcblxuY29uc3QgZ2V0Um9vdFN0YXRlRm9yTmF2aWdhdGUgPSAoXG4gIG5hdmlnYXRpb246IE5hdmlnYXRpb25PYmplY3QsXG4gIHN0YXRlOiBNaW5pbWFsU3RhdGVcbik6IE1pbmltYWxTdGF0ZSA9PiB7XG4gIGNvbnN0IHBhcmVudCA9IG5hdmlnYXRpb24uZ2V0UGFyZW50KCk7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIGNvbnN0IHBhcmVudFN0YXRlID0gcGFyZW50LmdldFN0YXRlKCk7XG5cbiAgICByZXR1cm4gZ2V0Um9vdFN0YXRlRm9yTmF2aWdhdGUocGFyZW50LCB7XG4gICAgICBpbmRleDogMCxcbiAgICAgIHJvdXRlczogW1xuICAgICAgICB7XG4gICAgICAgICAgLi4ucGFyZW50U3RhdGUucm91dGVzW3BhcmVudFN0YXRlLmluZGV4XSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlO1xufTtcblxuLyoqXG4gKiBCdWlsZCBkZXN0aW5hdGlvbiBsaW5rIGZvciBhIG5hdmlnYXRlIGFjdGlvbi5cbiAqIFVzZWZ1bCBmb3Igc2hvd2luZyBhbmNob3IgdGFncyBvbiB0aGUgd2ViIGZvciBidXR0b25zIHRoYXQgcGVyZm9ybSBuYXZpZ2F0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VMaW5rQnVpbGRlcigpIHtcbiAgY29uc3QgbmF2aWdhdGlvbiA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkhlbHBlcnNDb250ZXh0KTtcbiAgY29uc3QgbGlua2luZyA9IFJlYWN0LnVzZUNvbnRleHQoTGlua2luZ0NvbnRleHQpO1xuXG4gIGNvbnN0IGJ1aWxkTGluayA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChuYW1lOiBzdHJpbmcsIHBhcmFtcz86IG9iamVjdCkgPT4ge1xuICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSBsaW5raW5nO1xuXG4gICAgICBpZiAob3B0aW9ucz8uZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3RhdGUgPSBuYXZpZ2F0aW9uXG4gICAgICAgID8gZ2V0Um9vdFN0YXRlRm9yTmF2aWdhdGUobmF2aWdhdGlvbiwge1xuICAgICAgICAgICAgaW5kZXg6IDAsXG4gICAgICAgICAgICByb3V0ZXM6IFt7IG5hbWUsIHBhcmFtcyB9XSxcbiAgICAgICAgICB9KVxuICAgICAgICA6IC8vIElmIHdlIGNvdWxkbid0IGZpbmQgYSBuYXZpZ2F0aW9uIG9iamVjdCBpbiBjb250ZXh0LCB3ZSdyZSBhdCByb290XG4gICAgICAgICAgLy8gU28gd2UnbGwgY29uc3RydWN0IGEgYmFzaWMgc3RhdGUgb2JqZWN0IHRvIHVzZVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgICAgcm91dGVzOiBbeyBuYW1lLCBwYXJhbXMgfV0sXG4gICAgICAgICAgfTtcblxuICAgICAgY29uc3QgcGF0aCA9IG9wdGlvbnM/LmdldFBhdGhGcm9tU3RhdGVcbiAgICAgICAgPyBvcHRpb25zLmdldFBhdGhGcm9tU3RhdGUoc3RhdGUsIG9wdGlvbnM/LmNvbmZpZylcbiAgICAgICAgOiBnZXRQYXRoRnJvbVN0YXRlKHN0YXRlLCBvcHRpb25zPy5jb25maWcpO1xuXG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9LFxuICAgIFtsaW5raW5nLCBuYXZpZ2F0aW9uXVxuICApO1xuXG4gIHJldHVybiBidWlsZExpbms7XG59XG4iXX0=