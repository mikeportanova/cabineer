{"version":3,"names":["elementsThatOverlapOffsets","offsets","itemCount","getFrameMetrics","out","outLength","ii","frame","trailingOffset","offset","length","kk","invariant","JSON","stringify","newRangeCount","prev","next","last","first","Math","max","min","computeWindowedRenderLimits","data","getItemCount","maxToRenderPerBatch","windowSize","getFrameMetricsApprox","scrollMetrics","velocity","visibleLength","visibleBegin","visibleEnd","overscanLength","leadFactor","fillPreference","overscanBegin","overscanEnd","lastItemOffset","overscanFirst","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","firstShouldIncrement","lastWillAddMore","lastShouldIncrement","Error","keyExtractor","item","index","key","id","String"],"sources":["VirtualizeUtils.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport invariant from 'invariant';\n\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\nexport function elementsThatOverlapOffsets(\n  offsets: Array<number>,\n  itemCount: number,\n  getFrameMetrics: (index: number) => {\n    length: number,\n    offset: number,\n    ...\n  },\n): Array<number> {\n  const out = [];\n  let outLength = 0;\n  for (let ii = 0; ii < itemCount; ii++) {\n    const frame = getFrameMetrics(ii);\n    const trailingOffset = frame.offset + frame.length;\n    for (let kk = 0; kk < offsets.length; kk++) {\n      if (out[kk] == null && trailingOffset >= offsets[kk]) {\n        out[kk] = ii;\n        outLength++;\n        if (kk === offsets.length - 1) {\n          invariant(\n            outLength === offsets.length,\n            'bad offsets input, should be in increasing order: %s',\n            JSON.stringify(offsets),\n          );\n          return out;\n        }\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\nexport function newRangeCount(\n  prev: {\n    first: number,\n    last: number,\n    ...\n  },\n  next: {\n    first: number,\n    last: number,\n    ...\n  },\n): number {\n  return (\n    next.last -\n    next.first +\n    1 -\n    Math.max(\n      0,\n      1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first),\n    )\n  );\n}\n\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\nexport function computeWindowedRenderLimits(\n  data: any,\n  getItemCount: (data: any) => number,\n  maxToRenderPerBatch: number,\n  windowSize: number,\n  prev: {\n    first: number,\n    last: number,\n    ...\n  },\n  getFrameMetricsApprox: (index: number) => {\n    length: number,\n    offset: number,\n    ...\n  },\n  scrollMetrics: {\n    dt: number,\n    offset: number,\n    velocity: number,\n    visibleLength: number,\n    ...\n  },\n): {\n  first: number,\n  last: number,\n  ...\n} {\n  const itemCount = getItemCount(data);\n  if (itemCount === 0) {\n    return prev;\n  }\n  const {offset, velocity, visibleLength} = scrollMetrics;\n\n  // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n  const visibleBegin = Math.max(0, offset);\n  const visibleEnd = visibleBegin + visibleLength;\n  const overscanLength = (windowSize - 1) * visibleLength;\n\n  // Considering velocity seems to introduce more churn than it's worth.\n  const leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  const fillPreference =\n    velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n\n  const overscanBegin = Math.max(\n    0,\n    visibleBegin - (1 - leadFactor) * overscanLength,\n  );\n  const overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n\n  const lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1,\n    };\n  }\n\n  // Find the indices that correspond to the items at the render boundaries we're targeting.\n  let [overscanFirst, first, last, overscanLast] = elementsThatOverlapOffsets(\n    [overscanBegin, visibleBegin, visibleEnd, overscanEnd],\n    itemCount,\n    getFrameMetricsApprox,\n  );\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last =\n    last == null\n      ? Math.min(overscanLast, first + maxToRenderPerBatch - 1)\n      : last;\n  const visible = {first, last};\n\n  // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n  let newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n    const maxNewCells = newCellCount >= maxToRenderPerBatch;\n    const firstWillAddMore = first <= prev.first || first > prev.last;\n    const firstShouldIncrement =\n      first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    const lastWillAddMore = last >= prev.last || last < prev.first;\n    const lastShouldIncrement =\n      last < overscanLast && (!maxNewCells || !lastWillAddMore);\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n    if (\n      firstShouldIncrement &&\n      !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)\n    ) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n      first--;\n    }\n    if (\n      lastShouldIncrement &&\n      !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)\n    ) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n      last++;\n    }\n  }\n  if (\n    !(\n      last >= first &&\n      first >= 0 &&\n      last < itemCount &&\n      first >= overscanFirst &&\n      last <= overscanLast &&\n      first <= visible.first &&\n      last >= visible.last\n    )\n  ) {\n    throw new Error(\n      'Bad window calculation ' +\n        JSON.stringify({\n          first,\n          last,\n          itemCount,\n          overscanFirst,\n          overscanLast,\n          visible,\n        }),\n    );\n  }\n  return {first, last};\n}\n\nexport function keyExtractor(item: any, index: number): string {\n  if (typeof item === 'object' && item?.key != null) {\n    return item.key;\n  }\n  if (typeof item === 'object' && item?.id != null) {\n    return item.id;\n  }\n  return String(index);\n}\n"],"mappings":"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"}