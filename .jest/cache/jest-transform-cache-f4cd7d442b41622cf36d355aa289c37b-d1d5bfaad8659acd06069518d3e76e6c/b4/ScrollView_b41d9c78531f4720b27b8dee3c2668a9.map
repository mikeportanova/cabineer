{"version":3,"names":["require","Platform","OS","NativeHorizontalScrollViewTuple","AndroidHorizontalScrollViewNativeComponent","AndroidHorizontalScrollContentViewNativeComponent","NativeVerticalScrollViewTuple","ScrollViewNativeComponent","View","ScrollContentViewNativeComponent","IS_ANIMATING_TOUCH_START_THRESHOLD_MS","ScrollView","props","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","_keyboardWillOpenTo","_additionalScrollOffset","_isTouching","_lastMomentumScrollBeginTime","_lastMomentumScrollEndTime","_observedScrollSinceBecomingResponder","_becameResponderWhileAnimating","_preventNegativeScrollOffset","_animated","_subscriptionKeyboardWillShow","_subscriptionKeyboardWillHide","_subscriptionKeyboardDidShow","_subscriptionKeyboardDidHide","state","layoutHeight","_setNativeRef","setAndForwardRef","getForwardedRef","scrollViewRef","setLocalRef","ref","_scrollViewRef","getScrollResponder","getScrollableNode","getInnerViewNode","getInnerViewRef","getNativeScrollRef","scrollTo","scrollToEnd","flashScrollIndicators","scrollResponderZoomTo","scrollResponderScrollNativeHandleToKeyboard","ReactNative","findNodeHandle","_innerViewRef","options","deprecatedX","deprecatedAnimated","x","y","animated","console","warn","Commands","nodeHandle","additionalOffset","preventNegativeScrollOffset","UIManager","measureLayout","_textInputFocusError","_inputMeasureAndScrollToKeyboard","rect","invariant","zoomToRect","left","top","width","height","keyboardScreenY","Dimensions","get","scrollTextInputIntoVisibleRect","endCoordinates","screenY","scrollOffsetY","Math","max","setTimeout","_handleScroll","e","__DEV__","onScroll","scrollEventThrottle","log","_handleLayout","invertStickyHeaders","setState","nativeEvent","layout","onLayout","_handleContentOnLayout","onContentSizeChange","_setInnerViewRef","innerViewRef","scrollResponderKeyboardWillShow","onKeyboardWillShow","scrollResponderKeyboardWillHide","onKeyboardWillHide","scrollResponderKeyboardDidShow","onKeyboardDidShow","scrollResponderKeyboardDidHide","onKeyboardDidHide","_handleMomentumScrollBegin","global","performance","now","onMomentumScrollBegin","_handleMomentumScrollEnd","FrameRateLogger","endScroll","onMomentumScrollEnd","_handleScrollBeginDrag","beginScroll","keyboardDismissMode","dismissKeyboard","onScrollBeginDrag","_handleScrollEndDrag","velocity","_isAnimating","onScrollEndDrag","timeSinceLastMomentumScrollEnd","isAnimating","_handleResponderGrant","onResponderGrant","_handleResponderReject","_handleResponderRelease","touches","length","onResponderRelease","target","error","currentlyFocusedTextInput","TextInputState","currentlyFocusedInput","keyboardShouldPersistTaps","_keyboardIsDismissible","blurTextInput","_handleResponderTerminationRequest","_handleScrollShouldSetResponder","disableScrollViewPanResponder","_handleStartShouldSetResponder","_handleStartShouldSetResponderCapture","keyboardNeverPersistTaps","isTextInput","hasFocusedTextInput","softKeyboardMayBeOpen","_handleTouchEnd","onTouchEnd","_handleTouchCancel","onTouchCancel","_handleTouchStart","onTouchStart","_handleTouchMove","onTouchMove","_scrollAnimatedValue","AnimatedImplementation","Value","contentOffset","setOffset","contentInset","Keyboard","addListener","_updateAnimatedNodeAttachment","prevProps","prevContentInsetTop","newContentInsetTop","remove","detach","index","childArray","child","key","stickyHeaderIndices","attachNativeEvent","set","delete","event","React","Children","toArray","children","_getKeyForIndex","layoutY","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","setNextHeaderY","horizontal","NativeDirectionalScrollView","NativeDirectionalScrollContentView","contentContainerStyle","styles","contentContainerHorizontal","style","undefined","flattenStyle","childLayoutProps","filter","prop","JSON","stringify","contentSizeChangeProps","map","nextIndex","StickyHeaderComponent","ScrollViewStickyHeader","_setStickyHeaderRef","_onStickyHeaderLayout","stickyHeaderHiddenOnScroll","HORIZONTAL","VERTICAL","hasStickyHeaders","Array","isArray","contentContainer","removeClippedSubviews","alwaysBounceHorizontal","alwaysBounceVertical","baseStyle","baseHorizontal","baseVertical","StyleSheet","compose","onResponderReject","onResponderTerminationRequest","onScrollShouldSetResponder","onStartShouldSetResponder","onStartShouldSetResponderCapture","sendMomentumEvents","snapToStart","snapToEnd","pagingEnabled","select","ios","snapToInterval","snapToOffsets","android","decelerationRate","processDecelerationRate","refreshControl","splitLayoutProps","outer","inner","cloneElement","Component","Context","ScrollViewContext","create","flexGrow","flexShrink","flexDirection","overflow","Wrapper","displayName","ForwardedScrollView","forwardRef","module","exports"],"sources":["ScrollView.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport AnimatedImplementation from '../../Animated/AnimatedImplementation';\nimport Dimensions from '../../Utilities/Dimensions';\nimport Platform from '../../Utilities/Platform';\nimport * as React from 'react';\nimport ReactNative from '../../Renderer/shims/ReactNative';\nrequire('../../Renderer/shims/ReactNative'); // Force side effects to prevent T55744311\nimport ScrollViewStickyHeader from './ScrollViewStickyHeader';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport View from '../View/View';\nimport UIManager from '../../ReactNative/UIManager';\nimport Keyboard from '../Keyboard/Keyboard';\nimport FrameRateLogger from '../../Interaction/FrameRateLogger';\nimport TextInputState from '../TextInput/TextInputState';\n\nimport dismissKeyboard from '../../Utilities/dismissKeyboard';\nimport flattenStyle from '../../StyleSheet/flattenStyle';\nimport invariant from 'invariant';\nimport processDecelerationRate from './processDecelerationRate';\nimport splitLayoutProps from '../../StyleSheet/splitLayoutProps';\nimport setAndForwardRef from '../../Utilities/setAndForwardRef';\n\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {PointProp} from '../../StyleSheet/PointPropType';\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {\n  PressEvent,\n  ScrollEvent,\n  LayoutEvent,\n} from '../../Types/CoreEventTypes';\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport ScrollViewContext, {HORIZONTAL, VERTICAL} from './ScrollViewContext';\nimport type {Props as ScrollViewStickyHeaderProps} from './ScrollViewStickyHeader';\nimport type {KeyboardEvent} from '../Keyboard/Keyboard';\nimport type {EventSubscription} from '../../vendor/emitter/EventEmitter';\n\nimport Commands from './ScrollViewCommands';\nimport AndroidHorizontalScrollContentViewNativeComponent from './AndroidHorizontalScrollContentViewNativeComponent';\nimport AndroidHorizontalScrollViewNativeComponent from './AndroidHorizontalScrollViewNativeComponent';\nimport ScrollContentViewNativeComponent from './ScrollContentViewNativeComponent';\nimport ScrollViewNativeComponent from './ScrollViewNativeComponent';\n\nconst {NativeHorizontalScrollViewTuple, NativeVerticalScrollViewTuple} =\n  Platform.OS === 'android'\n    ? {\n        NativeHorizontalScrollViewTuple: [\n          AndroidHorizontalScrollViewNativeComponent,\n          AndroidHorizontalScrollContentViewNativeComponent,\n        ],\n        NativeVerticalScrollViewTuple: [ScrollViewNativeComponent, View],\n      }\n    : {\n        NativeHorizontalScrollViewTuple: [\n          ScrollViewNativeComponent,\n          ScrollContentViewNativeComponent,\n        ],\n        NativeVerticalScrollViewTuple: [\n          ScrollViewNativeComponent,\n          ScrollContentViewNativeComponent,\n        ],\n      };\n\n/*\n * iOS scroll event timing nuances:\n * ===============================\n *\n *\n * Scrolling without bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... physical touch starts ...\n * 2. `onTouchStartCapture`   (when you press down to stop the scroll)\n * 3. `onTouchStart`          (same, but bubble phase)\n * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)\n * 5. `onMomentumScrollEnd`\n *\n *\n * Scrolling with bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... bounce begins ...\n *    ... some time elapses ...\n *    ... physical touch during bounce ...\n * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)\n * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)\n * 4. `onTouchStart`          (same, but bubble phase)\n * 5. `onTouchEnd`            (You could hold the touch start for a long time)\n * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)\n *\n * So when we receive an `onTouchStart`, how can we tell if we are touching\n * *during* an animation (which then causes the animation to stop)? The only way\n * to tell is if the `touchStart` occurred immediately after the\n * `onMomentumScrollEnd`.\n *\n * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if\n * necessary\n *\n * `ScrollView` also includes logic for blurring a currently focused input\n * if one is focused while scrolling. This is a natural place\n * to put this logic since it can support not dismissing the keyboard while\n * scrolling, unless a recognized \"tap\"-like gesture has occurred.\n *\n * The public lifecycle API includes events for keyboard interaction, responder\n * interaction, and scrolling (among others). The keyboard callbacks\n * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll\n * responder's props so that you can guarantee that the scroll responder's\n * internal state has been updated accordingly (and deterministically) by\n * the time the props callbacks are invoke. Otherwise, you would always wonder\n * if the scroll responder is currently in a state where it recognizes new\n * keyboard positions etc. If coordinating scrolling with keyboard movement,\n * *always* use these hooks instead of listening to your own global keyboard\n * events.\n *\n * Public keyboard lifecycle API: (props callbacks)\n *\n * Standard Keyboard Appearance Sequence:\n *\n *   this.props.onKeyboardWillShow\n *   this.props.onKeyboardDidShow\n *\n * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate\n * tap inside the scroll responder's scrollable region was responsible\n * for the dismissal of the keyboard. There are other reasons why the\n * keyboard could be dismissed.\n *\n *   this.props.onScrollResponderKeyboardDismissed\n *\n * Standard Keyboard Hide Sequence:\n *\n *   this.props.onKeyboardWillHide\n *   this.props.onKeyboardDidHide\n */\n\n// Public methods for ScrollView\nexport type ScrollViewImperativeMethods = $ReadOnly<{|\n  getScrollResponder: $PropertyType<ScrollView, 'getScrollResponder'>,\n  getScrollableNode: $PropertyType<ScrollView, 'getScrollableNode'>,\n  getInnerViewNode: $PropertyType<ScrollView, 'getInnerViewNode'>,\n  getInnerViewRef: $PropertyType<ScrollView, 'getInnerViewRef'>,\n  getNativeScrollRef: $PropertyType<ScrollView, 'getNativeScrollRef'>,\n  scrollTo: $PropertyType<ScrollView, 'scrollTo'>,\n  scrollToEnd: $PropertyType<ScrollView, 'scrollToEnd'>,\n  flashScrollIndicators: $PropertyType<ScrollView, 'flashScrollIndicators'>,\n  scrollResponderZoomTo: $PropertyType<ScrollView, 'scrollResponderZoomTo'>,\n  scrollResponderScrollNativeHandleToKeyboard: $PropertyType<\n    ScrollView,\n    'scrollResponderScrollNativeHandleToKeyboard',\n  >,\n|}>;\n\nexport type DecelerationRateType = 'fast' | 'normal' | number;\nexport type ScrollResponderType = ScrollViewImperativeMethods;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * Controls whether iOS should automatically adjust the content inset\n   * for scroll views that are placed behind a navigation bar or\n   * tab bar/ toolbar. The default value is true.\n   * @platform ios\n   */\n  automaticallyAdjustContentInsets?: ?boolean,\n  /**\n   * Controls whether the ScrollView should automatically adjust it's contentInset\n   * and scrollViewInsets when the Keyboard changes it's size. The default value is false.\n   * @platform ios\n   */\n  automaticallyAdjustKeyboardInsets?: ?boolean,\n  /**\n   * Controls whether iOS should automatically adjust the scroll indicator\n   * insets. The default value is true. Available on iOS 13 and later.\n   * @platform ios\n   */\n  automaticallyAdjustsScrollIndicatorInsets?: ?boolean,\n  /**\n   * The amount by which the scroll view content is inset from the edges\n   * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\n   * @platform ios\n   */\n  contentInset?: ?EdgeInsetsProp,\n  /**\n   * Used to manually set the starting scroll offset.\n   * The default value is `{x: 0, y: 0}`.\n   * @platform ios\n   */\n  contentOffset?: ?PointProp,\n  /**\n   * When true, the scroll view bounces when it reaches the end of the\n   * content if the content is larger then the scroll view along the axis of\n   * the scroll direction. When false, it disables all bouncing even if\n   * the `alwaysBounce*` props are true. The default value is true.\n   * @platform ios\n   */\n  bounces?: ?boolean,\n  /**\n   * By default, ScrollView has an active pan responder that hijacks panresponders\n   * deeper in the render tree in order to prevent accidental touches while scrolling.\n   * However, in certain occasions (such as when using snapToInterval) in a vertical scrollview\n   * You may want to disable this behavior in order to prevent the ScrollView from blocking touches\n   */\n  disableScrollViewPanResponder?: ?boolean,\n  /**\n   * When true, gestures can drive zoom past min/max and the zoom will animate\n   * to the min/max value at gesture end, otherwise the zoom will not exceed\n   * the limits.\n   * @platform ios\n   */\n  bouncesZoom?: ?boolean,\n  /**\n   * When true, the scroll view bounces horizontally when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is true when `horizontal={true}` and false otherwise.\n   * @platform ios\n   */\n  alwaysBounceHorizontal?: ?boolean,\n  /**\n   * When true, the scroll view bounces vertically when it reaches the end\n   * even if the content is smaller than the scroll view itself. The default\n   * value is false when `horizontal={true}` and true otherwise.\n   * @platform ios\n   */\n  alwaysBounceVertical?: ?boolean,\n  /**\n   * When true, the scroll view automatically centers the content when the\n   * content is smaller than the scroll view bounds; when the content is\n   * larger than the scroll view, this property has no effect. The default\n   * value is false.\n   * @platform ios\n   */\n  centerContent?: ?boolean,\n  /**\n   * The style of the scroll indicators.\n   *\n   *   - `'default'` (the default), same as `black`.\n   *   - `'black'`, scroll indicator is black. This style is good against a light background.\n   *   - `'white'`, scroll indicator is white. This style is good against a dark background.\n   *\n   * @platform ios\n   */\n  indicatorStyle?: ?('default' | 'black' | 'white'),\n  /**\n   * When true, the ScrollView will try to lock to only vertical or horizontal\n   * scrolling while dragging.  The default value is false.\n   * @platform ios\n   */\n  directionalLockEnabled?: ?boolean,\n  /**\n   * When false, once tracking starts, won't try to drag if the touch moves.\n   * The default value is true.\n   * @platform ios\n   */\n  canCancelContentTouches?: ?boolean,\n  /**\n   * When set, the scroll view will adjust the scroll position so that the first child that is\n   * currently visible and at or beyond `minIndexForVisible` will not change position. This is\n   * useful for lists that are loading content in both directions, e.g. a chat thread, where new\n   * messages coming in might otherwise cause the scroll position to jump. A value of 0 is common,\n   * but other values such as 1 can be used to skip loading spinners or other content that should\n   * not maintain position.\n   *\n   * The optional `autoscrollToTopThreshold` can be used to make the content automatically scroll\n   * to the top after making the adjustment if the user was within the threshold of the top before\n   * the adjustment was made. This is also useful for chat-like applications where you want to see\n   * new messages scroll into place, but not if the user has scrolled up a ways and it would be\n   * disruptive to scroll a bunch.\n   *\n   * Caveat 1: Reordering elements in the scrollview with this enabled will probably cause\n   * jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now,\n   * don't re-order the content of any ScrollViews or Lists that use this feature.\n   *\n   * Caveat 2: This simply uses `contentOffset` and `frame.origin` in native code to compute\n   * visibility. Occlusion, transforms, and other complexity won't be taken into account as to\n   * whether content is \"visible\" or not.\n   *\n   * @platform ios\n   */\n  maintainVisibleContentPosition?: ?$ReadOnly<{|\n    minIndexForVisible: number,\n    autoscrollToTopThreshold?: ?number,\n  |}>,\n  /**\n   * The maximum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  maximumZoomScale?: ?number,\n  /**\n   * The minimum allowed zoom scale. The default value is 1.0.\n   * @platform ios\n   */\n  minimumZoomScale?: ?number,\n  /**\n   * When true, ScrollView allows use of pinch gestures to zoom in and out.\n   * The default value is true.\n   * @platform ios\n   */\n  pinchGestureEnabled?: ?boolean,\n  /**\n   * This controls how often the scroll event will be fired while scrolling\n   * (as a time interval in ms). A lower number yields better accuracy for code\n   * that is tracking the scroll position, but can lead to scroll performance\n   * problems due to the volume of information being send over the bridge.\n   *\n   * Values between 0 and 17ms indicate 60fps updates are needed and throttling\n   * will be disabled.\n   *\n   * If you do not need precise scroll position tracking, set this value higher\n   * to limit the information being sent across the bridge.\n   *\n   * The default value is zero, which results in the scroll event being sent only\n   * once each time the view is scrolled.\n   *\n   * @platform ios\n   */\n  scrollEventThrottle?: ?number,\n  /**\n   * The amount by which the scroll view indicators are inset from the edges\n   * of the scroll view. This should normally be set to the same value as\n   * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\n   * @platform ios\n   */\n  scrollIndicatorInsets?: ?EdgeInsetsProp,\n  /**\n   * When true, the scroll view can be programmatically scrolled beyond its\n   * content size. The default value is false.\n   * @platform ios\n   */\n  scrollToOverflowEnabled?: ?boolean,\n  /**\n   * When true, the scroll view scrolls to top when the status bar is tapped.\n   * The default value is true.\n   * @platform ios\n   */\n  scrollsToTop?: ?boolean,\n  /**\n   * Fires when the scroll view scrolls to top after the status bar has been tapped\n   * @platform ios\n   */\n  onScrollToTop?: (event: ScrollEvent) => void,\n  /**\n   * When true, shows a horizontal scroll indicator.\n   * The default value is true.\n   */\n  showsHorizontalScrollIndicator?: ?boolean,\n  /**\n   * The current scale of the scroll view content. The default value is 1.0.\n   * @platform ios\n   */\n  zoomScale?: ?number,\n  /**\n   * This property specifies how the safe area insets are used to modify the\n   * content area of the scroll view. The default value of this property is\n   * \"never\". Available on iOS 11 and later.\n   * @platform ios\n   */\n  contentInsetAdjustmentBehavior?: ?(\n    | 'automatic'\n    | 'scrollableAxes'\n    | 'never'\n    | 'always'\n  ),\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Enables nested scrolling for Android API level 21+.\n   * Nested scrolling is supported by default on iOS\n   * @platform android\n   */\n  nestedScrollEnabled?: ?boolean,\n  /**\n   * Sometimes a scrollview takes up more space than its content fills. When this is\n   * the case, this prop will fill the rest of the scrollview with a color to avoid setting\n   * a background and creating unnecessary overdraw. This is an advanced optimization\n   * that is not needed in the general case.\n   * @platform android\n   */\n  endFillColor?: ?ColorValue,\n  /**\n   * Tag used to log scroll performance on this scroll view. Will force\n   * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n   * anything out of the box and you need to implement a custom native\n   * FpsListener for it to be useful.\n   * @platform android\n   */\n  scrollPerfTag?: ?string,\n  /**\n   * Used to override default value of overScroll mode.\n   *\n   * Possible values:\n   *\n   *  - `'auto'` - Default value, allow a user to over-scroll\n   *    this view only if the content is large enough to meaningfully scroll.\n   *  - `'always'` - Always allow a user to over-scroll this view.\n   *  - `'never'` - Never allow a user to over-scroll this view.\n   *\n   * @platform android\n   */\n  overScrollMode?: ?('auto' | 'always' | 'never'),\n  /**\n   * Causes the scrollbars not to turn transparent when they are not in use.\n   * The default value is false.\n   *\n   * @platform android\n   */\n  persistentScrollbar?: ?boolean,\n  /**\n   * Fades out the edges of the the scroll content.\n   *\n   * If the value is greater than 0, the fading edges will be set accordingly\n   * to the current scroll direction and position,\n   * indicating if there is more content to show.\n   *\n   * The default value is 0.\n   *\n   * @platform android\n   */\n  fadingEdgeLength?: ?number,\n|}>;\n\ntype StickyHeaderComponentType = React.AbstractComponent<\n  ScrollViewStickyHeaderProps,\n  $ReadOnly<interface {setNextHeaderY: number => void}>,\n>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * These styles will be applied to the scroll view content container which\n   * wraps all of the child views. Example:\n   *\n   * ```\n   * return (\n   *   <ScrollView contentContainerStyle={styles.contentContainer}>\n   *   </ScrollView>\n   * );\n   * ...\n   * const styles = StyleSheet.create({\n   *   contentContainer: {\n   *     paddingVertical: 20\n   *   }\n   * });\n   * ```\n   */\n  contentContainerStyle?: ?ViewStyleProp,\n  /**\n   * When true, the scroll view stops on the next index (in relation to scroll\n   * position at release) regardless of how fast the gesture is. This can be\n   * used for pagination when the page is less than the width of the\n   * horizontal ScrollView or the height of the vertical ScrollView. The default value is false.\n   */\n  disableIntervalMomentum?: ?boolean,\n  /**\n   * A floating-point number that determines how quickly the scroll view\n   * decelerates after the user lifts their finger. You may also use string\n   * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\n   * for `UIScrollViewDecelerationRateNormal` and\n   * `UIScrollViewDecelerationRateFast` respectively.\n   *\n   *   - `'normal'`: 0.998 on iOS, 0.985 on Android (the default)\n   *   - `'fast'`: 0.99 on iOS, 0.9 on Android\n   */\n  decelerationRate?: ?DecelerationRateType,\n  /**\n   * When true, the scroll view's children are arranged horizontally in a row\n   * instead of vertically in a column. The default value is false.\n   */\n  horizontal?: ?boolean,\n  /**\n   * If sticky headers should stick at the bottom instead of the top of the\n   * ScrollView. This is usually used with inverted ScrollViews.\n   */\n  invertStickyHeaders?: ?boolean,\n  /**\n   * Determines whether the keyboard gets dismissed in response to a drag.\n   *\n   * *Cross platform*\n   *\n   *   - `'none'` (the default), drags do not dismiss the keyboard.\n   *   - `'on-drag'`, the keyboard is dismissed when a drag begins.\n   *\n   * *iOS Only*\n   *\n   *   - `'interactive'`, the keyboard is dismissed interactively with the drag and moves in\n   *     synchrony with the touch; dragging upwards cancels the dismissal.\n   *     On android this is not supported and it will have the same behavior as 'none'.\n   */\n  keyboardDismissMode?: ?// default\n  // cross-platform\n  ('none' | 'on-drag' | 'interactive'), // ios only\n  /**\n   * Determines when the keyboard should stay visible after a tap.\n   *\n   *   - `'never'` (the default), tapping outside of the focused text input when the keyboard\n   *     is up dismisses the keyboard. When this happens, children won't receive the tap.\n   *   - `'always'`, the keyboard will not dismiss automatically, and the scroll view will not\n   *     catch taps, but children of the scroll view can catch taps.\n   *   - `'handled'`, the keyboard will not dismiss automatically when the tap was handled by\n   *     a children, (or captured by an ancestor).\n   *   - `false`, deprecated, use 'never' instead\n   *   - `true`, deprecated, use 'always' instead\n   */\n  keyboardShouldPersistTaps?: ?('always' | 'never' | 'handled' | true | false),\n  /**\n   * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollBegin?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).\n   */\n  onMomentumScrollEnd?: ?(event: ScrollEvent) => void,\n\n  /**\n   * Fires at most once per frame during scrolling. The frequency of the\n   * events can be controlled using the `scrollEventThrottle` prop.\n   */\n  onScroll?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the user begins to drag the scroll view.\n   */\n  onScrollBeginDrag?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when the user stops dragging the scroll view and it either stops\n   * or begins to glide.\n   */\n  onScrollEndDrag?: ?(event: ScrollEvent) => void,\n  /**\n   * Called when scrollable content view of the ScrollView changes.\n   *\n   * Handler function is passed the content width and content height as parameters:\n   * `(contentWidth, contentHeight)`\n   *\n   * It's implemented using onLayout handler attached to the content container\n   * which this ScrollView renders.\n   */\n  onContentSizeChange?: (contentWidth: number, contentHeight: number) => void,\n  onKeyboardDidShow?: (event: KeyboardEvent) => void,\n  onKeyboardDidHide?: (event: KeyboardEvent) => void,\n  onKeyboardWillShow?: (event: KeyboardEvent) => void,\n  onKeyboardWillHide?: (event: KeyboardEvent) => void,\n  /**\n   * When true, the scroll view stops on multiples of the scroll view's size\n   * when scrolling. This can be used for horizontal pagination. The default\n   * value is false.\n   *\n   * Note: Vertical pagination is not supported on Android.\n   */\n  pagingEnabled?: ?boolean,\n\n  /**\n   * When false, the view cannot be scrolled via touch interaction.\n   * The default value is true.\n   *\n   * Note that the view can always be scrolled by calling `scrollTo`.\n   */\n  scrollEnabled?: ?boolean,\n  /**\n   * When true, shows a vertical scroll indicator.\n   * The default value is true.\n   */\n  showsVerticalScrollIndicator?: ?boolean,\n  /**\n   * When true, Sticky header is hidden when scrolling down, and dock at the top\n   * when scrolling up\n   */\n  stickyHeaderHiddenOnScroll?: ?boolean,\n  /**\n   * An array of child indices determining which children get docked to the\n   * top of the screen when scrolling. For example, passing\n   * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n   * top of the scroll view. This property is not supported in conjunction\n   * with `horizontal={true}`.\n   */\n  stickyHeaderIndices?: ?$ReadOnlyArray<number>,\n  /**\n   * A React Component that will be used to render sticky headers.\n   * To be used together with `stickyHeaderIndices` or with `SectionList`, defaults to `ScrollViewStickyHeader`.\n   * You may need to set this if your sticky header uses custom transforms (eg. translation),\n   * for example when you want your list to have an animated hidable header.\n   */\n  StickyHeaderComponent?: StickyHeaderComponentType,\n  /**\n   * When `snapToInterval` is set, `snapToAlignment` will define the relationship\n   * of the snapping to the scroll view.\n   *\n   *   - `'start'` (the default) will align the snap at the left (horizontal) or top (vertical)\n   *   - `'center'` will align the snap in the center\n   *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)\n   */\n  snapToAlignment?: ?('start' | 'center' | 'end'),\n  /**\n   * When set, causes the scroll view to stop at multiples of the value of\n   * `snapToInterval`. This can be used for paginating through children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `snapToAlignment` and `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` prop.\n   */\n  snapToInterval?: ?number,\n  /**\n   * When set, causes the scroll view to stop at the defined offsets.\n   * This can be used for paginating through variously sized children\n   * that have lengths smaller than the scroll view. Typically used in\n   * combination with `decelerationRate=\"fast\"`.\n   *\n   * Overrides less configurable `pagingEnabled` and `snapToInterval` props.\n   */\n  snapToOffsets?: ?$ReadOnlyArray<number>,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the beginning\n   * of the list counts as a snap offset. Set `snapToStart` to false to disable\n   * this behavior and allow the list to scroll freely between its start and\n   * the first `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToStart?: ?boolean,\n  /**\n   * Use in conjunction with `snapToOffsets`. By default, the end\n   * of the list counts as a snap offset. Set `snapToEnd` to false to disable\n   * this behavior and allow the list to scroll freely between its end and\n   * the last `snapToOffsets` offset.\n   * The default value is true.\n   */\n  snapToEnd?: ?boolean,\n  /**\n   * Experimental: When true, offscreen child views (whose `overflow` value is\n   * `hidden`) are removed from their native backing superview when offscreen.\n   * This can improve scrolling performance on long lists. The default value is\n   * true.\n   */\n  removeClippedSubviews?: ?boolean,\n  /**\n   * A RefreshControl component, used to provide pull-to-refresh\n   * functionality for the ScrollView. Only works for vertical ScrollViews\n   * (`horizontal` prop must be `false`).\n   *\n   * See [RefreshControl](docs/refreshcontrol.html).\n   */\n  /* $FlowFixMe[unclear-type] - how to handle generic type without existential\n   * operator? */\n  refreshControl?: ?React.Element<any>,\n  children?: React.Node,\n  /**\n   * A ref to the inner View element of the ScrollView. This should be used\n   * instead of calling `getInnerViewRef`.\n   */\n  innerViewRef?: React.Ref<typeof View>,\n  /**\n   * A ref to the Native ScrollView component. This ref can be used to call\n   * all of ScrollView's public methods, in addition to native methods like\n   * measure, measureLayout, etc.\n   */\n  scrollViewRef?: React.Ref<\n    typeof ScrollViewNativeComponent & ScrollViewImperativeMethods,\n  >,\n|}>;\n\ntype State = {|\n  layoutHeight: ?number,\n|};\n\nconst IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\n\nexport type ScrollViewComponentStatics = $ReadOnly<{|\n  Context: typeof ScrollViewContext,\n|}>;\n\n/**\n * Component that wraps platform ScrollView while providing\n * integration with touch locking \"responder\" system.\n *\n * Keep in mind that ScrollViews must have a bounded height in order to work,\n * since they contain unbounded-height children into a bounded container (via\n * a scroll interaction). In order to bound the height of a ScrollView, either\n * set the height of the view directly (discouraged) or make sure all parent\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\n * view stack can lead to errors here, which the element inspector makes\n * easy to debug.\n *\n * Doesn't yet support other contained responders from blocking this scroll\n * view from becoming the responder.\n *\n *\n * `<ScrollView>` vs [`<FlatList>`](https://reactnative.dev/docs/flatlist) - which one to use?\n *\n * `ScrollView` simply renders all its react child components at once. That\n * makes it very easy to understand and use.\n *\n * On the other hand, this has a performance downside. Imagine you have a very\n * long list of items you want to display, maybe several screens worth of\n * content. Creating JS components and native views for everything all at once,\n * much of which may not even be shown, will contribute to slow rendering and\n * increased memory usage.\n *\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\n * just when they are about to appear, and removes items that scroll way off\n * screen to save memory and processing time.\n *\n * `FlatList` is also handy if you want to render separators between your items,\n * multiple columns, infinite scroll loading, or any number of other features it\n * supports out of the box.\n */\nclass ScrollView extends React.Component<Props, State> {\n  static Context: typeof ScrollViewContext = ScrollViewContext;\n\n  constructor(props: Props) {\n    super(props);\n\n    this._scrollAnimatedValue = new AnimatedImplementation.Value(\n      this.props.contentOffset?.y ?? 0,\n    );\n    this._scrollAnimatedValue.setOffset(this.props.contentInset?.top ?? 0);\n  }\n\n  _scrollAnimatedValue: AnimatedImplementation.Value;\n  _scrollAnimatedValueAttachment: ?{detach: () => void, ...} = null;\n  _stickyHeaderRefs: Map<string, React.ElementRef<StickyHeaderComponentType>> =\n    new Map();\n  _headerLayoutYs: Map<string, number> = new Map();\n\n  _keyboardWillOpenTo: ?KeyboardEvent = null;\n  _additionalScrollOffset: number = 0;\n  _isTouching: boolean = false;\n  _lastMomentumScrollBeginTime: number = 0;\n  _lastMomentumScrollEndTime: number = 0;\n\n  // Reset to false every time becomes responder. This is used to:\n  // - Determine if the scroll view has been scrolled and therefore should\n  // refuse to give up its responder lock.\n  // - Determine if releasing should dismiss the keyboard when we are in\n  // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').\n  _observedScrollSinceBecomingResponder: boolean = false;\n  _becameResponderWhileAnimating: boolean = false;\n  _preventNegativeScrollOffset: ?boolean = null;\n\n  _animated = null;\n\n  _subscriptionKeyboardWillShow: ?EventSubscription = null;\n  _subscriptionKeyboardWillHide: ?EventSubscription = null;\n  _subscriptionKeyboardDidShow: ?EventSubscription = null;\n  _subscriptionKeyboardDidHide: ?EventSubscription = null;\n\n  state: State = {\n    layoutHeight: null,\n  };\n\n  componentDidMount() {\n    if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {\n      console.warn(\n        `'keyboardShouldPersistTaps={${\n          this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'\n        }}' is deprecated. ` +\n          `Use 'keyboardShouldPersistTaps=\"${\n            this.props.keyboardShouldPersistTaps ? 'always' : 'never'\n          }\"' instead`,\n      );\n    }\n\n    this._keyboardWillOpenTo = null;\n    this._additionalScrollOffset = 0;\n\n    this._subscriptionKeyboardWillShow = Keyboard.addListener(\n      'keyboardWillShow',\n      this.scrollResponderKeyboardWillShow,\n    );\n    this._subscriptionKeyboardWillHide = Keyboard.addListener(\n      'keyboardWillHide',\n      this.scrollResponderKeyboardWillHide,\n    );\n    this._subscriptionKeyboardDidShow = Keyboard.addListener(\n      'keyboardDidShow',\n      this.scrollResponderKeyboardDidShow,\n    );\n    this._subscriptionKeyboardDidHide = Keyboard.addListener(\n      'keyboardDidHide',\n      this.scrollResponderKeyboardDidHide,\n    );\n\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevContentInsetTop = prevProps.contentInset\n      ? prevProps.contentInset.top\n      : 0;\n    const newContentInsetTop = this.props.contentInset\n      ? this.props.contentInset.top\n      : 0;\n    if (prevContentInsetTop !== newContentInsetTop) {\n      this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);\n    }\n\n    this._updateAnimatedNodeAttachment();\n  }\n\n  componentWillUnmount() {\n    if (this._subscriptionKeyboardWillShow != null) {\n      this._subscriptionKeyboardWillShow.remove();\n    }\n    if (this._subscriptionKeyboardWillHide != null) {\n      this._subscriptionKeyboardWillHide.remove();\n    }\n    if (this._subscriptionKeyboardDidShow != null) {\n      this._subscriptionKeyboardDidShow.remove();\n    }\n    if (this._subscriptionKeyboardDidHide != null) {\n      this._subscriptionKeyboardDidHide.remove();\n    }\n\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n  }\n\n  _setNativeRef = setAndForwardRef({\n    getForwardedRef: () => this.props.scrollViewRef,\n    setLocalRef: ref => {\n      this._scrollViewRef = ref;\n\n      /*\n        This is a hack. Ideally we would forwardRef to the underlying\n        host component. However, since ScrollView has it's own methods that can be\n        called as well, if we used the standard forwardRef then these\n        methods wouldn't be accessible and thus be a breaking change.\n\n        Therefore we edit ref to include ScrollView's public methods so that\n        they are callable from the ref.\n      */\n      if (ref) {\n        ref.getScrollResponder = this.getScrollResponder;\n        ref.getScrollableNode = this.getScrollableNode;\n        ref.getInnerViewNode = this.getInnerViewNode;\n        ref.getInnerViewRef = this.getInnerViewRef;\n        ref.getNativeScrollRef = this.getNativeScrollRef;\n        ref.scrollTo = this.scrollTo;\n        ref.scrollToEnd = this.scrollToEnd;\n        ref.flashScrollIndicators = this.flashScrollIndicators;\n        ref.scrollResponderZoomTo = this.scrollResponderZoomTo;\n        ref.scrollResponderScrollNativeHandleToKeyboard =\n          this.scrollResponderScrollNativeHandleToKeyboard;\n      }\n    },\n  });\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder: () => ScrollResponderType = () => {\n    // $FlowFixMe[unclear-type]\n    return ((this: any): ScrollResponderType);\n  };\n\n  getScrollableNode: () => ?number = () => {\n    return ReactNative.findNodeHandle(this._scrollViewRef);\n  };\n\n  getInnerViewNode: () => ?number = () => {\n    return ReactNative.findNodeHandle(this._innerViewRef);\n  };\n\n  getInnerViewRef: () => ?React.ElementRef<typeof View> = () => {\n    return this._innerViewRef;\n  };\n\n  getNativeScrollRef: () => ?React.ElementRef<HostComponent<mixed>> = () => {\n    return this._scrollViewRef;\n  };\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * Example:\n   *\n   * `scrollTo({x: 0, y: 0, animated: true})`\n   *\n   * Note: The weird function signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo: (\n    options?:\n      | {\n          x?: number,\n          y?: number,\n          animated?: boolean,\n          ...\n        }\n      | number,\n    deprecatedX?: number,\n    deprecatedAnimated?: boolean,\n  ) => void = (\n    options?:\n      | {\n          x?: number,\n          y?: number,\n          animated?: boolean,\n          ...\n        }\n      | number,\n    deprecatedX?: number,\n    deprecatedAnimated?: boolean,\n  ) => {\n    let x, y, animated;\n    if (typeof options === 'number') {\n      console.warn(\n        '`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\n          'animated: true})` instead.',\n      );\n      y = options;\n      x = deprecatedX;\n      animated = deprecatedAnimated;\n    } else if (options) {\n      y = options.y;\n      x = options.x;\n      animated = options.animated;\n    }\n    if (this._scrollViewRef == null) {\n      return;\n    }\n    Commands.scrollTo(this._scrollViewRef, x || 0, y || 0, animated !== false);\n  };\n\n  /**\n   * If this is a vertical ScrollView scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   */\n  scrollToEnd: (options?: ?{animated?: boolean, ...}) => void = (\n    options?: ?{animated?: boolean, ...},\n  ) => {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    if (this._scrollViewRef == null) {\n      return;\n    }\n    Commands.scrollToEnd(this._scrollViewRef, animated);\n  };\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: () => void = () => {\n    if (this._scrollViewRef == null) {\n      return;\n    }\n    Commands.flashScrollIndicators(this._scrollViewRef);\n  };\n\n  /**\n   * This method should be used as the callback to onFocus in a TextInputs'\n   * parent view. Note that any module using this mixin needs to return\n   * the parent view's ref in getScrollViewRef() in order to use this method.\n   * @param {number} nodeHandle The TextInput node handle\n   * @param {number} additionalOffset The scroll view's bottom \"contentInset\".\n   *        Default is 0.\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\n   *        down to make it meet the keyboard's top. Default is false.\n   */\n  scrollResponderScrollNativeHandleToKeyboard: <T>(\n    nodeHandle: number | React.ElementRef<HostComponent<T>>,\n    additionalOffset?: number,\n    preventNegativeScrollOffset?: boolean,\n  ) => void = <T>(\n    nodeHandle: number | React.ElementRef<HostComponent<T>>,\n    additionalOffset?: number,\n    preventNegativeScrollOffset?: boolean,\n  ) => {\n    this._additionalScrollOffset = additionalOffset || 0;\n    this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n\n    if (this._innerViewRef == null) {\n      return;\n    }\n\n    if (typeof nodeHandle === 'number') {\n      UIManager.measureLayout(\n        nodeHandle,\n        ReactNative.findNodeHandle(this),\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        this._textInputFocusError,\n        this._inputMeasureAndScrollToKeyboard,\n      );\n    } else {\n      nodeHandle.measureLayout(\n        this._innerViewRef,\n        this._inputMeasureAndScrollToKeyboard,\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        this._textInputFocusError,\n      );\n    }\n  };\n\n  /**\n   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape\n   * {x: number; y: number; width: number; height: number; animated: boolean = true}\n   *\n   * @platform ios\n   */\n  scrollResponderZoomTo: (\n    rect: {|\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      animated?: boolean,\n    |},\n    animated?: boolean, // deprecated, put this inside the rect argument instead\n  ) => void = (\n    rect: {|\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      animated?: boolean,\n    |},\n    animated?: boolean, // deprecated, put this inside the rect argument instead\n  ) => {\n    invariant(Platform.OS === 'ios', 'zoomToRect is not implemented');\n    if ('animated' in rect) {\n      this._animated = rect.animated;\n      delete rect.animated;\n    } else if (typeof animated !== 'undefined') {\n      console.warn(\n        '`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead',\n      );\n    }\n\n    if (this._scrollViewRef == null) {\n      return;\n    }\n    Commands.zoomToRect(this._scrollViewRef, rect, animated !== false);\n  };\n\n  _textInputFocusError() {\n    console.warn('Error measuring text field.');\n  }\n\n  /**\n   * The calculations performed here assume the scroll view takes up the entire\n   * screen - even if has some content inset. We then measure the offsets of the\n   * keyboard, and compensate both for the scroll view's \"contentInset\".\n   *\n   * @param {number} left Position of input w.r.t. table view.\n   * @param {number} top Position of input w.r.t. table view.\n   * @param {number} width Width of the text input.\n   * @param {number} height Height of the text input.\n   */\n  _inputMeasureAndScrollToKeyboard: (\n    left: number,\n    top: number,\n    width: number,\n    height: number,\n  ) => void = (left: number, top: number, width: number, height: number) => {\n    let keyboardScreenY = Dimensions.get('window').height;\n\n    const scrollTextInputIntoVisibleRect = () => {\n      if (this._keyboardWillOpenTo != null) {\n        keyboardScreenY = this._keyboardWillOpenTo.endCoordinates.screenY;\n      }\n      let scrollOffsetY =\n        top - keyboardScreenY + height + this._additionalScrollOffset;\n\n      // By default, this can scroll with negative offset, pulling the content\n      // down so that the target component's bottom meets the keyboard's top.\n      // If requested otherwise, cap the offset at 0 minimum to avoid content\n      // shifting down.\n      if (this._preventNegativeScrollOffset === true) {\n        scrollOffsetY = Math.max(0, scrollOffsetY);\n      }\n      this.scrollTo({x: 0, y: scrollOffsetY, animated: true});\n\n      this._additionalScrollOffset = 0;\n      this._preventNegativeScrollOffset = false;\n    };\n\n    if (this._keyboardWillOpenTo == null) {\n      // `_keyboardWillOpenTo` is set inside `scrollResponderKeyboardWillShow` which\n      // is not guaranteed to be called before `_inputMeasureAndScrollToKeyboard` but native has already scheduled it.\n      // In case it was not called before `_inputMeasureAndScrollToKeyboard`, we postpone scrolling to\n      // text input.\n      setTimeout(() => {\n        scrollTextInputIntoVisibleRect();\n      }, 0);\n    } else {\n      scrollTextInputIntoVisibleRect();\n    }\n  };\n\n  _getKeyForIndex(index, childArray) {\n    const child = childArray[index];\n    return child && child.key;\n  }\n\n  _updateAnimatedNodeAttachment() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    if (\n      this.props.stickyHeaderIndices &&\n      this.props.stickyHeaderIndices.length > 0\n    ) {\n      this._scrollAnimatedValueAttachment =\n        AnimatedImplementation.attachNativeEvent(\n          this._scrollViewRef,\n          'onScroll',\n          [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}],\n        );\n    }\n  }\n\n  _setStickyHeaderRef(\n    key: string,\n    ref: ?React.ElementRef<StickyHeaderComponentType>,\n  ) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  }\n\n  _onStickyHeaderLayout(index, event, key) {\n    const {stickyHeaderIndices} = this.props;\n    if (!stickyHeaderIndices) {\n      return;\n    }\n    const childArray = React.Children.toArray(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      // ignore stale layout update\n      return;\n    }\n\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n\n    const indexOfIndex = stickyHeaderIndices.indexOf(index);\n    const previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(\n        this._getKeyForIndex(previousHeaderIndex, childArray),\n      );\n      previousHeader &&\n        previousHeader.setNextHeaderY &&\n        previousHeader.setNextHeaderY(layoutY);\n    }\n  }\n\n  _handleScroll = (e: ScrollEvent) => {\n    if (__DEV__) {\n      if (\n        this.props.onScroll &&\n        this.props.scrollEventThrottle == null &&\n        Platform.OS === 'ios'\n      ) {\n        console.log(\n          'You specified `onScroll` on a <ScrollView> but not ' +\n            '`scrollEventThrottle`. You will only receive one event. ' +\n            'Using `16` you get all the events but be aware that it may ' +\n            \"cause frame drops, use a bigger number if you don't need as \" +\n            'much precision.',\n        );\n      }\n    }\n    this._observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n  };\n\n  _handleLayout = (e: LayoutEvent) => {\n    if (this.props.invertStickyHeaders === true) {\n      this.setState({layoutHeight: e.nativeEvent.layout.height});\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  };\n\n  _handleContentOnLayout = (e: LayoutEvent) => {\n    const {width, height} = e.nativeEvent.layout;\n    this.props.onContentSizeChange &&\n      this.props.onContentSizeChange(width, height);\n  };\n\n  _scrollViewRef: ?React.ElementRef<HostComponent<mixed>> = null;\n\n  _innerViewRef: ?React.ElementRef<typeof View> = null;\n  _setInnerViewRef = setAndForwardRef({\n    getForwardedRef: () => this.props.innerViewRef,\n    setLocalRef: ref => {\n      this._innerViewRef = ref;\n    },\n  });\n\n  /**\n   * Warning, this may be called several times for a single keyboard opening.\n   * It's best to store the information in this method and then take any action\n   * at a later point (either in `keyboardDidShow` or other).\n   *\n   * Here's the order that events occur in:\n   * - focus\n   * - willShow {startCoordinates, endCoordinates} several times\n   * - didShow several times\n   * - blur\n   * - willHide {startCoordinates, endCoordinates} several times\n   * - didHide several times\n   *\n   * The `ScrollResponder` module callbacks for each of these events.\n   * Even though any user could have easily listened to keyboard events\n   * themselves, using these `props` callbacks ensures that ordering of events\n   * is consistent - and not dependent on the order that the keyboard events are\n   * subscribed to. This matters when telling the scroll view to scroll to where\n   * the keyboard is headed - the scroll responder better have been notified of\n   * the keyboard destination before being instructed to scroll to where the\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\n   * will work.\n   *\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\n   * different navigation pane. Filter out the events to determine if they are\n   * relevant to you. (For example, only if you receive these callbacks after\n   * you had explicitly focused a node etc).\n   */\n\n  scrollResponderKeyboardWillShow: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardWillOpenTo = e;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  };\n\n  scrollResponderKeyboardWillHide: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardWillOpenTo = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  };\n\n  scrollResponderKeyboardDidShow: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    // TODO(7693961): The event for DidShow is not available on iOS yet.\n    // Use the one from WillShow and do not assign.\n    if (e) {\n      this._keyboardWillOpenTo = e;\n    }\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  };\n\n  scrollResponderKeyboardDidHide: (e: KeyboardEvent) => void = (\n    e: KeyboardEvent,\n  ) => {\n    this._keyboardWillOpenTo = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  };\n\n  /**\n   * Invoke this from an `onMomentumScrollBegin` event.\n   */\n  _handleMomentumScrollBegin: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    this._lastMomentumScrollBeginTime = global.performance.now();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  };\n\n  /**\n   * Invoke this from an `onMomentumScrollEnd` event.\n   */\n  _handleMomentumScrollEnd: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    FrameRateLogger.endScroll();\n    this._lastMomentumScrollEndTime = global.performance.now();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  };\n\n  /**\n   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\n   * animation, and there's not an easy way to distinguish a drag vs. stopping\n   * momentum.\n   *\n   * Invoke this from an `onScrollBeginDrag` event.\n   */\n  _handleScrollBeginDrag: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    FrameRateLogger.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation\n\n    if (\n      Platform.OS === 'android' &&\n      this.props.keyboardDismissMode === 'on-drag'\n    ) {\n      dismissKeyboard();\n    }\n\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n\n  /**\n   * Invoke this from an `onScrollEndDrag` event.\n   */\n  _handleScrollEndDrag: (e: ScrollEvent) => void = (e: ScrollEvent) => {\n    const {velocity} = e.nativeEvent;\n    // - If we are animating, then this is a \"drag\" that is stopping the scrollview and momentum end\n    //   will fire.\n    // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or\n    //   another drag starts and ends.\n    // - If we don't get velocity, better to stop the interaction twice than not stop it.\n    if (\n      !this._isAnimating() &&\n      (!velocity || (velocity.x === 0 && velocity.y === 0))\n    ) {\n      FrameRateLogger.endScroll();\n    }\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  };\n\n  /**\n   * A helper function for this class that lets us quickly determine if the\n   * view is currently animating. This is particularly useful to know when\n   * a touch has just started or ended.\n   */\n  _isAnimating: () => boolean = () => {\n    const now = global.performance.now();\n    const timeSinceLastMomentumScrollEnd =\n      now - this._lastMomentumScrollEndTime;\n    const isAnimating =\n      timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS ||\n      this._lastMomentumScrollEndTime < this._lastMomentumScrollBeginTime;\n    return isAnimating;\n  };\n\n  /**\n   * Invoke this from an `onResponderGrant` event.\n   */\n  _handleResponderGrant: (e: PressEvent) => void = (e: PressEvent) => {\n    this._observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this._becameResponderWhileAnimating = this._isAnimating();\n  };\n\n  /**\n   * Invoke this from an `onResponderReject` event.\n   *\n   * Some other element is not yielding its role as responder. Normally, we'd\n   * just disable the `UIScrollView`, but a touch has already began on it, the\n   * `UIScrollView` will not accept being disabled after that. The easiest\n   * solution for now is to accept the limitation of disallowing this\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\n   * a touch has already started.\n   */\n  _handleResponderReject: () => void = () => {};\n\n  /**\n   * Invoke this from an `onResponderRelease` event.\n   */\n  _handleResponderRelease: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = e.nativeEvent.touches.length !== 0;\n    this.props.onResponderRelease && this.props.onResponderRelease(e);\n\n    if (typeof e.target === 'number') {\n      if (__DEV__) {\n        console.error(\n          'Did not expect event target to be a number. Should have been a native component',\n        );\n      }\n\n      return;\n    }\n\n    // By default scroll views will unfocus a textField\n    // if another touch occurs outside of it\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\n    if (\n      this.props.keyboardShouldPersistTaps !== true &&\n      this.props.keyboardShouldPersistTaps !== 'always' &&\n      this._keyboardIsDismissible() &&\n      e.target !== currentlyFocusedTextInput &&\n      !this._observedScrollSinceBecomingResponder &&\n      !this._becameResponderWhileAnimating\n    ) {\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n  };\n\n  /**\n   * We will allow the scroll view to give up its lock iff it acquired the lock\n   * during an animation. This is a very useful default that happens to satisfy\n   * many common user experiences.\n   *\n   * - Stop a scroll on the left edge, then turn that into an outer view's\n   *   backswipe.\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\n   *   view dismiss.\n   * - However, without catching the scroll view mid-bounce (while it is\n   *   motionless), if you drag far enough for the scroll view to become\n   *   responder (and therefore drag the scroll view a bit), any backswipe\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\n   *   rejected.\n   */\n  _handleResponderTerminationRequest: () => boolean = () => {\n    return !this._observedScrollSinceBecomingResponder;\n  };\n\n  /**\n   * Invoke this from an `onScroll` event.\n   */\n  _handleScrollShouldSetResponder: () => boolean = () => {\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n    return this._isTouching;\n  };\n\n  /**\n   * Merely touch starting is not sufficient for a scroll view to become the\n   * responder. Being the \"responder\" means that the very next touch move/end\n   * event will result in an action/movement.\n   *\n   * Invoke this from an `onStartShouldSetResponder` event.\n   *\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\n   * some UI movement/action, but when you want to yield priority to views\n   * nested inside of the view.\n   *\n   * There may be some cases where scroll views actually should return `true`\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\n   * that gives priority to nested views.\n   *\n   * - If a single tap on the scroll view triggers an action such as\n   *   recentering a map style view yet wants to give priority to interaction\n   *   views inside (such as dropped pins or labels), then we would return true\n   *   from this method when there is a single touch.\n   *\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\n   *   true.\n   *\n   */\n  _handleStartShouldSetResponder: (e: PressEvent) => boolean = (\n    e: PressEvent,\n  ) => {\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n\n    const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n\n    if (\n      this.props.keyboardShouldPersistTaps === 'handled' &&\n      this._keyboardIsDismissible() &&\n      e.target !== currentlyFocusedInput\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * There are times when the scroll view wants to become the responder\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\n   * that *doesn't* give priority to nested views (hence the capture phase):\n   *\n   * - Currently animating.\n   * - Tapping anywhere that is not a text input, while the keyboard is\n   *   up (which should dismiss the keyboard).\n   *\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\n   */\n  _handleStartShouldSetResponderCapture: (e: PressEvent) => boolean = (\n    e: PressEvent,\n  ) => {\n    // The scroll view should receive taps instead of its descendants if:\n    // * it is already animating/decelerating\n    if (this._isAnimating()) {\n      return true;\n    }\n\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n\n    // * the keyboard is up, keyboardShouldPersistTaps is 'never' (the default),\n    // and a new touch starts with a non-textinput target (in which case the\n    // first tap should be sent to the scroll view and dismiss the keyboard,\n    // then the second tap goes to the actual interior view)\n    const {keyboardShouldPersistTaps} = this.props;\n    const keyboardNeverPersistTaps =\n      !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n\n    if (typeof e.target === 'number') {\n      if (__DEV__) {\n        console.error(\n          'Did not expect event target to be a number. Should have been a native component',\n        );\n      }\n\n      return false;\n    }\n\n    if (\n      keyboardNeverPersistTaps &&\n      this._keyboardIsDismissible() &&\n      e.target != null &&\n      !TextInputState.isTextInput(e.target)\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Do we consider there to be a dismissible soft-keyboard open?\n   */\n  _keyboardIsDismissible: () => boolean = () => {\n    const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n\n    // We cannot dismiss the keyboard without an input to blur, even if a soft\n    // keyboard is open (e.g. when keyboard is open due to a native component\n    // not participating in TextInputState). It's also possible that the\n    // currently focused input isn't a TextInput (such as by calling ref.focus\n    // on a non-TextInput).\n    const hasFocusedTextInput =\n      currentlyFocusedInput != null &&\n      TextInputState.isTextInput(currentlyFocusedInput);\n\n    // Even if an input is focused, we may not have a keyboard to dismiss. E.g\n    // when using a physical keyboard. Ensure we have an event for an opened\n    // keyboard, except on Android where setting windowSoftInputMode to\n    // adjustNone leads to missing keyboard events.\n    const softKeyboardMayBeOpen =\n      this._keyboardWillOpenTo != null || Platform.OS === 'android';\n\n    return hasFocusedTextInput && softKeyboardMayBeOpen;\n  };\n\n  /**\n   * Invoke this from an `onTouchEnd` event.\n   *\n   * @param {PressEvent} e Event.\n   */\n  _handleTouchEnd: (e: PressEvent) => void = (e: PressEvent) => {\n    const nativeEvent = e.nativeEvent;\n    this._isTouching = nativeEvent.touches.length !== 0;\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchCancel` event.\n   *\n   * @param {PressEvent} e Event.\n   */\n  _handleTouchCancel: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = false;\n    this.props.onTouchCancel && this.props.onTouchCancel(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchStart` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {PressEvent} e Touch Start event.\n   */\n  _handleTouchStart: (e: PressEvent) => void = (e: PressEvent) => {\n    this._isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  };\n\n  /**\n   * Invoke this from an `onTouchMove` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {PressEvent} e Touch Start event.\n   */\n  _handleTouchMove: (e: PressEvent) => void = (e: PressEvent) => {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  };\n\n  render(): React.Node | React.Element<string> {\n    const [NativeDirectionalScrollView, NativeDirectionalScrollContentView] =\n      this.props.horizontal === true\n        ? NativeHorizontalScrollViewTuple\n        : NativeVerticalScrollViewTuple;\n\n    const contentContainerStyle = [\n      this.props.horizontal === true && styles.contentContainerHorizontal,\n      this.props.contentContainerStyle,\n    ];\n    if (__DEV__ && this.props.style !== undefined) {\n      const style = flattenStyle(this.props.style);\n      const childLayoutProps = ['alignItems', 'justifyContent'].filter(\n        prop => style && style[prop] !== undefined,\n      );\n      invariant(\n        childLayoutProps.length === 0,\n        'ScrollView child layout (' +\n          JSON.stringify(childLayoutProps) +\n          ') must be applied through the contentContainerStyle prop.',\n      );\n    }\n\n    const contentSizeChangeProps =\n      this.props.onContentSizeChange == null\n        ? null\n        : {\n            onLayout: this._handleContentOnLayout,\n          };\n\n    const {stickyHeaderIndices} = this.props;\n    let children = this.props.children;\n\n    if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {\n      const childArray = React.Children.toArray(this.props.children);\n\n      children = childArray.map((child, index) => {\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n        if (indexOfIndex > -1) {\n          const key = child.key;\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n          const StickyHeaderComponent =\n            this.props.StickyHeaderComponent || ScrollViewStickyHeader;\n          return (\n            <StickyHeaderComponent\n              key={key}\n              nativeID={'StickyHeader-' + key} /* TODO: T68258846. */\n              ref={ref => this._setStickyHeaderRef(key, ref)}\n              nextHeaderLayoutY={this._headerLayoutYs.get(\n                this._getKeyForIndex(nextIndex, childArray),\n              )}\n              onLayout={event => this._onStickyHeaderLayout(index, event, key)}\n              scrollAnimatedValue={this._scrollAnimatedValue}\n              inverted={this.props.invertStickyHeaders}\n              hiddenOnScroll={this.props.stickyHeaderHiddenOnScroll}\n              scrollViewHeight={this.state.layoutHeight}>\n              {child}\n            </StickyHeaderComponent>\n          );\n        } else {\n          return child;\n        }\n      });\n    }\n    children = (\n      <ScrollViewContext.Provider\n        value={this.props.horizontal === true ? HORIZONTAL : VERTICAL}>\n        {children}\n      </ScrollViewContext.Provider>\n    );\n\n    const hasStickyHeaders =\n      Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;\n\n    const contentContainer = (\n      <NativeDirectionalScrollContentView\n        {...contentSizeChangeProps}\n        ref={this._setInnerViewRef}\n        style={contentContainerStyle}\n        removeClippedSubviews={\n          // Subview clipping causes issues with sticky headers on Android and\n          // would be hard to fix properly in a performant way.\n          Platform.OS === 'android' && hasStickyHeaders\n            ? false\n            : this.props.removeClippedSubviews\n        }\n        collapsable={false}>\n        {children}\n      </NativeDirectionalScrollContentView>\n    );\n\n    const alwaysBounceHorizontal =\n      this.props.alwaysBounceHorizontal !== undefined\n        ? this.props.alwaysBounceHorizontal\n        : this.props.horizontal;\n\n    const alwaysBounceVertical =\n      this.props.alwaysBounceVertical !== undefined\n        ? this.props.alwaysBounceVertical\n        : !this.props.horizontal;\n\n    const baseStyle =\n      this.props.horizontal === true\n        ? styles.baseHorizontal\n        : styles.baseVertical;\n    const props = {\n      ...this.props,\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: StyleSheet.compose(baseStyle, this.props.style),\n      // Override the onContentSizeChange from props, since this event can\n      // bubble up from TextInputs\n      onContentSizeChange: null,\n      onLayout: this._handleLayout,\n      onMomentumScrollBegin: this._handleMomentumScrollBegin,\n      onMomentumScrollEnd: this._handleMomentumScrollEnd,\n      onResponderGrant: this._handleResponderGrant,\n      onResponderReject: this._handleResponderReject,\n      onResponderRelease: this._handleResponderRelease,\n      onResponderTerminationRequest: this._handleResponderTerminationRequest,\n      onScrollBeginDrag: this._handleScrollBeginDrag,\n      onScrollEndDrag: this._handleScrollEndDrag,\n      onScrollShouldSetResponder: this._handleScrollShouldSetResponder,\n      onStartShouldSetResponder: this._handleStartShouldSetResponder,\n      onStartShouldSetResponderCapture:\n        this._handleStartShouldSetResponderCapture,\n      onTouchEnd: this._handleTouchEnd,\n      onTouchMove: this._handleTouchMove,\n      onTouchStart: this._handleTouchStart,\n      onTouchCancel: this._handleTouchCancel,\n      onScroll: this._handleScroll,\n      scrollEventThrottle: hasStickyHeaders\n        ? 1\n        : this.props.scrollEventThrottle,\n      sendMomentumEvents:\n        this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd\n          ? true\n          : false,\n      // default to true\n      snapToStart: this.props.snapToStart !== false,\n      // default to true\n      snapToEnd: this.props.snapToEnd !== false,\n      // pagingEnabled is overridden by snapToInterval / snapToOffsets\n      pagingEnabled: Platform.select({\n        // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work\n        ios:\n          this.props.pagingEnabled === true &&\n          this.props.snapToInterval == null &&\n          this.props.snapToOffsets == null,\n        // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work\n        android:\n          this.props.pagingEnabled === true ||\n          this.props.snapToInterval != null ||\n          this.props.snapToOffsets != null,\n      }),\n    };\n\n    const {decelerationRate} = this.props;\n    if (decelerationRate != null) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n\n    const refreshControl = this.props.refreshControl;\n\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        // On iOS the RefreshControl is a child of the ScrollView.\n        return (\n          <NativeDirectionalScrollView {...props} ref={this._setNativeRef}>\n            {refreshControl}\n            {contentContainer}\n          </NativeDirectionalScrollView>\n        );\n      } else if (Platform.OS === 'android') {\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\n        // Since the ScrollView is wrapped add the style props to the\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\n        // Note: we should split props.style on the inner and outer props\n        // however, the ScrollView still needs the baseStyle to be scrollable\n        const {outer, inner} = splitLayoutProps(flattenStyle(props.style));\n        return React.cloneElement(\n          refreshControl,\n          {style: StyleSheet.compose(baseStyle, outer)},\n          <NativeDirectionalScrollView\n            {...props}\n            style={StyleSheet.compose(baseStyle, inner)}\n            ref={this._setNativeRef}>\n            {contentContainer}\n          </NativeDirectionalScrollView>,\n        );\n      }\n    }\n    return (\n      <NativeDirectionalScrollView {...props} ref={this._setNativeRef}>\n        {contentContainer}\n      </NativeDirectionalScrollView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll',\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll',\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row',\n  },\n});\n\nfunction Wrapper(props, ref) {\n  return <ScrollView {...props} scrollViewRef={ref} />;\n}\nWrapper.displayName = 'ScrollView';\nconst ForwardedScrollView = React.forwardRef(Wrapper);\n\n// $FlowFixMe[prop-missing] Add static context to ForwardedScrollView\nForwardedScrollView.Context = ScrollViewContext;\n\nForwardedScrollView.displayName = 'ScrollView';\n\nmodule.exports = ((ForwardedScrollView: $FlowFixMe): React.AbstractComponent<\n  React.ElementConfig<typeof ScrollView>,\n  $ReadOnly<{|\n    ...$Exact<React.ElementRef<HostComponent<mixed>>>,\n    ...ScrollViewImperativeMethods,\n  |}>,\n> &\n  ScrollViewComponentStatics);\n"],"mappings":"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"}