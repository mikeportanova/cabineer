61e21c3c3c35010159676cf5c1c36ba7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _VirtualizeUtils = require("./VirtualizeUtils");

var React = _interopRequireWildcard(require("react"));

var _VirtualizedListContext = require("./VirtualizedListContext.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var Batchinator = require("../Interaction/Batchinator");

var FillRateHelper = require("./FillRateHelper");

var ReactNative = require("../Renderer/shims/ReactNative");

var RefreshControl = require("../Components/RefreshControl/RefreshControl");

var ScrollView = require("../Components/ScrollView/ScrollView");

var StyleSheet = require("../StyleSheet/StyleSheet");

var View = require("../Components/View/View");

var ViewabilityHelper = require("./ViewabilityHelper");

var flattenStyle = require("../StyleSheet/flattenStyle");

var infoLog = require("../Utilities/infoLog");

var invariant = require('invariant');

var _usedIndexForKey = false;
var _keylessItemComponentName = '';

function horizontalOrDefault(horizontal) {
  return horizontal != null ? horizontal : false;
}

function initialNumToRenderOrDefault(initialNumToRender) {
  return initialNumToRender != null ? initialNumToRender : 10;
}

function maxToRenderPerBatchOrDefault(maxToRenderPerBatch) {
  return maxToRenderPerBatch != null ? maxToRenderPerBatch : 10;
}

function onEndReachedThresholdOrDefault(onEndReachedThreshold) {
  return onEndReachedThreshold != null ? onEndReachedThreshold : 2;
}

function scrollEventThrottleOrDefault(scrollEventThrottle) {
  return scrollEventThrottle != null ? scrollEventThrottle : 50;
}

function windowSizeOrDefault(windowSize) {
  return windowSize != null ? windowSize : 21;
}

var VirtualizedList = function (_React$PureComponent) {
  (0, _inherits2.default)(VirtualizedList, _React$PureComponent);

  var _super = _createSuper(VirtualizedList);

  function VirtualizedList(_props) {
    var _this$props$updateCel;

    var _this;

    (0, _classCallCheck2.default)(this, VirtualizedList);
    _this = _super.call(this, _props);

    _this._getScrollMetrics = function () {
      return _this._scrollMetrics;
    };

    _this._getOutermostParentListRef = function () {
      if (_this._isNestedWithSameOrientation()) {
        return _this.context.getOutermostParentListRef();
      } else {
        return (0, _assertThisInitialized2.default)(_this);
      }
    };

    _this._getNestedChildState = function (key) {
      var existingChildData = _this._nestedChildLists.get(key);

      return existingChildData && existingChildData.state;
    };

    _this._registerAsNestedChild = function (childList) {
      var childListsInCell = _this._cellKeysToChildListKeys.get(childList.cellKey) || new Set();
      childListsInCell.add(childList.key);

      _this._cellKeysToChildListKeys.set(childList.cellKey, childListsInCell);

      var existingChildData = _this._nestedChildLists.get(childList.key);

      if (existingChildData && existingChildData.ref !== null) {
        console.error('A VirtualizedList contains a cell which itself contains ' + 'more than one VirtualizedList of the same orientation as the parent ' + 'list. You must pass a unique listKey prop to each sibling list.\n\n' + describeNestedLists(Object.assign({}, childList, {
          horizontal: !!childList.ref.props.horizontal
        })));
      }

      _this._nestedChildLists.set(childList.key, {
        ref: childList.ref,
        state: null
      });

      if (_this._hasInteracted) {
        childList.ref.recordInteraction();
      }
    };

    _this._unregisterAsNestedChild = function (childList) {
      _this._nestedChildLists.set(childList.key, {
        ref: null,
        state: childList.state
      });
    };

    _this._onUpdateSeparators = function (keys, newProps) {
      keys.forEach(function (key) {
        var ref = key != null && _this._cellRefs[key];
        ref && ref.updateSeparatorProps(newProps);
      });
    };

    _this._getSpacerKey = function (isVertical) {
      return isVertical ? 'height' : 'width';
    };

    _this._averageCellLength = 0;
    _this._cellKeysToChildListKeys = new Map();
    _this._cellRefs = {};
    _this._frames = {};
    _this._footerLength = 0;
    _this._hasDoneInitialScroll = false;
    _this._hasInteracted = false;
    _this._hasMore = false;
    _this._hasWarned = {};
    _this._headerLength = 0;
    _this._hiPriInProgress = false;
    _this._highestMeasuredFrameIndex = 0;
    _this._indicesToKeys = new Map();
    _this._nestedChildLists = new Map();
    _this._offsetFromParentVirtualizedList = 0;
    _this._prevParentOffset = 0;
    _this._scrollMetrics = {
      contentLength: 0,
      dOffset: 0,
      dt: 10,
      offset: 0,
      timestamp: 0,
      velocity: 0,
      visibleLength: 0
    };
    _this._scrollRef = null;
    _this._sentEndForContentLength = 0;
    _this._totalCellLength = 0;
    _this._totalCellsMeasured = 0;
    _this._viewabilityTuples = [];

    _this._captureScrollRef = function (ref) {
      _this._scrollRef = ref;
    };

    _this._defaultRenderScrollComponent = function (props) {
      var onRefresh = props.onRefresh;

      if (_this._isNestedWithSameOrientation()) {
        return React.createElement(View, props);
      } else if (onRefresh) {
        var _props$refreshing;

        invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify((_props$refreshing = props.refreshing) != null ? _props$refreshing : 'undefined') + '`');
        return React.createElement(ScrollView, (0, _extends2.default)({}, props, {
          refreshControl: props.refreshControl == null ? React.createElement(RefreshControl, {
            refreshing: props.refreshing,
            onRefresh: onRefresh,
            progressViewOffset: props.progressViewOffset
          }) : props.refreshControl
        }));
      } else {
        return React.createElement(ScrollView, props);
      }
    };

    _this._onCellLayout = function (e, cellKey, index) {
      var layout = e.nativeEvent.layout;
      var next = {
        offset: _this._selectOffset(layout),
        length: _this._selectLength(layout),
        index: index,
        inLayout: true
      };
      var curr = _this._frames[cellKey];

      if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
        _this._totalCellLength += next.length - (curr ? curr.length : 0);
        _this._totalCellsMeasured += curr ? 0 : 1;
        _this._averageCellLength = _this._totalCellLength / _this._totalCellsMeasured;
        _this._frames[cellKey] = next;
        _this._highestMeasuredFrameIndex = Math.max(_this._highestMeasuredFrameIndex, index);

        _this._scheduleCellsToRenderUpdate();
      } else {
        _this._frames[cellKey].inLayout = true;
      }

      _this._triggerRemeasureForChildListsInCell(cellKey);

      _this._computeBlankness();

      _this._updateViewableItems(_this.props.data);
    };

    _this._onCellUnmount = function (cellKey) {
      var curr = _this._frames[cellKey];

      if (curr) {
        _this._frames[cellKey] = Object.assign({}, curr, {
          inLayout: false
        });
      }
    };

    _this._onLayout = function (e) {
      if (_this._isNestedWithSameOrientation()) {
        _this.measureLayoutRelativeToContainingList();
      } else {
        _this._scrollMetrics.visibleLength = _this._selectLength(e.nativeEvent.layout);
      }

      _this.props.onLayout && _this.props.onLayout(e);

      _this._scheduleCellsToRenderUpdate();

      _this._maybeCallOnEndReached();
    };

    _this._onLayoutEmpty = function (e) {
      _this.props.onLayout && _this.props.onLayout(e);
    };

    _this._onLayoutFooter = function (e) {
      _this._triggerRemeasureForChildListsInCell(_this._getFooterCellKey());

      _this._footerLength = _this._selectLength(e.nativeEvent.layout);
    };

    _this._onLayoutHeader = function (e) {
      _this._headerLength = _this._selectLength(e.nativeEvent.layout);
    };

    _this._onContentSizeChange = function (width, height) {
      if (width > 0 && height > 0 && _this.props.initialScrollIndex != null && _this.props.initialScrollIndex > 0 && !_this._hasDoneInitialScroll) {
        if (_this.props.contentOffset == null) {
          _this.scrollToIndex({
            animated: false,
            index: _this.props.initialScrollIndex
          });
        }

        _this._hasDoneInitialScroll = true;
      }

      if (_this.props.onContentSizeChange) {
        _this.props.onContentSizeChange(width, height);
      }

      _this._scrollMetrics.contentLength = _this._selectLength({
        height: height,
        width: width
      });

      _this._scheduleCellsToRenderUpdate();

      _this._maybeCallOnEndReached();
    };

    _this._convertParentScrollMetrics = function (metrics) {
      var offset = metrics.offset - _this._offsetFromParentVirtualizedList;
      var visibleLength = metrics.visibleLength;
      var dOffset = offset - _this._scrollMetrics.offset;
      var contentLength = _this._scrollMetrics.contentLength;
      return {
        visibleLength: visibleLength,
        contentLength: contentLength,
        offset: offset,
        dOffset: dOffset
      };
    };

    _this._onScroll = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScroll(e);
      });

      if (_this.props.onScroll) {
        _this.props.onScroll(e);
      }

      var timestamp = e.timeStamp;

      var visibleLength = _this._selectLength(e.nativeEvent.layoutMeasurement);

      var contentLength = _this._selectLength(e.nativeEvent.contentSize);

      var offset = _this._selectOffset(e.nativeEvent.contentOffset);

      var dOffset = offset - _this._scrollMetrics.offset;

      if (_this._isNestedWithSameOrientation()) {
        if (_this._scrollMetrics.contentLength === 0) {
          return;
        }

        var _this$_convertParentS = _this._convertParentScrollMetrics({
          visibleLength: visibleLength,
          offset: offset
        });

        visibleLength = _this$_convertParentS.visibleLength;
        contentLength = _this$_convertParentS.contentLength;
        offset = _this$_convertParentS.offset;
        dOffset = _this$_convertParentS.dOffset;
      }

      var dt = _this._scrollMetrics.timestamp ? Math.max(1, timestamp - _this._scrollMetrics.timestamp) : 1;
      var velocity = dOffset / dt;

      if (dt > 500 && _this._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this._hasWarned.perf) {
        infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', {
          dt: dt,
          prevDt: _this._scrollMetrics.dt,
          contentLength: contentLength
        });
        _this._hasWarned.perf = true;
      }

      _this._scrollMetrics = {
        contentLength: contentLength,
        dt: dt,
        dOffset: dOffset,
        offset: offset,
        timestamp: timestamp,
        velocity: velocity,
        visibleLength: visibleLength
      };

      _this._updateViewableItems(_this.props.data);

      if (!_this.props) {
        return;
      }

      _this._maybeCallOnEndReached();

      if (velocity !== 0) {
        _this._fillRateHelper.activate();
      }

      _this._computeBlankness();

      _this._scheduleCellsToRenderUpdate();
    };

    _this._onScrollBeginDrag = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScrollBeginDrag(e);
      });

      _this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.recordInteraction();
      });

      _this._hasInteracted = true;
      _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);
    };

    _this._onScrollEndDrag = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onScrollEndDrag(e);
      });

      var velocity = e.nativeEvent.velocity;

      if (velocity) {
        _this._scrollMetrics.velocity = _this._selectOffset(velocity);
      }

      _this._computeBlankness();

      _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);
    };

    _this._onMomentumScrollBegin = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onMomentumScrollBegin(e);
      });

      _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);
    };

    _this._onMomentumScrollEnd = function (e) {
      _this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref._onMomentumScrollEnd(e);
      });

      _this._scrollMetrics.velocity = 0;

      _this._computeBlankness();

      _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);
    };

    _this._updateCellsToRender = function () {
      var _this$props = _this.props,
          data = _this$props.data,
          getItemCount = _this$props.getItemCount,
          _onEndReachedThreshold = _this$props.onEndReachedThreshold;
      var onEndReachedThreshold = onEndReachedThresholdOrDefault(_onEndReachedThreshold);

      var isVirtualizationDisabled = _this._isVirtualizationDisabled();

      _this._updateViewableItems(data);

      if (!data) {
        return;
      }

      _this.setState(function (state) {
        var newState;
        var _this$_scrollMetrics = _this._scrollMetrics,
            contentLength = _this$_scrollMetrics.contentLength,
            offset = _this$_scrollMetrics.offset,
            visibleLength = _this$_scrollMetrics.visibleLength;

        if (!isVirtualizationDisabled) {
          if (visibleLength > 0 && contentLength > 0) {
            if (!_this.props.initialScrollIndex || _this._hasDoneInitialScroll) {
              newState = (0, _VirtualizeUtils.computeWindowedRenderLimits)(_this.props.data, _this.props.getItemCount, maxToRenderPerBatchOrDefault(_this.props.maxToRenderPerBatch), windowSizeOrDefault(_this.props.windowSize), state, _this.__getFrameMetricsApprox, _this._scrollMetrics);
            }
          }
        } else {
          var distanceFromEnd = contentLength - visibleLength - offset;
          var renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ? maxToRenderPerBatchOrDefault(_this.props.maxToRenderPerBatch) : 0;
          newState = {
            first: 0,
            last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
          };
        }

        if (newState && _this._nestedChildLists.size > 0) {
          var newFirst = newState.first;
          var newLast = newState.last;

          for (var ii = newFirst; ii <= newLast; ii++) {
            var cellKeyForIndex = _this._indicesToKeys.get(ii);

            var childListKeys = cellKeyForIndex && _this._cellKeysToChildListKeys.get(cellKeyForIndex);

            if (!childListKeys) {
              continue;
            }

            var someChildHasMore = false;

            for (var childKey of childListKeys) {
              var childList = _this._nestedChildLists.get(childKey);

              if (childList && childList.ref && childList.ref.hasMore()) {
                someChildHasMore = true;
                break;
              }
            }

            if (someChildHasMore) {
              newState.last = ii;
              break;
            }
          }
        }

        if (newState != null && newState.first === state.first && newState.last === state.last) {
          newState = null;
        }

        return newState;
      });
    };

    _this._createViewToken = function (index, isViewable) {
      var _this$props2 = _this.props,
          data = _this$props2.data,
          getItem = _this$props2.getItem;
      var item = getItem(data, index);
      return {
        index: index,
        item: item,
        key: _this._keyExtractor(item, index),
        isViewable: isViewable
      };
    };

    _this.__getFrameMetricsApprox = function (index) {
      var frame = _this._getFrameMetrics(index);

      if (frame && frame.index === index) {
        return frame;
      } else {
        var getItemLayout = _this.props.getItemLayout;
        invariant(!getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
        return {
          length: _this._averageCellLength,
          offset: _this._averageCellLength * index
        };
      }
    };

    _this._getFrameMetrics = function (index) {
      var _this$props3 = _this.props,
          data = _this$props3.data,
          getItem = _this$props3.getItem,
          getItemCount = _this$props3.getItemCount,
          getItemLayout = _this$props3.getItemLayout;
      invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
      var item = getItem(data, index);

      var frame = item && _this._frames[_this._keyExtractor(item, index)];

      if (!frame || frame.index !== index) {
        if (getItemLayout) {
          frame = getItemLayout(data, index);
        }
      }

      return frame;
    };

    invariant(!_props.onScroll || !_props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
    invariant(windowSizeOrDefault(_props.windowSize) > 0, 'VirtualizedList: The windowSize prop must be present and set to a value greater than 0.');
    _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
    _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, (_this$props$updateCel = _this.props.updateCellsBatchingPeriod) != null ? _this$props$updateCel : 50);

    if (_this.props.viewabilityConfigCallbackPairs) {
      _this._viewabilityTuples = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {
        return {
          viewabilityHelper: new ViewabilityHelper(pair.viewabilityConfig),
          onViewableItemsChanged: pair.onViewableItemsChanged
        };
      });
    } else {
      var _this$props4 = _this.props,
          onViewableItemsChanged = _this$props4.onViewableItemsChanged,
          viewabilityConfig = _this$props4.viewabilityConfig;

      if (onViewableItemsChanged) {
        _this._viewabilityTuples.push({
          viewabilityHelper: new ViewabilityHelper(viewabilityConfig),
          onViewableItemsChanged: onViewableItemsChanged
        });
      }
    }

    var initialState = {
      first: _this.props.initialScrollIndex || 0,
      last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + initialNumToRenderOrDefault(_this.props.initialNumToRender)) - 1
    };

    if (_this._isNestedWithSameOrientation()) {
      var storedState = _this.context.getNestedChildState(_this._getListKey());

      if (storedState) {
        initialState = storedState;
        _this.state = storedState;
        _this._frames = storedState.frames;
      }
    }

    _this.state = initialState;
    return _this;
  }

  (0, _createClass2.default)(VirtualizedList, [{
    key: "scrollToEnd",
    value: function scrollToEnd(params) {
      var animated = params ? params.animated : true;
      var veryLast = this.props.getItemCount(this.props.data) - 1;

      var frame = this.__getFrameMetricsApprox(veryLast);

      var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);

      if (this._scrollRef == null) {
        return;
      }

      if (this._scrollRef.scrollTo == null) {
        console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
        return;
      }

      this._scrollRef.scrollTo(horizontalOrDefault(this.props.horizontal) ? {
        x: offset,
        animated: animated
      } : {
        y: offset,
        animated: animated
      });
    }
  }, {
    key: "scrollToIndex",
    value: function scrollToIndex(params) {
      var _this$props5 = this.props,
          data = _this$props5.data,
          horizontal = _this$props5.horizontal,
          getItemCount = _this$props5.getItemCount,
          getItemLayout = _this$props5.getItemLayout,
          onScrollToIndexFailed = _this$props5.onScrollToIndexFailed;
      var animated = params.animated,
          index = params.index,
          viewOffset = params.viewOffset,
          viewPosition = params.viewPosition;
      invariant(index >= 0, "scrollToIndex out of range: requested index " + index + " but minimum is 0");
      invariant(getItemCount(data) >= 1, "scrollToIndex out of range: item length " + getItemCount(data) + " but minimum is 1");
      invariant(index < getItemCount(data), "scrollToIndex out of range: requested index " + index + " is out of 0 to " + (getItemCount(data) - 1));

      if (!getItemLayout && index > this._highestMeasuredFrameIndex) {
        invariant(!!onScrollToIndexFailed, 'scrollToIndex should be used in conjunction with getItemLayout or onScrollToIndexFailed, ' + 'otherwise there is no way to know the location of offscreen indices or handle failures.');
        onScrollToIndexFailed({
          averageItemLength: this._averageCellLength,
          highestMeasuredFrameIndex: this._highestMeasuredFrameIndex,
          index: index
        });
        return;
      }

      var frame = this.__getFrameMetricsApprox(index);

      var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);

      if (this._scrollRef == null) {
        return;
      }

      if (this._scrollRef.scrollTo == null) {
        console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
        return;
      }

      this._scrollRef.scrollTo(horizontal ? {
        x: offset,
        animated: animated
      } : {
        y: offset,
        animated: animated
      });
    }
  }, {
    key: "scrollToItem",
    value: function scrollToItem(params) {
      var item = params.item;
      var _this$props6 = this.props,
          data = _this$props6.data,
          getItem = _this$props6.getItem,
          getItemCount = _this$props6.getItemCount;
      var itemCount = getItemCount(data);

      for (var _index = 0; _index < itemCount; _index++) {
        if (getItem(data, _index) === item) {
          this.scrollToIndex(Object.assign({}, params, {
            index: _index
          }));
          break;
        }
      }
    }
  }, {
    key: "scrollToOffset",
    value: function scrollToOffset(params) {
      var animated = params.animated,
          offset = params.offset;

      if (this._scrollRef == null) {
        return;
      }

      if (this._scrollRef.scrollTo == null) {
        console.warn('No scrollTo method provided. This may be because you have two nested ' + 'VirtualizedLists with the same orientation, or because you are ' + 'using a custom component that does not implement scrollTo.');
        return;
      }

      this._scrollRef.scrollTo(horizontalOrDefault(this.props.horizontal) ? {
        x: offset,
        animated: animated
      } : {
        y: offset,
        animated: animated
      });
    }
  }, {
    key: "recordInteraction",
    value: function recordInteraction() {
      this._nestedChildLists.forEach(function (childList) {
        childList.ref && childList.ref.recordInteraction();
      });

      this._viewabilityTuples.forEach(function (t) {
        t.viewabilityHelper.recordInteraction();
      });

      this._updateViewableItems(this.props.data);
    }
  }, {
    key: "flashScrollIndicators",
    value: function flashScrollIndicators() {
      if (this._scrollRef == null) {
        return;
      }

      this._scrollRef.flashScrollIndicators();
    }
  }, {
    key: "getScrollResponder",
    value: function getScrollResponder() {
      if (this._scrollRef && this._scrollRef.getScrollResponder) {
        return this._scrollRef.getScrollResponder();
      }
    }
  }, {
    key: "getScrollableNode",
    value: function getScrollableNode() {
      if (this._scrollRef && this._scrollRef.getScrollableNode) {
        return this._scrollRef.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollRef);
      }
    }
  }, {
    key: "getScrollRef",
    value: function getScrollRef() {
      if (this._scrollRef && this._scrollRef.getScrollRef) {
        return this._scrollRef.getScrollRef();
      } else {
        return this._scrollRef;
      }
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps(props) {
      if (this._scrollRef) {
        this._scrollRef.setNativeProps(props);
      }
    }
  }, {
    key: "_getCellKey",
    value: function _getCellKey() {
      var _this$context;

      return ((_this$context = this.context) == null ? void 0 : _this$context.cellKey) || 'rootList';
    }
  }, {
    key: "_getListKey",
    value: function _getListKey() {
      return this.props.listKey || this._getCellKey();
    }
  }, {
    key: "_getDebugInfo",
    value: function _getDebugInfo() {
      var _this$context2;

      return {
        listKey: this._getListKey(),
        cellKey: this._getCellKey(),
        horizontal: horizontalOrDefault(this.props.horizontal),
        parent: (_this$context2 = this.context) == null ? void 0 : _this$context2.debugInfo
      };
    }
  }, {
    key: "hasMore",
    value: function hasMore() {
      return this._hasMore;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this._isNestedWithSameOrientation()) {
        this.context.registerAsNestedChild({
          cellKey: this._getCellKey(),
          key: this._getListKey(),
          ref: this,
          parentDebugInfo: this.context.debugInfo
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._isNestedWithSameOrientation()) {
        this.context.unregisterAsNestedChild({
          key: this._getListKey(),
          state: {
            first: this.state.first,
            last: this.state.last,
            frames: this._frames
          }
        });
      }

      this._updateViewableItems(null);

      this._updateCellsToRenderBatcher.dispose({
        abort: true
      });

      this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.dispose();
      });

      this._fillRateHelper.deactivateAndFlush();
    }
  }, {
    key: "_pushCells",
    value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
      var _this2 = this;

      var _this$props7 = this.props,
          CellRendererComponent = _this$props7.CellRendererComponent,
          ItemSeparatorComponent = _this$props7.ItemSeparatorComponent,
          ListHeaderComponent = _this$props7.ListHeaderComponent,
          ListItemComponent = _this$props7.ListItemComponent,
          data = _this$props7.data,
          debug = _this$props7.debug,
          getItem = _this$props7.getItem,
          getItemCount = _this$props7.getItemCount,
          getItemLayout = _this$props7.getItemLayout,
          horizontal = _this$props7.horizontal,
          renderItem = _this$props7.renderItem;
      var stickyOffset = ListHeaderComponent ? 1 : 0;
      var end = getItemCount(data) - 1;
      var prevCellKey;
      last = Math.min(end, last);

      var _loop = function _loop(ii) {
        var item = getItem(data, ii);

        var key = _this2._keyExtractor(item, ii);

        _this2._indicesToKeys.set(ii, key);

        if (stickyIndicesFromProps.has(ii + stickyOffset)) {
          stickyHeaderIndices.push(cells.length);
        }

        cells.push(React.createElement(CellRenderer, {
          CellRendererComponent: CellRendererComponent,
          ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
          ListItemComponent: ListItemComponent,
          cellKey: key,
          debug: debug,
          fillRateHelper: _this2._fillRateHelper,
          getItemLayout: getItemLayout,
          horizontal: horizontal,
          index: ii,
          inversionStyle: inversionStyle,
          item: item,
          key: key,
          prevCellKey: prevCellKey,
          onCellLayout: _this2._onCellLayout,
          onUpdateSeparators: _this2._onUpdateSeparators,
          onUnmount: _this2._onCellUnmount,
          ref: function ref(_ref) {
            _this2._cellRefs[key] = _ref;
          },
          renderItem: renderItem
        }));
        prevCellKey = key;
      };

      for (var ii = first; ii <= last; ii++) {
        _loop(ii);
      }
    }
  }, {
    key: "_isVirtualizationDisabled",
    value: function _isVirtualizationDisabled() {
      return this.props.disableVirtualization || false;
    }
  }, {
    key: "_isNestedWithSameOrientation",
    value: function _isNestedWithSameOrientation() {
      var nestedContext = this.context;
      return !!(nestedContext && !!nestedContext.horizontal === horizontalOrDefault(this.props.horizontal));
    }
  }, {
    key: "_keyExtractor",
    value: function _keyExtractor(item, index) {
      if (this.props.keyExtractor != null) {
        return this.props.keyExtractor(item, index);
      }

      var key = (0, _VirtualizeUtils.keyExtractor)(item, index);

      if (key === String(index)) {
        _usedIndexForKey = true;

        if (item.type && item.type.displayName) {
          _keylessItemComponentName = item.type.displayName;
        }
      }

      return key;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      if (__DEV__) {
        var flatStyles = flattenStyle(this.props.contentContainerStyle);

        if (flatStyles != null && flatStyles.flexWrap === 'wrap') {
          console.warn('`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
        }
      }

      var _this$props8 = this.props,
          ListEmptyComponent = _this$props8.ListEmptyComponent,
          ListFooterComponent = _this$props8.ListFooterComponent,
          ListHeaderComponent = _this$props8.ListHeaderComponent;
      var _this$props9 = this.props,
          data = _this$props9.data,
          horizontal = _this$props9.horizontal;

      var isVirtualizationDisabled = this._isVirtualizationDisabled();

      var inversionStyle = this.props.inverted ? horizontalOrDefault(this.props.horizontal) ? styles.horizontallyInverted : styles.verticallyInverted : null;
      var cells = [];
      var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
      var stickyHeaderIndices = [];

      if (ListHeaderComponent) {
        if (stickyIndicesFromProps.has(0)) {
          stickyHeaderIndices.push(0);
        }

        var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, null);
        cells.push(React.createElement(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getCellKey() + '-header',
          key: "$header"
        }, React.createElement(View, {
          onLayout: this._onLayoutHeader,
          style: StyleSheet.compose(inversionStyle, this.props.ListHeaderComponentStyle)
        }, element)));
      }

      var itemCount = this.props.getItemCount(data);

      if (itemCount > 0) {
        _usedIndexForKey = false;
        _keylessItemComponentName = '';

        var spacerKey = this._getSpacerKey(!horizontal);

        var lastInitialIndex = this.props.initialScrollIndex ? -1 : initialNumToRenderOrDefault(this.props.initialNumToRender) - 1;
        var _this$state = this.state,
            first = _this$state.first,
            last = _this$state.last;

        this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);

        var firstAfterInitial = Math.max(lastInitialIndex + 1, first);

        if (!isVirtualizationDisabled && first > lastInitialIndex + 1) {
          var insertedStickySpacer = false;

          if (stickyIndicesFromProps.size > 0) {
            var stickyOffset = ListHeaderComponent ? 1 : 0;

            for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
              if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                var initBlock = this.__getFrameMetricsApprox(lastInitialIndex);

                var stickyBlock = this.__getFrameMetricsApprox(ii);

                var leadSpace = stickyBlock.offset - initBlock.offset - (this.props.initialScrollIndex ? 0 : initBlock.length);
                cells.push(React.createElement(View, {
                  key: "$sticky_lead",
                  style: (0, _defineProperty2.default)({}, spacerKey, leadSpace)
                }));

                this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);

                var trailSpace = this.__getFrameMetricsApprox(first).offset - (stickyBlock.offset + stickyBlock.length);
                cells.push(React.createElement(View, {
                  key: "$sticky_trail",
                  style: (0, _defineProperty2.default)({}, spacerKey, trailSpace)
                }));
                insertedStickySpacer = true;
                break;
              }
            }
          }

          if (!insertedStickySpacer) {
            var _initBlock = this.__getFrameMetricsApprox(lastInitialIndex);

            var firstSpace = this.__getFrameMetricsApprox(first).offset - (_initBlock.offset + _initBlock.length);

            cells.push(React.createElement(View, {
              key: "$lead_spacer",
              style: (0, _defineProperty2.default)({}, spacerKey, firstSpace)
            }));
          }
        }

        this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, last, inversionStyle);

        if (!this._hasWarned.keys && _usedIndexForKey) {
          console.warn('VirtualizedList: missing keys for items, make sure to specify a key or id property on each ' + 'item or provide a custom keyExtractor.', _keylessItemComponentName);
          this._hasWarned.keys = true;
        }

        if (!isVirtualizationDisabled && last < itemCount - 1) {
          var lastFrame = this.__getFrameMetricsApprox(last);

          var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);

          var endFrame = this.__getFrameMetricsApprox(end);

          var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
          cells.push(React.createElement(View, {
            key: "$tail_spacer",
            style: (0, _defineProperty2.default)({}, spacerKey, tailSpacerLength)
          }));
        }
      } else if (ListEmptyComponent) {
        var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, null);

        cells.push(React.cloneElement(_element, {
          key: '$empty',
          onLayout: function onLayout(event) {
            _this3._onLayoutEmpty(event);

            if (_element.props.onLayout) {
              _element.props.onLayout(event);
            }
          },
          style: StyleSheet.compose(inversionStyle, _element.props.style)
        }));
      }

      if (ListFooterComponent) {
        var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, null);

        cells.push(React.createElement(_VirtualizedListContext.VirtualizedListCellContextProvider, {
          cellKey: this._getFooterCellKey(),
          key: "$footer"
        }, React.createElement(View, {
          onLayout: this._onLayoutFooter,
          style: StyleSheet.compose(inversionStyle, this.props.ListFooterComponentStyle)
        }, _element2)));
      }

      var scrollProps = Object.assign({}, this.props, {
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        onScroll: this._onScroll,
        onScrollBeginDrag: this._onScrollBeginDrag,
        onScrollEndDrag: this._onScrollEndDrag,
        onMomentumScrollBegin: this._onMomentumScrollBegin,
        onMomentumScrollEnd: this._onMomentumScrollEnd,
        scrollEventThrottle: scrollEventThrottleOrDefault(this.props.scrollEventThrottle),
        invertStickyHeaders: this.props.invertStickyHeaders !== undefined ? this.props.invertStickyHeaders : this.props.inverted,
        stickyHeaderIndices: stickyHeaderIndices,
        style: inversionStyle ? [inversionStyle, this.props.style] : this.props.style
      });
      this._hasMore = this.state.last < this.props.getItemCount(this.props.data) - 1;
      var innerRet = React.createElement(_VirtualizedListContext.VirtualizedListContextProvider, {
        value: {
          cellKey: null,
          getScrollMetrics: this._getScrollMetrics,
          horizontal: horizontalOrDefault(this.props.horizontal),
          getOutermostParentListRef: this._getOutermostParentListRef,
          getNestedChildState: this._getNestedChildState,
          registerAsNestedChild: this._registerAsNestedChild,
          unregisterAsNestedChild: this._unregisterAsNestedChild,
          debugInfo: this._getDebugInfo()
        }
      }, React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
        ref: this._captureScrollRef
      }, cells));
      var ret = innerRet;

      if (__DEV__) {
        ret = React.createElement(ScrollView.Context.Consumer, null, function (scrollContext) {
          if (scrollContext != null && !scrollContext.horizontal === !horizontalOrDefault(_this3.props.horizontal) && !_this3._hasWarned.nesting && _this3.context == null) {
            console.error('VirtualizedLists should never be nested inside plain ScrollViews with the same ' + 'orientation because it can break windowing and other functionality - use another ' + 'VirtualizedList-backed container instead.');
            _this3._hasWarned.nesting = true;
          }

          return innerRet;
        });
      }

      if (this.props.debug) {
        return React.createElement(View, {
          style: styles.debug
        }, ret, this._renderDebugOverlay());
      } else {
        return ret;
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props10 = this.props,
          data = _this$props10.data,
          extraData = _this$props10.extraData;

      if (data !== prevProps.data || extraData !== prevProps.extraData) {
        this._viewabilityTuples.forEach(function (tuple) {
          tuple.viewabilityHelper.resetViewableIndices();
        });
      }

      var hiPriInProgress = this._hiPriInProgress;

      this._scheduleCellsToRenderUpdate();

      if (hiPriInProgress) {
        this._hiPriInProgress = false;
      }
    }
  }, {
    key: "_computeBlankness",
    value: function _computeBlankness() {
      this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
    }
  }, {
    key: "_triggerRemeasureForChildListsInCell",
    value: function _triggerRemeasureForChildListsInCell(cellKey) {
      var childListKeys = this._cellKeysToChildListKeys.get(cellKey);

      if (childListKeys) {
        for (var childKey of childListKeys) {
          var childList = this._nestedChildLists.get(childKey);

          childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
        }
      }
    }
  }, {
    key: "measureLayoutRelativeToContainingList",
    value: function measureLayoutRelativeToContainingList() {
      var _this4 = this;

      try {
        if (!this._scrollRef) {
          return;
        }

        this._scrollRef.measureLayout(this.context.getOutermostParentListRef().getScrollRef(), function (x, y, width, height) {
          _this4._offsetFromParentVirtualizedList = _this4._selectOffset({
            x: x,
            y: y
          });
          _this4._scrollMetrics.contentLength = _this4._selectLength({
            width: width,
            height: height
          });

          var scrollMetrics = _this4._convertParentScrollMetrics(_this4.context.getScrollMetrics());

          var metricsChanged = _this4._scrollMetrics.visibleLength !== scrollMetrics.visibleLength || _this4._scrollMetrics.offset !== scrollMetrics.offset;

          if (metricsChanged) {
            _this4._scrollMetrics.visibleLength = scrollMetrics.visibleLength;
            _this4._scrollMetrics.offset = scrollMetrics.offset;

            _this4._cellKeysToChildListKeys.forEach(function (childListKeys) {
              if (childListKeys) {
                for (var childKey of childListKeys) {
                  var childList = _this4._nestedChildLists.get(childKey);

                  childList && childList.ref && childList.ref.measureLayoutRelativeToContainingList();
                }
              }
            });
          }
        }, function (error) {
          console.warn("VirtualizedList: Encountered an error while measuring a list's" + ' offset from its containing VirtualizedList.');
        });
      } catch (error) {
        console.warn('measureLayoutRelativeToContainingList threw an error', error.stack);
      }
    }
  }, {
    key: "_getFooterCellKey",
    value: function _getFooterCellKey() {
      return this._getCellKey() + '-footer';
    }
  }, {
    key: "_renderDebugOverlay",
    value: function _renderDebugOverlay() {
      var normalize = this._scrollMetrics.visibleLength / (this._scrollMetrics.contentLength || 1);
      var framesInLayout = [];
      var itemCount = this.props.getItemCount(this.props.data);

      for (var ii = 0; ii < itemCount; ii++) {
        var frame = this.__getFrameMetricsApprox(ii);

        if (frame.inLayout) {
          framesInLayout.push(frame);
        }
      }

      var windowTop = this.__getFrameMetricsApprox(this.state.first).offset;

      var frameLast = this.__getFrameMetricsApprox(this.state.last);

      var windowLen = frameLast.offset + frameLast.length - windowTop;
      var visTop = this._scrollMetrics.offset;
      var visLen = this._scrollMetrics.visibleLength;
      return React.createElement(View, {
        style: [styles.debugOverlayBase, styles.debugOverlay]
      }, framesInLayout.map(function (f, ii) {
        return React.createElement(View, {
          key: 'f' + ii,
          style: [styles.debugOverlayBase, styles.debugOverlayFrame, {
            top: f.offset * normalize,
            height: f.length * normalize
          }]
        });
      }), React.createElement(View, {
        style: [styles.debugOverlayBase, styles.debugOverlayFrameLast, {
          top: windowTop * normalize,
          height: windowLen * normalize
        }]
      }), React.createElement(View, {
        style: [styles.debugOverlayBase, styles.debugOverlayFrameVis, {
          top: visTop * normalize,
          height: visLen * normalize
        }]
      }));
    }
  }, {
    key: "_selectLength",
    value: function _selectLength(metrics) {
      return !horizontalOrDefault(this.props.horizontal) ? metrics.height : metrics.width;
    }
  }, {
    key: "_selectOffset",
    value: function _selectOffset(metrics) {
      return !horizontalOrDefault(this.props.horizontal) ? metrics.y : metrics.x;
    }
  }, {
    key: "_maybeCallOnEndReached",
    value: function _maybeCallOnEndReached() {
      var _this$props11 = this.props,
          data = _this$props11.data,
          getItemCount = _this$props11.getItemCount,
          onEndReached = _this$props11.onEndReached,
          onEndReachedThreshold = _this$props11.onEndReachedThreshold;
      var _this$_scrollMetrics2 = this._scrollMetrics,
          contentLength = _this$_scrollMetrics2.contentLength,
          visibleLength = _this$_scrollMetrics2.visibleLength,
          offset = _this$_scrollMetrics2.offset;
      var distanceFromEnd = contentLength - visibleLength - offset;
      var threshold = onEndReachedThreshold != null ? onEndReachedThreshold * visibleLength : 2;

      if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < threshold && this._scrollMetrics.contentLength !== this._sentEndForContentLength) {
        this._sentEndForContentLength = this._scrollMetrics.contentLength;
        onEndReached({
          distanceFromEnd: distanceFromEnd
        });
      } else if (distanceFromEnd > threshold) {
        this._sentEndForContentLength = 0;
      }
    }
  }, {
    key: "_scheduleCellsToRenderUpdate",
    value: function _scheduleCellsToRenderUpdate() {
      var _this$state2 = this.state,
          first = _this$state2.first,
          last = _this$state2.last;
      var _this$_scrollMetrics3 = this._scrollMetrics,
          offset = _this$_scrollMetrics3.offset,
          visibleLength = _this$_scrollMetrics3.visibleLength,
          velocity = _this$_scrollMetrics3.velocity;
      var itemCount = this.props.getItemCount(this.props.data);
      var hiPri = false;
      var onEndReachedThreshold = onEndReachedThresholdOrDefault(this.props.onEndReachedThreshold);
      var scrollingThreshold = onEndReachedThreshold * visibleLength / 2;

      if (first > 0) {
        var distTop = offset - this.__getFrameMetricsApprox(first).offset;

        hiPri = hiPri || distTop < 0 || velocity < -2 && distTop < scrollingThreshold;
      }

      if (last < itemCount - 1) {
        var distBottom = this.__getFrameMetricsApprox(last).offset - (offset + visibleLength);
        hiPri = hiPri || distBottom < 0 || velocity > 2 && distBottom < scrollingThreshold;
      }

      if (hiPri && (this._averageCellLength || this.props.getItemLayout) && !this._hiPriInProgress) {
        this._hiPriInProgress = true;

        this._updateCellsToRenderBatcher.dispose({
          abort: true
        });

        this._updateCellsToRender();

        return;
      } else {
        this._updateCellsToRenderBatcher.schedule();
      }
    }
  }, {
    key: "_updateViewableItems",
    value: function _updateViewableItems(data) {
      var _this5 = this;

      var getItemCount = this.props.getItemCount;

      this._viewabilityTuples.forEach(function (tuple) {
        tuple.viewabilityHelper.onUpdate(getItemCount(data), _this5._scrollMetrics.offset, _this5._scrollMetrics.visibleLength, _this5._getFrameMetrics, _this5._createViewToken, tuple.onViewableItemsChanged, _this5.state);
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(newProps, prevState) {
      var data = newProps.data,
          getItemCount = newProps.getItemCount;
      var maxToRenderPerBatch = maxToRenderPerBatchOrDefault(newProps.maxToRenderPerBatch);
      return {
        first: Math.max(0, Math.min(prevState.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
        last: Math.max(0, Math.min(prevState.last, getItemCount(data) - 1))
      };
    }
  }]);
  return VirtualizedList;
}(React.PureComponent);

VirtualizedList.contextType = _VirtualizedListContext.VirtualizedListContext;

var CellRenderer = function (_React$Component) {
  (0, _inherits2.default)(CellRenderer, _React$Component);

  var _super2 = _createSuper(CellRenderer);

  function CellRenderer() {
    var _this6;

    (0, _classCallCheck2.default)(this, CellRenderer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this6 = _super2.call.apply(_super2, [this].concat(args));
    _this6.state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this6.props.item
      }
    };
    _this6._separators = {
      highlight: function highlight() {
        var _this6$props = _this6.props,
            cellKey = _this6$props.cellKey,
            prevCellKey = _this6$props.prevCellKey;

        _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: true
        });
      },
      unhighlight: function unhighlight() {
        var _this6$props2 = _this6.props,
            cellKey = _this6$props2.cellKey,
            prevCellKey = _this6$props2.prevCellKey;

        _this6.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: false
        });
      },
      updateProps: function updateProps(select, newProps) {
        var _this6$props3 = _this6.props,
            cellKey = _this6$props3.cellKey,
            prevCellKey = _this6$props3.prevCellKey;

        _this6.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
      }
    };

    _this6._onLayout = function (nativeEvent) {
      _this6.props.onCellLayout && _this6.props.onCellLayout(nativeEvent, _this6.props.cellKey, _this6.props.index);
    };

    return _this6;
  }

  (0, _createClass2.default)(CellRenderer, [{
    key: "updateSeparatorProps",
    value: function updateSeparatorProps(newProps) {
      this.setState(function (state) {
        return {
          separatorProps: Object.assign({}, state.separatorProps, newProps)
        };
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.onUnmount(this.props.cellKey);
    }
  }, {
    key: "_renderElement",
    value: function _renderElement(renderItem, ListItemComponent, item, index) {
      if (renderItem && ListItemComponent) {
        console.warn('VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' + ' precedence over renderItem.');
      }

      if (ListItemComponent) {
        return React.createElement(ListItemComponent, {
          item: item,
          index: index,
          separators: this._separators
        });
      }

      if (renderItem) {
        return renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
      }

      invariant(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props12 = this.props,
          CellRendererComponent = _this$props12.CellRendererComponent,
          ItemSeparatorComponent = _this$props12.ItemSeparatorComponent,
          ListItemComponent = _this$props12.ListItemComponent,
          debug = _this$props12.debug,
          fillRateHelper = _this$props12.fillRateHelper,
          getItemLayout = _this$props12.getItemLayout,
          horizontal = _this$props12.horizontal,
          item = _this$props12.item,
          index = _this$props12.index,
          inversionStyle = _this$props12.inversionStyle,
          renderItem = _this$props12.renderItem;

      var element = this._renderElement(renderItem, ListItemComponent, item, index);

      var onLayout = getItemLayout && !debug && !fillRateHelper.enabled() || !this.props.onCellLayout ? undefined : this._onLayout;
      var itemSeparator = ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, this.state.separatorProps);
      var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;
      var result = !CellRendererComponent ? React.createElement(View, {
        style: cellStyle,
        onLayout: onLayout
      }, element, itemSeparator) : React.createElement(CellRendererComponent, (0, _extends2.default)({}, this.props, {
        style: cellStyle,
        onLayout: onLayout
      }), element, itemSeparator);
      return React.createElement(_VirtualizedListContext.VirtualizedListCellContextProvider, {
        cellKey: this.props.cellKey
      }, result);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, prevState) {
      return {
        separatorProps: Object.assign({}, prevState.separatorProps, {
          leadingItem: props.item
        })
      };
    }
  }]);
  return CellRenderer;
}(React.Component);

function describeNestedLists(childList) {
  var trace = 'VirtualizedList trace:\n' + ("  Child (" + (childList.horizontal ? 'horizontal' : 'vertical') + "):\n") + ("    listKey: " + childList.key + "\n") + ("    cellKey: " + childList.cellKey);
  var debugInfo = childList.parentDebugInfo;

  while (debugInfo) {
    trace += "\n  Parent (" + (debugInfo.horizontal ? 'horizontal' : 'vertical') + "):\n" + ("    listKey: " + debugInfo.listKey + "\n") + ("    cellKey: " + debugInfo.cellKey);
    debugInfo = debugInfo.parent;
  }

  return trace;
}

var styles = StyleSheet.create({
  verticallyInverted: {
    transform: [{
      scaleY: -1
    }]
  },
  horizontallyInverted: {
    transform: [{
      scaleX: -1
    }]
  },
  row: {
    flexDirection: 'row'
  },
  rowReverse: {
    flexDirection: 'row-reverse'
  },
  columnReverse: {
    flexDirection: 'column-reverse'
  },
  debug: {
    flex: 1
  },
  debugOverlayBase: {
    position: 'absolute',
    top: 0,
    right: 0
  },
  debugOverlay: {
    bottom: 0,
    width: 20,
    borderColor: 'blue',
    borderWidth: 1
  },
  debugOverlayFrame: {
    left: 0,
    backgroundColor: 'orange'
  },
  debugOverlayFrameLast: {
    left: 0,
    borderColor: 'green',
    borderWidth: 2
  },
  debugOverlayFrameVis: {
    left: 0,
    borderColor: 'red',
    borderWidth: 2
  }
});
module.exports = VirtualizedList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,