9615530d43614dd7645a4abc1504f2fc
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["id", "initialRouteName", "backBehavior", "children", "screenListeners", "screenOptions", "sceneContainerStyle"],
    _excluded2 = ["lazy", "tabBarOptions"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _native = require("@react-navigation/native");

var React = _interopRequireWildcard(require("react"));

var _warnOnce = _interopRequireDefault(require("warn-once"));

var _BottomTabView = _interopRequireDefault(require("../views/BottomTabView"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function BottomTabNavigator(_ref) {
  var id = _ref.id,
      initialRouteName = _ref.initialRouteName,
      backBehavior = _ref.backBehavior,
      children = _ref.children,
      screenListeners = _ref.screenListeners,
      screenOptions = _ref.screenOptions,
      sceneContainerStyle = _ref.sceneContainerStyle,
      restWithDeprecated = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var lazy = restWithDeprecated.lazy,
      tabBarOptions = restWithDeprecated.tabBarOptions,
      rest = (0, _objectWithoutProperties2.default)(restWithDeprecated, _excluded2);
  var defaultScreenOptions = {};

  if (tabBarOptions) {
    var _tabBarOptions$labelP;

    Object.assign(defaultScreenOptions, {
      tabBarHideOnKeyboard: tabBarOptions.keyboardHidesTabBar,
      tabBarActiveTintColor: tabBarOptions.activeTintColor,
      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,
      tabBarActiveBackgroundColor: tabBarOptions.activeBackgroundColor,
      tabBarInactiveBackgroundColor: tabBarOptions.inactiveBackgroundColor,
      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,
      tabBarShowLabel: tabBarOptions.showLabel,
      tabBarLabelStyle: tabBarOptions.labelStyle,
      tabBarIconStyle: tabBarOptions.iconStyle,
      tabBarItemStyle: tabBarOptions.tabStyle,
      tabBarLabelPosition: (_tabBarOptions$labelP = tabBarOptions.labelPosition) !== null && _tabBarOptions$labelP !== void 0 ? _tabBarOptions$labelP : tabBarOptions.adaptive === false ? 'below-icon' : undefined,
      tabBarStyle: [{
        display: tabBarOptions.tabBarVisible ? 'none' : 'flex'
      }, defaultScreenOptions.tabBarStyle]
    });
    Object.keys(defaultScreenOptions).forEach(function (key) {
      if (defaultScreenOptions[key] === undefined) {
        delete defaultScreenOptions[key];
      }
    });
    (0, _warnOnce.default)(tabBarOptions, "Bottom Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\n\nPlace the following in 'screenOptions' in your code to keep current behavior:\n\n" + JSON.stringify(defaultScreenOptions, null, 2) + "\n\nSee https://reactnavigation.org/docs/bottom-tab-navigator#options for more details.");
  }

  if (typeof lazy === 'boolean') {
    defaultScreenOptions.lazy = lazy;
    (0, _warnOnce.default)(true, "Bottom Tab Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\n\nSee https://reactnavigation.org/docs/bottom-tab-navigator/#lazy for more details.");
  }

  var _ref2 = (0, _native.useNavigationBuilder)(_native.TabRouter, {
    id: id,
    initialRouteName: initialRouteName,
    backBehavior: backBehavior,
    children: children,
    screenListeners: screenListeners,
    screenOptions: screenOptions,
    defaultScreenOptions: defaultScreenOptions
  }),
      state = _ref2.state,
      descriptors = _ref2.descriptors,
      navigation = _ref2.navigation,
      NavigationContent = _ref2.NavigationContent;

  return React.createElement(NavigationContent, null, React.createElement(_BottomTabView.default, _extends({}, rest, {
    state: state,
    navigation: navigation,
    descriptors: descriptors,
    sceneContainerStyle: sceneContainerStyle
  })));
}

var _default = (0, _native.createNavigatorFactory)(BottomTabNavigator);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,