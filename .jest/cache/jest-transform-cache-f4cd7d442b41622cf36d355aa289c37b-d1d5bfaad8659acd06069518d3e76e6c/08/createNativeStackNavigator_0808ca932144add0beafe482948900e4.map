{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AAWA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,oBAAT,OAO8B;EAAA,IAN5BC,EAM4B,QAN5BA,EAM4B;EAAA,IAL5BC,gBAK4B,QAL5BA,gBAK4B;EAAA,IAJ5BC,QAI4B,QAJ5BA,QAI4B;EAAA,IAH5BC,eAG4B,QAH5BA,eAG4B;EAAA,IAF5BC,aAE4B,QAF5BA,aAE4B;EAAA,IADzBC,IACyB;;EAC5B,YACE,kCAMEC,mBANF,EAMe;IACbN,EADa,EACbA,EADa;IAEbC,gBAFa,EAEbA,gBAFa;IAGbC,QAHa,EAGbA,QAHa;IAIbC,eAJa,EAIbA,eAJa;IAKbC;EALa,CANf,CADF;EAAA,IAAQG,KAAR,SAAQA,KAAR;EAAA,IAAeC,WAAf,SAAeA,WAAf;EAAA,IAA4BC,UAA5B,SAA4BA,UAA5B;EAAA,IAAwCC,iBAAxC,SAAwCA,iBAAxC;;EAeAC,KAAK,CAACC,SAAND,CACE;IAAA;;IAAA,OAEEF,UAFF,SAEEA,cAFF,WAEEA,GAFF,MAEEA,GAFF,yBAEEA,UAAU,CAAEI,WAFd,0DAEEC,uCAA0B,UAA1B,EAAuCC,WAAD,EAAY;MAChD,IAAMC,SAAS,GAAGP,UAAU,CAACO,SAAXP,EAAlB;MAIAQ,qBAAqB,CAAC,YAAM;QAC1B,IACEV,KAAK,CAACW,KAANX,GAAc,CAAdA,IACAS,SADAT,IAEA,CAAEQ,CAAD,CAAkCI,gBAHrC,EAIE;UAGAV,UAAU,CAACW,QAAXX,mBACKY,qBAAaC,QAAbD,EADLZ;YAEEc,MAAM,EAAEhB,KAAK,CAACiB;UAFhBf;QAID;MAZkB,EAArBQ;IALQ,CAAV,CAFF;EADF,GAuBE,CAACR,UAAD,EAAaF,KAAK,CAACW,KAAnB,EAA0BX,KAAK,CAACiB,GAAhC,CAvBFb;EA0BA,OACEA,oBAACD,iBAAD,QACEC,oBAACc,wBAAD,eACMpB,IADN;IAEEE,KAAK,EAAEA,KAFT;IAGEE,UAAU,EAAEA,UAHd;IAIED,WAAW,EAAEA;EAJf,GADF,CADF;AAUD;;eAEc,oCAKbT,oBALa","names":["NativeStackNavigator","id","initialRouteName","children","screenListeners","screenOptions","rest","StackRouter","state","descriptors","navigation","NavigationContent","React","useEffect","addListener","_navigation$addListen","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","StackActions","popToTop","target","key","_NativeStackView"],"sources":["createNativeStackNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  id,\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      NativeStackNavigationOptions,\n      NativeStackNavigationEventMap\n    >(StackRouter, {\n      id,\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      // @ts-expect-error: there may not be a tab navigator in parent\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <NativeStackView\n        {...rest}\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]}