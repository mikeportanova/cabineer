{"version":3,"mappings":";;;;;;;AAAA;;AAYA,IAAMA,UAAU,GAAG;EACjBC,iBADiB,6BAEfC,KAFe,EAGfC,MAHe,EAIqB;IACpC,QAAQA,MAAM,CAACC,IAAf;MACE,KAAK,YAAL;QAAmB;UACjB,IAAMC,KAAK,GAAGF,MAAM,CAACG,MAAPH,GACVD,KAAK,CAACK,MAANL,CAAaM,SAAbN,CAAwBO,WAAD;YAAA,OAAOA,CAAC,CAACC,GAAFD,KAAUN,MAAM,CAACG,MAAxB;UAAA,CAAvBJ,CADUC,GAEVD,KAAK,CAACG,KAFV;;UAIA,IAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;YAChB,OAAO,IAAP;UACD;;UAED,yBACKH,KADL;YAEEK,MAAM,EAAEL,KAAK,CAACK,MAANL,CAAaS,GAAbT,CAAiB,UAACO,CAAD,EAAIG,CAAJ;cAAA,OACvBA,CAAC,KAAKP,KAANO,qBACSH,CADTG;gBACYC,MAAM,oBAAOJ,CAAC,CAACI,MAAT,EAAoBV,MAAM,CAACW,OAAPX,CAAeU,MAAnC;cADlBD,KAEIH,CAHmB;YAAA,CAAjBP;UAFV;QAQD;;MAED,KAAK,OAAL;QAAc;UACZ,IAAMa,SAAS,GAAGZ,MAAM,CAACW,OAAzB;;UAEA,IACEC,SAAS,CAACR,MAAVQ,CAAiBC,MAAjBD,KAA4B,CAA5BA,IACAA,SAAS,CAACR,MAAVQ,CAAiBE,IAAjBF,CACGG,eAAD;YAAA,OAA6B,CAAChB,KAAK,CAACiB,UAANjB,CAAiBkB,QAAjBlB,CAA0BgB,KAAK,CAACG,IAAhCnB,CAA9B;UAAA,CADFa,CAFF,EAKE;YACA,OAAO,IAAP;UACD;;UAED,IAAIA,SAAS,CAACO,KAAVP,KAAoB,KAAxB,EAA+B;YAC7B,IACEb,KAAK,CAACiB,UAANjB,CAAiBc,MAAjBd,KAA4Ba,SAAS,CAACI,UAAVJ,CAAqBC,MAAjDd,IACAa,SAAS,CAACI,UAAVJ,CAAqBE,IAArBF,CACGM,cAAD;cAAA,OAAU,CAACnB,KAAK,CAACiB,UAANjB,CAAiBkB,QAAjBlB,CAA0BmB,IAA1BnB,CAAX;YAAA,CADFa,CAFF,EAKE;cACA,OAAO,IAAP;YACD;;YAED,yBACKA,SADL;cAEER,MAAM,EAAEQ,SAAS,CAACR,MAAVQ,CAAiBJ,GAAjBI,CAAsBG,eAAD;gBAAA,OAC3BA,KAAK,CAACR,GAANQ,GAAYA,KAAZA,qBAAyBA,KAAzBA;kBAAgCR,GAAG,EAAKQ,KAAK,CAACG,IAAX,SAAmB;gBAAtDH,EAD2B;cAAA,CAArBH;YAFV;UAMD;;UAED,OAAOA,SAAP;QACD;;MAED;QACE,OAAO,IAAP;IAtDJ;EALe;EA+DjBQ,uBA/DiB,mCA+DOpB,MA/DP,EA+DuC;IACtD,OAAOA,MAAM,CAACC,IAAPD,KAAgB,UAAvB;EACD;AAjEgB,CAAnB;eAoEeH","names":["BaseRouter","getStateForAction","state","action","type","index","source","routes","findIndex","r","key","map","i","params","payload","nextState","length","some","route","routeNames","includes","name","stale","shouldActionChangeFocus"],"sources":["BaseRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]}