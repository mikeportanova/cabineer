{"version":3,"mappings":";;;;;;;AAAA;;AAKA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBe,SAASA,SAAT,GAEX;EACF,IAAMC,UAAU,GAAGC,KAAK,CAACC,UAAND,CAAiBE,mCAAjBF,CAAnB;EACA,IAAMG,OAAO,GAAGH,KAAK,CAACC,UAAND,CAAiBI,uBAAjBJ,CAAhB;EAEA,IAAMK,MAAM,GAAGL,KAAK,CAACM,WAANN,CACZO,YAAD,EAAuB;IACrB,IAAIR,UAAU,KAAKS,SAAnB,EAA8B;MAC5B,MAAM,IAAIC,KAAJ,CACJ,kFADI,CAAN;IAGD;;IAED,IAAI,OAAOF,EAAP,KAAc,QAAlB,EAA4B;MAE1BR,UAAU,CAACW,QAAXX,CAAoBQ,EAAE,CAACI,MAAvBZ,EAA+BQ,EAAE,CAACK,MAAlCb;MACA;IACD;;IAED,IAAI,CAACQ,EAAE,CAACM,UAAHN,CAAc,GAAdA,CAAL,EAAyB;MACvB,MAAM,IAAIE,KAAJ,oCAA2CF,EAA3C,QAAN;IACD;;IAED,IAAQO,OAAR,GAAoBX,OAApB,CAAQW,OAAR;IAEA,IAAMC,KAAK,GAAGD,OAAO,SAAPA,WAAO,WAAPA,WAAO,CAAEE,gBAATF,GACVA,OAAO,CAACE,gBAARF,CAAyBP,EAAzBO,EAA6BA,OAAO,CAACG,MAArCH,CADUA,GAEV,4BAAiBP,EAAjB,EAAqBO,OAArB,SAAqBA,WAArB,WAAqBA,GAArB,MAAqBA,UAAO,CAAEG,MAA9B,CAFJ;;IAIA,IAAIF,KAAJ,EAAW;MACT,IAAMG,MAAM,GAAG,8BAAmBH,KAAnB,EAA0BD,OAA1B,SAA0BA,WAA1B,WAA0BA,GAA1B,MAA0BA,UAAO,CAAEG,MAAnC,CAAf;;MAEA,IAAIC,MAAM,KAAKV,SAAf,EAA0B;QACxBT,UAAU,CAACoB,QAAXpB,CAAoBmB,MAApBnB;MADF,OAEO;QACLA,UAAU,CAACqB,KAAXrB,CAAiBgB,KAAjBhB;MACD;IAPH,OAQO;MACL,MAAM,IAAIU,KAAJ,CAAU,iDAAV,CAAN;IACD;EAlCU,GAoCb,CAACN,OAAD,EAAUJ,UAAV,CApCaC,CAAf;EAuCA,OAAOK,MAAP;AACD","names":["useLinkTo","navigation","React","useContext","NavigationContainerRefContext","linking","LinkingContext","linkTo","useCallback","to","undefined","Error","navigate","screen","params","startsWith","options","state","getStateFromPath","config","action","dispatch","reset"],"sources":["useLinkTo.tsx"],"sourcesContent":["import {\n  getActionFromState,\n  getStateFromPath,\n  NavigationContainerRefContext,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\nexport type To<\n  ParamList extends ReactNavigation.RootParamList = ReactNavigation.RootParamList,\n  RouteName extends keyof ParamList = keyof ParamList\n> =\n  | string\n  | (undefined extends ParamList[RouteName]\n      ? {\n          screen: Extract<RouteName, string>;\n          params?: ParamList[RouteName];\n        }\n      : {\n          screen: Extract<RouteName, string>;\n          params: ParamList[RouteName];\n        });\n\nexport default function useLinkTo<\n  ParamList extends ReactNavigation.RootParamList\n>() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (to: To<ParamList>) => {\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n        );\n      }\n\n      if (typeof to !== 'string') {\n        // @ts-expect-error: This is fine\n        navigation.navigate(to.screen, to.params);\n        return;\n      }\n\n      if (!to.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${to}).`);\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(to, options.config)\n        : getStateFromPath(to, options?.config);\n\n      if (state) {\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]}