c8b270e97de5c04151eef46d6b37cd59
'use strict';

var logListeners;

function unstable_setLogListeners(listeners) {
  logListeners = listeners;
}

var deepDiffer = function deepDiffer(one, two) {
  var maxDepthOrOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  var maybeOptions = arguments.length > 3 ? arguments[3] : undefined;
  var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
  var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;

  if (maxDepth === 0) {
    return true;
  }

  if (one === two) {
    return false;
  }

  if (typeof one === 'function' && typeof two === 'function') {
    var unsafelyIgnoreFunctions = options == null ? void 0 : options.unsafelyIgnoreFunctions;

    if (unsafelyIgnoreFunctions == null) {
      if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
        logListeners.onDifferentFunctionsIgnored(one.name, two.name);
      }

      unsafelyIgnoreFunctions = true;
    }

    return !unsafelyIgnoreFunctions;
  }

  if (typeof one !== 'object' || one === null) {
    return one !== two;
  }

  if (typeof two !== 'object' || two === null) {
    return true;
  }

  if (one.constructor !== two.constructor) {
    return true;
  }

  if (Array.isArray(one)) {
    var len = one.length;

    if (two.length !== len) {
      return true;
    }

    for (var ii = 0; ii < len; ii++) {
      if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
        return true;
      }
    }
  } else {
    for (var key in one) {
      if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
        return true;
      }
    }

    for (var twoKey in two) {
      if (one[twoKey] === undefined && two[twoKey] !== undefined) {
        return true;
      }
    }
  }

  return false;
};

module.exports = deepDiffer;
module.exports.unstable_setLogListeners = unstable_setLogListeners;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dMaXN0ZW5lcnMiLCJ1bnN0YWJsZV9zZXRMb2dMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJkZWVwRGlmZmVyIiwib25lIiwidHdvIiwibWF4RGVwdGhPck9wdGlvbnMiLCJtYXliZU9wdGlvbnMiLCJvcHRpb25zIiwibWF4RGVwdGgiLCJ1bnNhZmVseUlnbm9yZUZ1bmN0aW9ucyIsIm9uRGlmZmVyZW50RnVuY3Rpb25zSWdub3JlZCIsIm5hbWUiLCJjb25zdHJ1Y3RvciIsIkFycmF5IiwiaXNBcnJheSIsImxlbiIsImxlbmd0aCIsImlpIiwia2V5IiwidHdvS2V5IiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImRlZXBEaWZmZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5sZXQgbG9nTGlzdGVuZXJzO1xuXG50eXBlIExvZ0xpc3RlbmVycyA9IHt8XG4gICtvbkRpZmZlcmVudEZ1bmN0aW9uc0lnbm9yZWQ6IChuYW1lT25lOiA/c3RyaW5nLCBuYW1lVHdvOiA/c3RyaW5nKSA9PiB2b2lkLFxufH07XG5cbnR5cGUgT3B0aW9ucyA9IHt8K3Vuc2FmZWx5SWdub3JlRnVuY3Rpb25zPzogYm9vbGVhbnx9O1xuXG5mdW5jdGlvbiB1bnN0YWJsZV9zZXRMb2dMaXN0ZW5lcnMobGlzdGVuZXJzOiA/TG9nTGlzdGVuZXJzKSB7XG4gIGxvZ0xpc3RlbmVycyA9IGxpc3RlbmVycztcbn1cblxuLypcbiAqIEByZXR1cm5zIHtib29sfSB0cnVlIGlmIGRpZmZlcmVudCwgZmFsc2UgaWYgZXF1YWxcbiAqL1xuY29uc3QgZGVlcERpZmZlciA9IGZ1bmN0aW9uIChcbiAgb25lOiBhbnksXG4gIHR3bzogYW55LFxuICBtYXhEZXB0aE9yT3B0aW9uczogT3B0aW9ucyB8IG51bWJlciA9IC0xLFxuICBtYXliZU9wdGlvbnM/OiBPcHRpb25zLFxuKTogYm9vbGVhbiB7XG4gIGNvbnN0IG9wdGlvbnMgPVxuICAgIHR5cGVvZiBtYXhEZXB0aE9yT3B0aW9ucyA9PT0gJ251bWJlcicgPyBtYXliZU9wdGlvbnMgOiBtYXhEZXB0aE9yT3B0aW9ucztcbiAgY29uc3QgbWF4RGVwdGggPVxuICAgIHR5cGVvZiBtYXhEZXB0aE9yT3B0aW9ucyA9PT0gJ251bWJlcicgPyBtYXhEZXB0aE9yT3B0aW9ucyA6IC0xO1xuICBpZiAobWF4RGVwdGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAob25lID09PSB0d28pIHtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IG9uIGlkZW50aWNhbCBvYmplY3QgcmVmZXJlbmNlcyBpbnN0ZWFkIG9mIHRyYXZlcnNpbmcgdGhlbS5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBvbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHR3byA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFdlIGNvbnNpZGVyIGFsbCBmdW5jdGlvbnMgZXF1YWwgdW5sZXNzIGV4cGxpY2l0bHkgY29uZmlndXJlZCBvdGhlcndpc2VcbiAgICBsZXQgdW5zYWZlbHlJZ25vcmVGdW5jdGlvbnMgPSBvcHRpb25zPy51bnNhZmVseUlnbm9yZUZ1bmN0aW9ucztcbiAgICBpZiAodW5zYWZlbHlJZ25vcmVGdW5jdGlvbnMgPT0gbnVsbCkge1xuICAgICAgaWYgKFxuICAgICAgICBsb2dMaXN0ZW5lcnMgJiZcbiAgICAgICAgbG9nTGlzdGVuZXJzLm9uRGlmZmVyZW50RnVuY3Rpb25zSWdub3JlZCAmJlxuICAgICAgICAoIW9wdGlvbnMgfHwgISgndW5zYWZlbHlJZ25vcmVGdW5jdGlvbnMnIGluIG9wdGlvbnMpKVxuICAgICAgKSB7XG4gICAgICAgIGxvZ0xpc3RlbmVycy5vbkRpZmZlcmVudEZ1bmN0aW9uc0lnbm9yZWQob25lLm5hbWUsIHR3by5uYW1lKTtcbiAgICAgIH1cbiAgICAgIHVuc2FmZWx5SWdub3JlRnVuY3Rpb25zID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICF1bnNhZmVseUlnbm9yZUZ1bmN0aW9ucztcbiAgfVxuICBpZiAodHlwZW9mIG9uZSAhPT0gJ29iamVjdCcgfHwgb25lID09PSBudWxsKSB7XG4gICAgLy8gUHJpbWl0aXZlcyBjYW4gYmUgZGlyZWN0bHkgY29tcGFyZWRcbiAgICByZXR1cm4gb25lICE9PSB0d287XG4gIH1cbiAgaWYgKHR5cGVvZiB0d28gIT09ICdvYmplY3QnIHx8IHR3byA9PT0gbnVsbCkge1xuICAgIC8vIFdlIGtub3cgdGhleSBhcmUgZGlmZmVyZW50IGJlY2F1c2UgdGhlIHByZXZpb3VzIGNhc2Ugd291bGQgaGF2ZSB0cmlnZ2VyZWRcbiAgICAvLyBvdGhlcndpc2UuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG9uZS5jb25zdHJ1Y3RvciAhPT0gdHdvLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkob25lKSkge1xuICAgIC8vIFdlIGtub3cgdHdvIGlzIGFsc28gYW4gYXJyYXkgYmVjYXVzZSB0aGUgY29uc3RydWN0b3JzIGFyZSBlcXVhbFxuICAgIGNvbnN0IGxlbiA9IG9uZS5sZW5ndGg7XG4gICAgaWYgKHR3by5sZW5ndGggIT09IGxlbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICAgIGlmIChkZWVwRGlmZmVyKG9uZVtpaV0sIHR3b1tpaV0sIG1heERlcHRoIC0gMSwgb3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9uZSkge1xuICAgICAgaWYgKGRlZXBEaWZmZXIob25lW2tleV0sIHR3b1trZXldLCBtYXhEZXB0aCAtIDEsIG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IHR3b0tleSBpbiB0d28pIHtcbiAgICAgIC8vIFRoZSBvbmx5IGNhc2Ugd2UgaGF2ZW4ndCBjaGVja2VkIHlldCBpcyBrZXlzIHRoYXQgYXJlIGluIHR3byBidXQgYXJlbid0XG4gICAgICAvLyBpbiBvbmUsIHdoaWNoIG1lYW5zIHRoZXkgYXJlIGRpZmZlcmVudC5cbiAgICAgIGlmIChvbmVbdHdvS2V5XSA9PT0gdW5kZWZpbmVkICYmIHR3b1t0d29LZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZGVlcERpZmZlcjtcbm1vZHVsZS5leHBvcnRzLnVuc3RhYmxlX3NldExvZ0xpc3RlbmVycyA9IHVuc3RhYmxlX3NldExvZ0xpc3RlbmVycztcbiJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBRUEsSUFBSUEsWUFBSjs7QUFRQSxTQUFTQyx3QkFBVCxDQUFrQ0MsU0FBbEMsRUFBNEQ7RUFDMURGLFlBQVksR0FBR0UsU0FBZjtBQUNEOztBQUtELElBQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQ2pCQyxHQURpQixFQUVqQkMsR0FGaUIsRUFLUjtFQUFBLElBRlRDLGlCQUVTLHVFQUY2QixDQUFDLENBRTlCO0VBQUEsSUFEVEMsWUFDUztFQUNULElBQU1DLE9BQU8sR0FDWCxPQUFPRixpQkFBUCxLQUE2QixRQUE3QixHQUF3Q0MsWUFBeEMsR0FBdURELGlCQUR6RDtFQUVBLElBQU1HLFFB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