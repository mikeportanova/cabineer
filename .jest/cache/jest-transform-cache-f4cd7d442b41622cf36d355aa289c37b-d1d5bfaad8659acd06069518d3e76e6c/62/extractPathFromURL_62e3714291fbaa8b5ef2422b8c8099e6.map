{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;AAEe,SAASA,kBAAT,CAA4BC,QAA5B,EAAgDC,GAAhD,EAA6D;EAC1E,KAAK,IAAMC,MAAX,IAAqBF,QAArB,EAA+B;IAAA;;IAC7B,IAAMG,QAAQ,sCAAGD,MAAM,CAACE,KAAPF,CAAa,SAAbA,CAAH,kDAAGG,cAA0B,CAA1B,CAAH,2DAAmC,EAAjD;IACA,IAAMC,IAAI,GAAGJ,MAAM,CAChBK,OADUL,CACF,IAAIM,MAAJ,OAAe,iCAAmBL,QAAnB,CAAf,CADED,EAC8C,EAD9CA,EAEVK,OAFUL,CAEF,MAFEA,EAEM,GAFNA,EAGVK,OAHUL,CAGF,KAHEA,EAGK,EAHLA,CAAb;IAKA,IAAMO,WAAW,GAAG,IAAID,MAAJ,OACd,iCAAmBL,QAAnB,CADc,YACqBG,IAAI,CACxCI,KADoCJ,CAC9B,GAD8BA,EAEpCK,GAFoCL,CAE/BM,YAAD;MAAA,OAASA,EAAE,KAAK,GAAPA,GAAa,OAAbA,GAAuB,iCAAmBA,EAAnB,CAAhC;IAAA,CAFgCN,EAGpCO,IAHoCP,CAG/B,KAH+BA,CADrB,CAApB;IAOA,IAAMQ,aAAa,GAAGb,GAAG,CAACM,OAAJN,CAAY,MAAZA,EAAoB,GAApBA,CAAtB;;IAEA,IAAIQ,WAAW,CAACM,IAAZN,CAAiBK,aAAjBL,CAAJ,EAAqC;MACnC,OAAOK,aAAa,CAACP,OAAdO,CAAsBL,WAAtBK,EAAmC,EAAnCA,CAAP;IACD;EACF;;EAED,OAAOE,SAAP;AACD","names":["extractPathFromURL","prefixes","url","prefix","protocol","match","_prefix$match","host","replace","RegExp","prefixRegex","split","map","it","join","normalizedURL","test","undefined"],"sources":["extractPathFromURL.tsx"],"sourcesContent":["import escapeStringRegexp from 'escape-string-regexp';\n\nexport default function extractPathFromURL(prefixes: string[], url: string) {\n  for (const prefix of prefixes) {\n    const protocol = prefix.match(/^[^:]+:/)?.[0] ?? '';\n    const host = prefix\n      .replace(new RegExp(`^${escapeStringRegexp(protocol)}`), '')\n      .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n      .replace(/^\\//, ''); // Remove extra leading slash\n\n    const prefixRegex = new RegExp(\n      `^${escapeStringRegexp(protocol)}(/)*${host\n        .split('.')\n        .map((it) => (it === '*' ? '[^/]+' : escapeStringRegexp(it)))\n        .join('\\\\.')}`\n    );\n\n    const normalizedURL = url.replace(/\\/+/g, '/');\n\n    if (prefixRegex.test(normalizedURL)) {\n      return normalizedURL.replace(prefixRegex, '');\n    }\n  }\n\n  return undefined;\n}\n"]}