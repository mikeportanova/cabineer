{"version":3,"mappings":";;;;;;;;;;;;;;AAAA;;AAQO,IAAMA,qBAAqB,GAChC,+QADK;;;AAGQ,SAASC,4BAAT,GAEmC;EAChD,IAAMC,OAAO,8CACRC,MAAM,CAACC,IAAPD,CAAYE,sBAAZF,CADQ,IAEX,aAFW,EAGX,gBAHW,EAIX,WAJW,EAKX,UALW,EAMX,WANW,EAOX,WAPW,EAQX,cARW,EASX,UATW,EAUX,WAVW,EAWX,iBAXW,EAYX,mBAZW,EAAb;EAeA,IAAMG,SAAuD,GAAG,EAAhE;;EAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CACrBC,KADqB,EAErBC,QAFqB,EAGlB;IACH,IAAIH,SAAS,CAACE,KAAD,CAAb,EAAsB;MACpBF,SAAS,CAACE,KAAD,CAATF,GAAmBA,SAAS,CAACE,KAAD,CAATF,CAAiBI,MAAjBJ,CAAyBK,YAAD;QAAA,OAAQA,EAAE,KAAKF,QAAf;MAAA,CAAxBH,CAAnBA;IACD;EANH;;EASA,IAAIM,OAAiD,GAAG,IAAxD;EAEA,IAAMC,GAAiD;IACrD,IAAID,OAAJ,GAAc;MACZ,OAAOA,OAAP;IAFsD,CAAH;;IAIrD,IAAIA,OAAJ,CAAYE,KAAZ,EAA6D;MAC3DF,OAAO,GAAGE,KAAVF;;MAEA,IAAIE,KAAK,IAAI,IAAb,EAAmB;QACjBX,MAAM,CAACY,OAAPZ,CAAeG,SAAfH,EAA0Ba,OAA1Bb,CAAkC,gBAAwB;UAAA;UAAA,IAAtBK,KAAsB;UAAA,IAAfS,SAAe;;UACxDA,SAAS,CAACD,OAAVC,CAAmBR,kBAAD,EAAc;YAC9BK,KAAK,CAACI,WAANJ,CACEN,KADFM,EAEEL,QAFFK;UADF;QADF;MAQD;IAhBqD,CAAH;;IAkBrDK,OAAO,EAAE,mBAAM;MACb,IAAIP,OAAO,IAAI,IAAf,EAAqB;QACnB,OAAO,KAAP;MACD;;MAED,OAAOA,OAAO,CAACO,OAARP,EAAP;IAvBsD;EAAH,GAyBlDV,OAAO,CAACkB,MAARlB,CAAoB,UAACmB,GAAD,EAAMC,IAAN,EAAe;IACpCD,GAAG,CAACC,IAAD,CAAHD,GAAY,YAAoB;MAAA,kCAAhBE,IAAgB;QAAhBA,IAAgB,MAAhBA,GAAgBC,eAAhBD;MAAgB;;MAC9B,IAAIX,OAAO,IAAI,IAAf,EAAqB;QACnB,QAAQU,IAAR;UACE,KAAK,aAAL;YAAoB;cAClB,IAAOd,KAAP,GAA0Be,IAA1B;cAAA,IAAcd,QAAd,GAA0Bc,IAA1B;cAEAjB,SAAS,CAACE,KAAD,CAATF,GAAmBA,SAAS,CAACE,KAAD,CAATF,IAAoB,EAAvCA;cACAA,SAAS,CAACE,KAAD,CAATF,CAAiBmB,IAAjBnB,CAAsBG,QAAtBH;cAEA,OAAO;gBAAA,OAAMC,cAAc,CAACC,KAAD,EAAQC,QAAR,CAApB;cAAA,CAAP;YACD;;UACD,KAAK,gBAAL;YAAuB;cACrB,IAAOD,MAAP,GAA0Be,IAA1B;cAAA,IAAcd,SAAd,GAA0Bc,IAA1B;cAEAhB,cAAc,CAACC,MAAD,EAAQC,SAAR,CAAdF;cACA;YACD;;UACD;YACEmB,OAAO,CAACC,KAARD,CAAc1B,qBAAd0B;QAhBJ;MADF,OAmBO;QAAA;;QAEL,OAAOd,mBAAO,EAACU,IAAD,CAAPV,iBAAiBW,IAAjBX,CAAP;MACD;IAvBH;;IAyBA,OAAOS,GAAP;EA1BC,GA2BA,EA3BAnB,CAzBkD,CAAvD;EAuDA,OAAOW,GAAP;AACD","names":["NOT_INITIALIZED_ERROR","createNavigationContainerRef","methods","Object","keys","CommonActions","listeners","removeListener","event","callback","filter","cb","current","ref","value","entries","forEach","callbacks","addListener","isReady","reduce","acc","name","args","arguments","push","console","error"],"sources":["createNavigationContainerRef.tsx"],"sourcesContent":["import { CommonActions } from '@react-navigation/routers';\n\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerRef,\n  NavigationContainerRefWithCurrent,\n} from './types';\n\nexport const NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\n\nexport default function createNavigationContainerRef<\n  ParamList extends {} = ReactNavigation.RootParamList\n>(): NavigationContainerRefWithCurrent<ParamList> {\n  const methods = [\n    ...Object.keys(CommonActions),\n    'addListener',\n    'removeListener',\n    'resetRoot',\n    'dispatch',\n    'isFocused',\n    'canGoBack',\n    'getRootState',\n    'getState',\n    'getParent',\n    'getCurrentRoute',\n    'getCurrentOptions',\n  ] as const;\n\n  const listeners: Record<string, ((...args: any[]) => void)[]> = {};\n\n  const removeListener = (\n    event: string,\n    callback: (...args: any[]) => void\n  ) => {\n    if (listeners[event]) {\n      listeners[event] = listeners[event].filter((cb) => cb !== callback);\n    }\n  };\n\n  let current: NavigationContainerRef<ParamList> | null = null;\n\n  const ref: NavigationContainerRefWithCurrent<ParamList> = {\n    get current() {\n      return current;\n    },\n    set current(value: NavigationContainerRef<ParamList> | null) {\n      current = value;\n\n      if (value != null) {\n        Object.entries(listeners).forEach(([event, callbacks]) => {\n          callbacks.forEach((callback) => {\n            value.addListener(\n              event as keyof NavigationContainerEventMap,\n              callback\n            );\n          });\n        });\n      }\n    },\n    isReady: () => {\n      if (current == null) {\n        return false;\n      }\n\n      return current.isReady();\n    },\n    ...methods.reduce<any>((acc, name) => {\n      acc[name] = (...args: any[]) => {\n        if (current == null) {\n          switch (name) {\n            case 'addListener': {\n              const [event, callback] = args;\n\n              listeners[event] = listeners[event] || [];\n              listeners[event].push(callback);\n\n              return () => removeListener(event, callback);\n            }\n            case 'removeListener': {\n              const [event, callback] = args;\n\n              removeListener(event, callback);\n              break;\n            }\n            default:\n              console.error(NOT_INITIALIZED_ERROR);\n          }\n        } else {\n          // @ts-expect-error: this is ok\n          return current[name](...args);\n        }\n      };\n      return acc;\n    }, {}),\n  };\n\n  return ref;\n}\n"]}