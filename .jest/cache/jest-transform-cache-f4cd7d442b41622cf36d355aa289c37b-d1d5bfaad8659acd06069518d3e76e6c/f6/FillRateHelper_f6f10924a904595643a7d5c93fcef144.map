{"version":3,"names":["Info","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","getFrameMetrics","_anyBlankStartTime","_enabled","_info","_mostlyBlankStartTime","_samplesStartTime","_getFrameMetrics","Math","random","_resetData","console","debug","global","performance","now","start","info","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","key","round","forEach","listener","props","state","scrollMetrics","getItemCount","data","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","blankTop","first","firstFrame","last","inLayout","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","deactivateAndFlush","callback","warn","push","remove","filter","sampleRate","minSampleCount","module","exports"],"sources":["FillRateHelper.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nexport type FillRateInfo = Info;\n\nclass Info {\n  any_blank_count: number = 0;\n  any_blank_ms: number = 0;\n  any_blank_speed_sum: number = 0;\n  mostly_blank_count: number = 0;\n  mostly_blank_ms: number = 0;\n  pixels_blank: number = 0;\n  pixels_sampled: number = 0;\n  pixels_scrolled: number = 0;\n  total_time_spent: number = 0;\n  sample_count: number = 0;\n}\n\ntype FrameMetrics = {\n  inLayout?: boolean,\n  length: number,\n  offset: number,\n  ...\n};\n\nconst DEBUG = false;\n\nlet _listeners: Array<(Info) => void> = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime = (null: ?number);\n  _enabled = false;\n  _getFrameMetrics: (index: number) => ?FrameMetrics;\n  _info = new Info();\n  _mostlyBlankStartTime = (null: ?number);\n  _samplesStartTime = (null: ?number);\n\n  static addListener(callback: FillRateInfo => void): {\n    remove: () => void,\n    ...\n  } {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate: number) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount: number) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(getFrameMetrics: (index: number) => ?FrameMetrics) {\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = global.performance.now() - start;\n    const info: any = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props: {\n      data: any,\n      getItemCount: (data: any) => number,\n      initialNumToRender?: ?number,\n      ...\n    },\n    state: {\n      first: number,\n      last: number,\n      ...\n    },\n    scrollMetrics: {\n      dOffset: number,\n      offset: number,\n      velocity: number,\n      visibleLength: number,\n      ...\n    },\n  ): number {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = state.first;\n    let firstFrame = this._getFrameMetrics(first);\n    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = state.last;\n    let lastFrame = this._getFrameMetrics(last);\n    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled(): boolean {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nmodule.exports = FillRateHelper;\n"],"mappings":"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"}