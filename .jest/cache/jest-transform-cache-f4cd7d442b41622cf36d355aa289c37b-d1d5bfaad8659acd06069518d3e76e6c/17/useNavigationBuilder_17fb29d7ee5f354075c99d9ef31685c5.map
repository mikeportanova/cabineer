{"version":3,"mappings":"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","names":["PrivateValueStore","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","React","Children","toArray","reduce","acc","child","isValidElement","type","Screen","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","Group","screenOptions","_child$type","String","process","env","NODE_ENV","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","NavigationRouteContext","screenListeners","rest","useRef","params","state","initial","screen","initialRouteName","router","current","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","NavigationStateContext","currentState","getCurrentState","getState","setCurrentState","setState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","_route$params5","initializedState","isFirstStateInitialization","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","CommonActions","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","_route","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","id","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","NavigationHelpersContext","Provider","value"],"sources":["useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]}