{"version":3,"names":["VirtualizedListContext","React","createContext","__DEV__","displayName","VirtualizedListContextResetter","children","VirtualizedListContextProvider","value","context","useMemo","cellKey","getScrollMetrics","horizontal","getOutermostParentListRef","getNestedChildState","registerAsNestedChild","unregisterAsNestedChild","debugInfo","listKey","parent","VirtualizedListCellContextProvider","currContext","useContext"],"sources":["VirtualizedListContext.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type VirtualizedList from './VirtualizedList.js';\nimport * as React from 'react';\nimport {useMemo, useContext} from 'react';\n\ntype Frame = $ReadOnly<{\n  offset: number,\n  length: number,\n  index: number,\n  inLayout: boolean,\n}>;\n\nexport type ChildListState = $ReadOnly<{\n  first: number,\n  last: number,\n  frames: {[key: number]: Frame},\n}>;\n\n// Data propagated through nested lists (regardless of orientation) that is\n// useful for producing diagnostics for usage errors involving nesting (e.g\n// missing/duplicate keys).\nexport type ListDebugInfo = $ReadOnly<{\n  cellKey: string,\n  listKey: string,\n  parent: ?ListDebugInfo,\n  // We include all ancestors regardless of orientation, so this is not always\n  // identical to the child's orientation.\n  horizontal: boolean,\n}>;\n\ntype Context = $ReadOnly<{\n  cellKey: ?string,\n  getScrollMetrics: () => {\n    contentLength: number,\n    dOffset: number,\n    dt: number,\n    offset: number,\n    timestamp: number,\n    velocity: number,\n    visibleLength: number,\n  },\n  horizontal: ?boolean,\n  getOutermostParentListRef: () => VirtualizedList,\n  getNestedChildState: string => ?ChildListState,\n  registerAsNestedChild: ({\n    cellKey: string,\n    key: string,\n    ref: VirtualizedList,\n    parentDebugInfo: ListDebugInfo,\n  }) => ?ChildListState,\n  unregisterAsNestedChild: ({\n    key: string,\n    state: ChildListState,\n  }) => void,\n  debugInfo: ListDebugInfo,\n}>;\n\nexport const VirtualizedListContext: React.Context<?Context> =\n  React.createContext(null);\nif (__DEV__) {\n  VirtualizedListContext.displayName = 'VirtualizedListContext';\n}\n\n/**\n * Resets the context. Intended for use by portal-like components (e.g. Modal).\n */\nexport function VirtualizedListContextResetter({\n  children,\n}: {\n  children: React.Node,\n}): React.Node {\n  return (\n    <VirtualizedListContext.Provider value={null}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n\n/**\n * Sets the context with memoization. Intended to be used by `VirtualizedList`.\n */\nexport function VirtualizedListContextProvider({\n  children,\n  value,\n}: {\n  children: React.Node,\n  value: Context,\n}): React.Node {\n  // Avoid setting a newly created context object if the values are identical.\n  const context = useMemo(\n    () => ({\n      cellKey: null,\n      getScrollMetrics: value.getScrollMetrics,\n      horizontal: value.horizontal,\n      getOutermostParentListRef: value.getOutermostParentListRef,\n      getNestedChildState: value.getNestedChildState,\n      registerAsNestedChild: value.registerAsNestedChild,\n      unregisterAsNestedChild: value.unregisterAsNestedChild,\n      debugInfo: {\n        cellKey: value.debugInfo.cellKey,\n        horizontal: value.debugInfo.horizontal,\n        listKey: value.debugInfo.listKey,\n        parent: value.debugInfo.parent,\n      },\n    }),\n    [\n      value.getScrollMetrics,\n      value.horizontal,\n      value.getOutermostParentListRef,\n      value.getNestedChildState,\n      value.registerAsNestedChild,\n      value.unregisterAsNestedChild,\n      value.debugInfo.cellKey,\n      value.debugInfo.horizontal,\n      value.debugInfo.listKey,\n      value.debugInfo.parent,\n    ],\n  );\n  return (\n    <VirtualizedListContext.Provider value={context}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n\n/**\n * Sets the `cellKey`. Intended to be used by `VirtualizedList` for each cell.\n */\nexport function VirtualizedListCellContextProvider({\n  cellKey,\n  children,\n}: {\n  cellKey: string,\n  children: React.Node,\n}): React.Node {\n  // Avoid setting a newly created context object if the values are identical.\n  const currContext = useContext(VirtualizedListContext);\n  const context = useMemo(\n    () => (currContext == null ? null : {...currContext, cellKey}),\n    [currContext, cellKey],\n  );\n  return (\n    <VirtualizedListContext.Provider value={context}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n"],"mappings":";;;;;;;;AAWA;;;;;;AAuDO,IAAMA,sBAA+C,GAC1DC,KAAK,CAACC,aAAN,CAAoB,IAApB,CADK;;;AAEP,IAAIC,OAAJ,EAAa;EACXH,sBAAsB,CAACI,WAAvB,GAAqC,wBAArC;AACD;;AAKM,SAASC,8BAAT,OAIQ;EAAA,IAHbC,QAGa,QAHbA,QAGa;EACb,OACE,oBAAC,sBAAD,CAAwB,QAAxB;IAAiC,KAAK,EAAE;EAAxC,GACGA,QADH,CADF;AAKD;;AAKM,SAASC,8BAAT,QAMQ;EAAA,IALbD,QAKa,SALbA,QAKa;EAAA,IAJbE,KAIa,SAJbA,KAIa;EAEb,IAAMC,OAAO,GAAG,IAAAC,aAAA,EACd;IAAA,OAAO;MACLC,OAAO,EAAE,IADJ;MAELC,gBAAgB,EAAEJ,KAAK,CAACI,gBAFnB;MAGLC,UAAU,EAAEL,KAAK,CAACK,UAHb;MAILC,yBAAyB,EAAEN,KAAK,CAACM,yBAJ5B;MAKLC,mBAAmB,EAAEP,KAAK,CAACO,mBALtB;MAMLC,qBAAqB,EAAER,KAAK,CAACQ,qBANxB;MAOLC,uBAAuB,EAAET,KAAK,CAACS,uBAP1B;MAQLC,SAAS,EAAE;QACTP,OAAO,EAAEH,KAAK,CAACU,SAAN,CAAgBP,OADhB;QAETE,UAAU,EAAEL,KAAK,CAACU,SAAN,CAAgBL,UAFnB;QAGTM,OAAO,EAAEX,KAAK,CAACU,SAAN,CAAgBC,OAHhB;QAITC,MAAM,EAAEZ,KAAK,CAACU,SAAN,CAAgBE;MAJf;IARN,CAAP;EAAA,CADc,EAgBd,CACEZ,KAAK,CAACI,gBADR,EAEEJ,KAAK,CAACK,UAFR,EAGEL,KAAK,CAACM,yBAHR,EAIEN,KAAK,CAACO,mBAJR,EAKEP,KAAK,CAACQ,qBALR,EAMER,KAAK,CAACS,uBANR,EAOET,KAAK,CAACU,SAAN,CAAgBP,OAPlB,EAQEH,KAAK,CAACU,SAAN,CAAgBL,UARlB,EASEL,KAAK,CAACU,SAAN,CAAgBC,OATlB,EAUEX,KAAK,CAACU,SAAN,CAAgBE,MAVlB,CAhBc,CAAhB;EA6BA,OACE,oBAAC,sBAAD,CAAwB,QAAxB;IAAiC,KAAK,EAAEX;EAAxC,GACGH,QADH,CADF;AAKD;;AAKM,SAASe,kCAAT,QAMQ;EAAA,IALbV,OAKa,SALbA,OAKa;EAAA,IAJbL,QAIa,SAJbA,QAIa;EAEb,IAAMgB,WAAW,GAAG,IAAAC,gBAAA,EAAWvB,sBAAX,CAApB;EACA,IAAMS,OAAO,GAAG,IAAAC,aAAA,EACd;IAAA,OAAOY,WAAW,IAAI,IAAf,GAAsB,IAAtB,qBAAiCA,WAAjC;MAA8CX,OAAO,EAAPA;IAA9C,EAAP;EAAA,CADc,EAEd,CAACW,WAAD,EAAcX,OAAd,CAFc,CAAhB;EAIA,OACE,oBAAC,sBAAD,CAAwB,QAAxB;IAAiC,KAAK,EAAEF;EAAxC,GACGH,QADH,CADF;AAKD"}