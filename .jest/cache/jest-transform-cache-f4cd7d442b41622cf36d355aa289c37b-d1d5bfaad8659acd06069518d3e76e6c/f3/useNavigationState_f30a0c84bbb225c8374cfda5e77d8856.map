{"version":3,"mappings":";;;;;;;;;;;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWe,SAASA,kBAAT,CACbC,QADa,EAEV;EACH,IAAMC,UAAU,GAAG,6BAAnB;;EAIA,sBAAsBC,KAAK,CAACC,QAAND,CAAe;IAAA,OAAMF,QAAQ,CAACC,UAAU,CAACG,QAAXH,EAAD,CAAd;EAAA,CAAfC,CAAtB;EAAA;EAAA,IAASG,SAAT;;EAGA,IAAMC,WAAW,GAAGJ,KAAK,CAACK,MAANL,CAAaF,QAAbE,CAApB;EAEAA,KAAK,CAACM,SAANN,CAAgB,YAAM;IACpBI,WAAW,CAACG,OAAZH,GAAsBN,QAAtBM;EADF;EAIAJ,KAAK,CAACM,SAANN,CAAgB,YAAM;IACpB,IAAMQ,WAAW,GAAGT,UAAU,CAACU,WAAXV,CAAuB,OAAvBA,EAAiCW,WAAD,EAAO;MACzDP,SAAS,CAACC,WAAW,CAACG,OAAZH,CAAoBM,CAAC,CAACC,IAAFD,CAAOE,KAA3BR,CAAD,CAATD;IADkB,EAApB;IAIA,OAAOK,WAAP;EALF,GAMG,CAACT,UAAD,CANHC;EAQA,OAAOF,QAAQ,CAACC,UAAU,CAACG,QAAXH,EAAD,CAAf;AACD","names":["useNavigationState","selector","navigation","React","useState","getState","setResult","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"sources":["useNavigationState.tsx"],"sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\nimport useNavigation from './useNavigation';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const navigation = useNavigation<NavigationProp<ParamList>>();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n"]}