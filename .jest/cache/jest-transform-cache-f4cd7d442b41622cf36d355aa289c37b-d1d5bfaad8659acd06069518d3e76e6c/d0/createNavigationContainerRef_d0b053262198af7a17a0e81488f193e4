c6883d228d1e69a173f84f3a5ad418e0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOT_INITIALIZED_ERROR = void 0;
exports.default = createNavigationContainerRef;

var _routers = require("@react-navigation/routers");

var NOT_INITIALIZED_ERROR = "The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.";
exports.NOT_INITIALIZED_ERROR = NOT_INITIALIZED_ERROR;

function createNavigationContainerRef() {
  var methods = [].concat((0, _toConsumableArray2.default)(Object.keys(_routers.CommonActions)), ['addListener', 'removeListener', 'resetRoot', 'dispatch', 'isFocused', 'canGoBack', 'getRootState', 'getState', 'getParent', 'getCurrentRoute', 'getCurrentOptions']);
  var listeners = {};

  var removeListener = function removeListener(event, callback) {
    if (listeners[event]) {
      listeners[event] = listeners[event].filter(function (cb) {
        return cb !== callback;
      });
    }
  };

  var current = null;
  var ref = Object.assign({
    get current() {
      return current;
    },

    set current(value) {
      current = value;

      if (value != null) {
        Object.entries(listeners).forEach(function (_ref) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
              event = _ref2[0],
              callbacks = _ref2[1];

          callbacks.forEach(function (callback) {
            value.addListener(event, callback);
          });
        });
      }
    },

    isReady: function isReady() {
      if (current == null) {
        return false;
      }

      return current.isReady();
    }
  }, methods.reduce(function (acc, name) {
    acc[name] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (current == null) {
        switch (name) {
          case 'addListener':
            {
              var event = args[0],
                  callback = args[1];
              listeners[event] = listeners[event] || [];
              listeners[event].push(callback);
              return function () {
                return removeListener(event, callback);
              };
            }

          case 'removeListener':
            {
              var _event = args[0],
                  _callback = args[1];
              removeListener(_event, _callback);
              break;
            }

          default:
            console.error(NOT_INITIALIZED_ERROR);
        }
      } else {
        var _current;

        return (_current = current)[name].apply(_current, args);
      }
    };

    return acc;
  }, {}));
  return ref;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFRTyxJQUFNQSxxQkFBcUIsR0FDaEMsK1FBREs7OztBQUdRLFNBQVNDLDRCQUFULEdBRW1DO0VBQ2hELElBQU1DLE9BQU8sOENBQ1JDLE1BQU0sQ0FBQ0MsSUFBUEQsQ0FBWUUsc0JBQVpGLENBRFEsSUFFWCxhQUZXLEVBR1gsZ0JBSFcsRUFJWCxXQUpXLEVBS1gsVUFMVyxFQU1YLFdBTlcsRUFPWCxXQVBXLEVBUVgsY0FSVyxFQVNYLFVBVFcsRUFVWCxXQVZXLEVBV1gsaUJBWFcsRUFZWCxtQkFaVyxFQUFiO0VBZUEsSUFBTUcsU0FBdUQsR0FBRyxFQUFoRTs7RUFFQSxJQUFNQyxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQ3JCQyxLQURxQixFQUVyQkMsUUFGcUIsRUFHbEI7SUFDSCxJQUFJSCxTQUFTLENBQUNFLEtBQUQsQ0FBYixFQUFzQjtNQUNwQkYsU0FBUyxDQUFDRSxLQUFELENBQVRGLEdBQW1CQSxTQUFTLENBQUNFLEtBQUQsQ0FBVEYsQ0FBaUJJLE1BQWpCSixDQUF5QkssWUFBRDtRQUFBLE9BQVFBLEVBQUUsS0FBS0YsUUFBZjtNQUFBLENBQXhCSCxDQUFuQkE7SUFDRDtFQU5IOztFQVNBLElBQUlNLE9BQWlELEdBQUcsSUFBeEQ7RUFFQSxJQUFNQyxHQUFpRDtJQUNyRCxJQUFJRCxPQUFKLEdBQWM7TUFDWixPQUFPQSxPQUFQO0lBRnNELENBQUg7O0lBSXJELElBQUlBLE9BQUosQ0FBWUUsS0FBWixFQUE2RDtNQUMzREYsT0FBTyxHQUFHRSxLQUFWRjs7TUFFQSxJQUFJRSxLQUFLLElBQUksSUFBYixFQUFtQjtRQUNqQlgsTUFBTSxDQUFDWSxPQUFQWixDQUFlRyxTQUFmSCxFQUEwQmEsT0FBMUJiLENBQWtDLGdCQUF3QjtVQUFBO1VBQUEsSUFBdEJLLEtBQXNCO1VBQUEsSUFBZlMsU0FBZTs7VUFDeERBLFNBQVMsQ0FBQ0QsT0FBVkMsQ0FBbUJSLGtCQUFELEVBQWM7WUFDOUJLLEtBQUssQ0FBQ0ksV0FBTkosQ0FDRU4sS0FERk0sRUFFRUwsUUFGRks7VUFERjtRQURGO01BUUQ7SUFoQnFELENBQUg7O0lBa0JyREssT0FBTyxFQUFFLG1CQUFNO01BQ2IsSUFBSVAsT0FBTyxJQUFJLElBQWYsRUFBcUI7UUFDbkIsT0FBTyxLQUFQO01BQ0Q7O01BRUQsT0FBT0EsT0FBTyxDQUFDTyxPQUFSUCxFQUFQO0lBdkJzRDtFQUFILEdBeUJsRFYsT0FBTyxDQUFDa0IsTUFBUmxCLENBQW9CLFVBQUNtQixHQUFELEVBQU1DLElBQU4sRUFBZTtJQUNwQ0QsR0FBRyxDQUFDQyxJQUFELENBQUhELEdBQVksWUFBb0I7TUFBQSxrQ0FBaEJFLElBQWdCO1FBQWhCQSxJQUFnQixNQUFoQkEsR0FBZ0JDLGVBQWhCRDtNQUFnQjs7TUFDOUIsSUFBSVgsT0FBTyxJQUFJLElBQWYsRUFBcUI7UUFDbkIsUUFBUVUsSUFBUjtVQUNFLEtBQUssYUFBTDtZQUFvQjtjQUNsQixJQUFPZCxLQUFQLEdBQTBCZSxJQUExQjtjQUFBLElBQWNkLFFBQWQsR0FBMEJjLElBQTFCO2NBRUFqQixTQUFTLENBQUNFLEtBQUQsQ0FBVEYsR0FBbUJBLFNBQVMsQ0FBQ0UsS0FBRCxDQUFURixJQUFvQixFQUF2Q0E7Y0FDQUEsU0FBUyxDQUFDRSxLQUFELENBQVRGLENBQWlCbUIsSUFBakJuQixDQUFzQkcsUUFBdEJIO2NBRUEsT0FBTztnQkFBQSxPQUFNQyxjQUFjLENBQUNDLEtBQUQsRUFBUUMsUUFBUixDQUFwQjtjQUFBLENBQVA7WUFDRDs7VUFDRCxLQUFLLGdCQUFMO1lBQXVCO2NBQ3JCLElBQU9ELE1BQVAsR0FBMEJlLElBQTFCO2NBQUEsSUFBY2QsU0FBZCxHQUEwQmMsSUFBMUI7Y0FFQWhCLGNBQWMsQ0FBQ0MsTUFBRCxFQUFRQyxTQUFSLENBQWRGO2NBQ0E7WUFDRDs7VUFDRDtZQUNFbUIsT0FBTyxDQUFDQyxLQUFSRCxDQUFjMUIscUJBQWQwQjtRQWhCSjtNQURGLE9BbUJPO1FBQUE7O1FBRUwsT0FBT2QsbUJBQU8sRUFBQ1UsSUFBRCxDQUFQVixpQkFBaUJXLElBQWpCWCxDQUFQO01BQ0Q7SUF2Qkg7O0lBeUJBLE9BQU9TLEdBQVA7RUExQkMsR0EyQkEsRUEzQkFuQixDQXpCa0QsQ0FBdkQ7RUF1REEsT0FBT1csR0FBUDtBQUNEIiwibmFtZXMiOlsiTk9UX0lOSVRJQUxJWkVEX0VSUk9SIiwiY3JlYXRlTmF2aWdhdGlvbkNvbnRhaW5lclJlZiIsIm1ldGhvZHMiLCJPYmplY3QiLCJrZXlzIiwiQ29tbW9uQWN0aW9ucyIsImxpc3RlbmVycyIsInJlbW92ZUxpc3RlbmVyIiwiZXZlbnQiLCJjYWxsYmFjayIsImZpbHRlciIsImNiIiwiY3VycmVudCIsInJlZiIsInZhbHVlIiwiZW50cmllcyIsImZvckVhY2giLCJjYWxsYmFja3MiLCJhZGRMaXN0ZW5lciIsImlzUmVhZHkiLCJyZWR1Y2UiLCJhY2MiLCJuYW1lIiwiYXJncyIsImFyZ3VtZW50cyIsInB1c2giLCJjb25zb2xlIiwiZXJyb3IiXSwic291cmNlcyI6WyJjcmVhdGVOYXZpZ2F0aW9uQ29udGFpbmVyUmVmLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25BY3Rpb25zIH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vcm91dGVycyc7XG5cbmltcG9ydCB0eXBlIHtcbiAgTmF2aWdhdGlvbkNvbnRhaW5lckV2ZW50TWFwLFxuICBOYXZpZ2F0aW9uQ29udGFpbmVyUmVmLFxuICBOYXZpZ2F0aW9uQ29udGFpbmVyUmVmV2l0aEN1cnJlbnQsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgTk9UX0lOSVRJQUxJWkVEX0VSUk9SID1cbiAgXCJUaGUgJ25hdmlnYXRpb24nIG9iamVjdCBoYXNuJ3QgYmVlbiBpbml0aWFsaXplZCB5ZXQuIFRoaXMgbWlnaHQgaGFwcGVuIGlmIHlvdSBkb24ndCBoYXZlIGEgbmF2aWdhdG9yIG1vdW50ZWQsIG9yIGlmIHRoZSBuYXZpZ2F0b3IgaGFzbid0IGZpbmlzaGVkIG1vdW50aW5nLiBTZWUgaHR0cHM6Ly9yZWFjdG5hdmlnYXRpb24ub3JnL2RvY3MvbmF2aWdhdGluZy13aXRob3V0LW5hdmlnYXRpb24tcHJvcCNoYW5kbGluZy1pbml0aWFsaXphdGlvbiBmb3IgbW9yZSBkZXRhaWxzLlwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVOYXZpZ2F0aW9uQ29udGFpbmVyUmVmPFxuICBQYXJhbUxpc3QgZXh0ZW5kcyB7fSA9IFJlYWN0TmF2aWdhdGlvbi5Sb290UGFyYW1MaXN0XG4+KCk6IE5hdmlnYXRpb25Db250YWluZXJSZWZXaXRoQ3VycmVudDxQYXJhbUxpc3Q+IHtcbiAgY29uc3QgbWV0aG9kcyA9IFtcbiAgICAuLi5PYmplY3Qua2V5cyhDb21tb25BY3Rpb25zKSxcbiAgICAnYWRkTGlzdGVuZXInLFxuICAgICdyZW1vdmVMaXN0ZW5lcicsXG4gICAgJ3Jlc2V0Um9vdCcsXG4gICAgJ2Rpc3BhdGNoJyxcbiAgICAnaXNGb2N1c2VkJyxcbiAgICAnY2FuR29CYWNrJyxcbiAgICAnZ2V0Um9vdFN0YXRlJyxcbiAgICAnZ2V0U3RhdGUnLFxuICAgICdnZXRQYXJlbnQnLFxuICAgICdnZXRDdXJyZW50Um91dGUnLFxuICAgICdnZXRDdXJyZW50T3B0aW9ucycsXG4gIF0gYXMgY29uc3Q7XG5cbiAgY29uc3QgbGlzdGVuZXJzOiBSZWNvcmQ8c3RyaW5nLCAoKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKVtdPiA9IHt9O1xuXG4gIGNvbnN0IHJlbW92ZUxpc3RlbmVyID0gKFxuICAgIGV2ZW50OiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZFxuICApID0+IHtcbiAgICBpZiAobGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgbGlzdGVuZXJzW2V2ZW50XSA9IGxpc3RlbmVyc1tldmVudF0uZmlsdGVyKChjYikgPT4gY2IgIT09IGNhbGxiYWNrKTtcbiAgICB9XG4gIH07XG5cbiAgbGV0IGN1cnJlbnQ6IE5hdmlnYXRpb25Db250YWluZXJSZWY8UGFyYW1MaXN0PiB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0IHJlZjogTmF2aWdhdGlvbkNvbnRhaW5lclJlZldpdGhDdXJyZW50PFBhcmFtTGlzdD4gPSB7XG4gICAgZ2V0IGN1cnJlbnQoKSB7XG4gICAgICByZXR1cm4gY3VycmVudDtcbiAgICB9LFxuICAgIHNldCBjdXJyZW50KHZhbHVlOiBOYXZpZ2F0aW9uQ29udGFpbmVyUmVmPFBhcmFtTGlzdD4gfCBudWxsKSB7XG4gICAgICBjdXJyZW50ID0gdmFsdWU7XG5cbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIE9iamVjdC5lbnRyaWVzKGxpc3RlbmVycykuZm9yRWFjaCgoW2V2ZW50LCBjYWxsYmFja3NdKSA9PiB7XG4gICAgICAgICAgY2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICB2YWx1ZS5hZGRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgZXZlbnQgYXMga2V5b2YgTmF2aWdhdGlvbkNvbnRhaW5lckV2ZW50TWFwLFxuICAgICAgICAgICAgICBjYWxsYmFja1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpc1JlYWR5OiAoKSA9PiB7XG4gICAgICBpZiAoY3VycmVudCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1cnJlbnQuaXNSZWFkeSgpO1xuICAgIH0sXG4gICAgLi4ubWV0aG9kcy5yZWR1Y2U8YW55PigoYWNjLCBuYW1lKSA9PiB7XG4gICAgICBhY2NbbmFtZV0gPSAoLi4uYXJnczogYW55W10pID0+IHtcbiAgICAgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnYWRkTGlzdGVuZXInOiB7XG4gICAgICAgICAgICAgIGNvbnN0IFtldmVudCwgY2FsbGJhY2tdID0gYXJncztcblxuICAgICAgICAgICAgICBsaXN0ZW5lcnNbZXZlbnRdID0gbGlzdGVuZXJzW2V2ZW50XSB8fCBbXTtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNhbGxiYWNrKTtcblxuICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3JlbW92ZUxpc3RlbmVyJzoge1xuICAgICAgICAgICAgICBjb25zdCBbZXZlbnQsIGNhbGxiYWNrXSA9IGFyZ3M7XG5cbiAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKE5PVF9JTklUSUFMSVpFRF9FUlJPUik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IHRoaXMgaXMgb2tcbiAgICAgICAgICByZXR1cm4gY3VycmVudFtuYW1lXSguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pLFxuICB9O1xuXG4gIHJldHVybiByZWY7XG59XG4iXX0=